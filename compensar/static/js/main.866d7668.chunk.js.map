{"version":3,"sources":["utils/swConfig.ts","serviceWorker.ts","i18n.ts","index.tsx"],"names":["onUpdate","registration","console","info","unregister","then","window","location","reload","onSuccess","log","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","registerLocale","enUS","es","pt","fr","el","bn","th","tr","ja","hi","i18n","use","LanguageDetector","initReactI18next","init","resources","locales","ns","missingKeyHandler","fallbackLng","fallbackNS","interpolation","escapeValue","StartApp","loadable","fallback","Sentry","dsn","process","integrations","Integrations","BrowserTracing","release","environment","tracesSampleRate","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","checkValidServiceWorker","swConfig"],"mappings":"8RAAe,GACbA,SAAU,SAACC,GAETC,QAAQC,KAAK,iCACbF,EAAaG,aAAaC,MAAK,WAC7BC,OAAOC,SAASC,aAGpBC,UAAW,SAACR,GACVC,QAAQC,KAAK,mCACbD,QAAQQ,IAAIT,KCEVU,EAAcC,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTX,MAAK,SAAAJ,GACJA,EAAaoB,cAAgB,WAC3B,IAAMC,EAAmBrB,EAAasB,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfP,UAAUC,cAAcO,YAI1BxB,QAAQQ,IACN,iHAKEO,GAAUA,EAAOjB,UACnBiB,EAAOjB,SAASC,KAMlBC,QAAQQ,IAAI,sCAGRO,GAAUA,EAAOR,WACnBQ,EAAOR,UAAUR,WAO5B0B,OAAM,SAAAC,GACL1B,QAAQ0B,MAAM,4CAA6CA,M,sIC7FjEC,yBAAe,KAAMC,KACrBD,yBAAe,KAAME,KACrBF,yBAAe,KAAMG,KACrBH,yBAAe,KAAMI,KACrBJ,yBAAe,KAAMK,KACrBL,yBAAe,KAAMM,KACrBN,yBAAe,KAAMO,KACrBP,yBAAe,KAAMQ,KACrBR,yBAAe,KAAMS,KACrBT,yBAAe,KAAMU,KAGrBC,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJC,UAAWC,EACXC,GAAI,OACJC,mBAAmB,EAEnBC,YAAa,KACbC,WAAY,OAEZC,cAAe,CACbC,aAAa,KAIJZ,EAAf,EAAeA,ICtBTa,EAAWC,aAAS,kBAAM,wDAAmB,CACjDC,SAAU,0CAIVC,IAAY,CACVC,IAAKC,6EACLC,aAAc,CAAC,IAAIC,IAAaC,gBAChCC,QAAQ,GAAD,OAAKJ,gBAAL,eAAsCA,SAC7CK,YAAaL,YAIbM,iBAAkB,IAItBC,IAASC,OACP,oCACE,kBAACb,EAAD,OAEFc,SAASC,eAAe,SFXnB,SAAkBnD,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAImD,IACpBX,+BACApD,OAAOC,SAAS+D,MAEJC,SAAWjE,OAAOC,SAASgE,OAIvC,OAGFjE,OAAOkE,iBAAiB,QAAQ,WAC9B,IAAMxD,EAAK,UAAM0C,+BAAN,sBAEP/C,IAgEV,SAAiCK,EAAeC,GAE9CwD,MAAMzD,EAAO,CACX0D,QAAS,CAAE,iBAAkB,YAE5BrE,MAAK,SAAAsE,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7D,UAAUC,cAAc6D,MAAM3E,MAAK,SAAAJ,GACjCA,EAAaG,aAAaC,MAAK,WAC7BC,OAAOC,SAASC,eAKpBO,EAAgBC,EAAOC,MAG1BU,OAAM,WACLzB,QAAQQ,IACN,oEAvFAuE,CAAwBjE,EAAOC,GAI/BC,UAAUC,cAAc6D,MAAM3E,MAAK,WACjCH,QAAQQ,IACN,iHAMJK,EAAgBC,EAAOC,OEX7BE,CAAuB+D,I","file":"static/js/main.866d7668.chunk.js","sourcesContent":["export default {\n  onUpdate: (registration: ServiceWorkerRegistration) => {\n    // eslint-disable-next-line no-restricted-globals, no-alert\n    console.info('New version available. Reload');\n    registration.unregister().then(() => {\n      window.location.reload();\n    });\n  },\n  onSuccess: (registration: ServiceWorkerRegistration) => {\n    console.info('service worker on success state');\n    console.log(registration);\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport { registerLocale } from 'react-datepicker';\nimport {\n  enUS, es, pt, fr, el, bn, th, tr, ja, hi,\n} from 'date-fns/locale';\n\n// Locales\nimport * as locales from './locales';\n\nregisterLocale('en', enUS);\nregisterLocale('es', es);\nregisterLocale('pt', pt);\nregisterLocale('fr', fr);\nregisterLocale('el', el);\nregisterLocale('bn', bn);\nregisterLocale('th', th);\nregisterLocale('tr', tr);\nregisterLocale('ja', ja);\nregisterLocale('hi', hi);\n\n// Translations\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources: locales,\n    ns: 'main',\n    missingKeyHandler: false,\n\n    fallbackLng: 'es',\n    fallbackNS: 'main',\n\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport loadable from '@loadable/component';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n// Sentry\nimport * as Sentry from '@sentry/react';\nimport { Integrations } from '@sentry/tracing';\n\n// Utils\nimport swConfig from 'utils/swConfig';\n\n// Service Work\nimport * as serviceWorker from './serviceWorker';\n\nimport './i18n';\n\nconst StartApp = loadable(() => import('./start'), {\n  fallback: <div>Loading</div>,\n});\n\nif (process.env.NODE_ENV === 'production' && process.env.REACT_APP_SENTRY_DSN) {\n  Sentry.init({\n    dsn: process.env.REACT_APP_SENTRY_DSN,\n    integrations: [new Integrations.BrowserTracing()],\n    release: `${process.env.REACT_APP_NAME} @ v${process.env.REACT_APP_VERSION}`,\n    environment: process.env.REACT_APP_SENTRY_ENV || 'unknown',\n\n    // We recommend adjusting this value in production, or using tracesSampler\n    // for finer control\n    tracesSampleRate: 1.0,\n  });\n}\n\nReactDOM.render(\n  <>\n    <StartApp />\n  </>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif (process.env.NODE_ENV !== 'production') {\n  serviceWorker.unregister();\n} else {\n  serviceWorker.register(swConfig);\n}\n"],"sourceRoot":""}