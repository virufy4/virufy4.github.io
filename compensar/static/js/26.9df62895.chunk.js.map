{"version":3,"sources":["containers/SubmitSteps/Questionary/Step2/Step2.tsx","containers/SubmitSteps/Questionary/Step2/index.ts"],"names":["schema","Yup","currentSymptoms","required","defined","React","memo","previousStep","nextStep","storeKey","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","history","useHistory","t","useTranslation","useStateMachine","updateAction","state","action","useState","activeStep","setActiveStep","useForm","mode","defaultValues","resolver","yupResolver","control","handleSubmit","formState","errors","isValid","handleDoBack","useCallback","push","goBack","useEffect","scrollToTop","onSubmit","values","a","currentStep","current","totalSteps","total","progressBar","extraSpace","first","i18nKey","name","defaultValue","selected","other","render","onChange","value","isCheckbox","v","items","label","excludableValues","leftLabel","leftDisabled","leftHandler","invert"],"mappings":"kVA+BMA,EAASC,SAAW,CACxBC,gBAAiBD,WAAaE,aAC7BC,UAkKYC,cAAMC,MA9JP,SAAC,GAKU,IAJvBC,EAIsB,EAJtBA,aACAC,EAGsB,EAHtBA,SACAC,EAEsB,EAFtBA,SACAC,EACsB,EADtBA,SAGQC,EAAWC,IAAU,CAC3BC,OAAQC,UAAYA,SAASC,eAAe,oBADtCJ,OAFc,EAKqBK,cAAnCC,EALc,EAKdA,YAAaC,EALC,EAKDA,SAAUC,EALT,EAKSA,QACzBC,EAAUC,cACRC,EAAMC,cAAND,EAPc,EAQIE,YAAgBC,YAAahB,IAA/CiB,EARc,EAQdA,MAAOC,EARO,EAQPA,OARO,EAWctB,IAAMuB,UAAS,GAX7B,mBAWfC,EAXe,KAWHC,EAXG,OAelBC,YAAQ,CACVC,KAAM,WACNC,cAAa,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAQjB,GACvByB,SAAUC,YAAYnC,KAJtBoC,EAdoB,EAcpBA,QAASC,EAdW,EAcXA,aAAcC,EAdH,EAcGA,UAMjBC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QAEVC,EAAepC,IAAMqC,aAAY,WACrCZ,GAAc,GACVvB,EACFa,EAAQuB,KAAKpC,GAEba,EAAQwB,WAET,CAACxB,EAASb,IAEbsC,qBAAU,WACRC,cACA5B,EAAS,GAAD,OAAII,EAAE,iCACdH,EAAQ,WACRF,GAAY,kBAAMwB,OACjB,CAACA,EAAcxB,EAAaC,EAAUC,EAAST,EAAUY,IAG5D,IAAMyB,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACXD,IACFrB,EAAOqB,GACHxC,IACFsB,GAAc,GACdV,EAAQuB,KAAKnC,KALF,2CAAH,sDAUd,OACE,kBAAC,gBAAD,KACE,kBAAC,IAAD,CACE0C,YAAW,OAAExC,QAAF,IAAEA,OAAF,EAAEA,EAAUyC,QACvBC,WAAU,OAAE1C,QAAF,IAAEA,OAAF,EAAEA,EAAU2C,MACtBC,aAAW,IAEb,kBAAC,eAAD,CAAcC,YAAU,EAACC,OAAK,GAC5B,kBAAC,IAAD,CAAOC,QAAQ,iCACb,uFAEF,kBAAC,eAAD,KAAenC,EAAE,8BAEnB,kBAAC,IAAD,CACEc,QAASA,EACTsB,KAAK,kBACLC,aAAc,CAAEC,SAAU,GAAIC,MAAO,IACrCC,OAAQ,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACN,kBAAC,IAAD,CACEC,YAAU,EACVD,MAAOA,EACPD,SAAU,SAAAG,GAAC,OAAIH,EAASG,IACxBC,MAAO,CACL,CACEH,MAAO,OACPI,MAAO9C,EAAE,sCAEX,CACE0C,MAAO,YACPI,MAAO9C,EAAE,2CAEX,CACE0C,MAAO,WACPI,MAAO9C,EAAE,0CAEX,CACE0C,MAAO,WACPI,MAAO9C,EAAE,0CAEX,CACE0C,MAAO,sBACPI,MAAO9C,EAAE,qDAEX,CACE0C,MAAO,YACPI,MAAO9C,EAAE,2CAEX,CACE0C,MAAO,sBACPI,MAAO9C,EAAE,kDAEX,CACE0C,MAAO,kBACPI,MAAO9C,EAAE,4CAEX,CACE0C,MAAO,YACPI,MAAO9C,EAAE,2CAEX,CACE0C,MAAO,kBACPI,MAAO9C,EAAE,iDAEX,CACE0C,MAAO,aACPI,MAAO9C,EAAE,4CAEX,CACE0C,MAAO,iBACPI,MAAO9C,EAAE,gDAEX,CACE0C,MAAO,sBACPI,MAAO9C,EAAE,qDAEX,CACE0C,MAAO,WACPI,MAAO9C,EAAE,0CAEX,CACE0C,MAAO,QACPI,MAAO9C,EAAE,wCAGb+C,iBAAkB,CAAC,aAKzB,2BAAG,kBAAC,IAAD,CAAc9B,OAAQA,EAAQmB,KAAK,UACrC7B,GACC,kBAAClB,EAAD,KACE,kBAAC,IAAD,CACE2D,UAAWhD,EAAE,0BACbiD,cAAe/B,EACfgC,YAAanC,EAAaU,GAC1B0B,QAAM,U,iCC3LlB","file":"static/js/26.9df62895.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Components\nimport OptionList from 'components/OptionList';\nimport WizardButtons from 'components/WizardButtons';\nimport ProgressIndicator from 'components/ProgressIndicator';\n\n// Styles\nimport {\n  QuestionText, MainContainer, QuestionNote,\n} from '../style';\n\nconst schema = Yup.object({\n  currentSymptoms: Yup.object().required(),\n}).defined();\n\ntype Step2Type = Yup.InferType<typeof schema>;\n\nconst Step2 = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n  });\n  const { errors, isValid } = formState;\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(`${t('questionary:headerQuestions')}`);\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, metadata, t]);\n\n  // Handlers\n  const onSubmit = async (values: Step2Type) => {\n    if (values) {\n      action(values);\n      if (nextStep) {\n        setActiveStep(false);\n        history.push(nextStep);\n      }\n    }\n  };\n\n  return (\n    <MainContainer>\n      <ProgressIndicator\n        currentStep={metadata?.current}\n        totalSteps={metadata?.total}\n        progressBar\n      />\n      <QuestionText extraSpace first>\n        <Trans i18nKey=\"questionary:symptoms.question\">\n          <strong>Which of the below symptoms do you currently have?</strong>\n        </Trans>\n        <QuestionNote>{t('questionary:allThatApply')}</QuestionNote>\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"currentSymptoms\"\n        defaultValue={{ selected: [], other: '' }}\n        render={({ onChange, value }) => (\n          <OptionList\n            isCheckbox\n            value={value}\n            onChange={v => onChange(v)}\n            items={[\n              {\n                value: 'none',\n                label: t('questionary:symptoms.options.none'),\n              },\n              {\n                value: 'bodyAches',\n                label: t('questionary:symptoms.options.bodyAches'),\n              },\n              {\n                value: 'dryCough',\n                label: t('questionary:symptoms.options.dryCough'),\n              },\n              {\n                value: 'wetCough',\n                label: t('questionary:symptoms.options.wetCough'),\n              },\n              {\n                value: 'feverChillsSweating',\n                label: t('questionary:symptoms.options.feverChillsSweating'),\n              },\n              {\n                value: 'headaches',\n                label: t('questionary:symptoms.options.headaches'),\n              },\n              {\n                value: 'lossTasteAndOrSmell',\n                label: t('questionary:symptoms.options.lossTasteOrSmell'),\n              },\n              {\n                value: 'newOrWorseCough',\n                label: t('questionary:symptoms.options.worseCough'),\n              },\n              {\n                value: 'runnyNose',\n                label: t('questionary:symptoms.options.runnyNose'),\n              },\n              {\n                value: 'breathShortness',\n                label: t('questionary:symptoms.options.breathShortness'),\n              },\n              {\n                value: 'soreThroat',\n                label: t('questionary:symptoms.options.soreThroat'),\n              },\n              {\n                value: 'chestTightness',\n                label: t('questionary:symptoms.options.chestTightness'),\n              },\n              {\n                value: 'vomitingAndDiarrhea',\n                label: t('questionary:symptoms.options.vomitingAndDiarrhea'),\n              },\n              {\n                value: 'weakness',\n                label: t('questionary:symptoms.options.weakness'),\n              },\n              {\n                value: 'other',\n                label: t('questionary:symptoms.options.other'),\n              },\n            ]}\n            excludableValues={['none']}\n          />\n        )}\n      />\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          <WizardButtons\n            leftLabel={t('questionary:nextButton')}\n            leftDisabled={!isValid}\n            leftHandler={handleSubmit(onSubmit)}\n            invert\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step2);\n","export { default } from './Step2';\n"],"sourceRoot":""}