{"version":3,"sources":["components/Recaptcha/style.ts","components/Recaptcha/Recaptcha.tsx","containers/SubmitSteps/Questionary/Step4b/Step4b.tsx","containers/SubmitSteps/Questionary/Step4b/index.ts"],"names":["RecaptchaContainer","styled","div","Recaptcha","onChange","setRecaptchaAvailable","i18n","useTranslation","sitekey","process","onErrored","Sentry","hl","language","schema","Yup","symptomsStartedDate","when","is","then","required","else","test","value","result","match","defined","React","memo","previousStep","nextStep","storeKey","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","history","useHistory","t","useStateMachine","updateAction","state","action","country","getCountry","useState","activeStep","setActiveStep","submitError","setSubmitError","captchaValue","setCaptchaValue","recaptchaAvailable","isShortQuestionary","useForm","mode","defaultValues","resolver","yupResolver","context","control","handleSubmit","formState","errors","isSubmitting","isValid","useEffect","renderCaptcha","useMemo","handleDoBack","useCallback","push","goBack","onSubmit","values","a","scrollToTop","extraSpace","first","name","defaultValue","render","singleSelection","selected","v","items","label","type","placeholder","autoComplete","leftLabel","leftHandler","leftDisabled","invert"],"mappings":"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","file":"static/js/36.64b487c7.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const RecaptchaContainer = styled.div`\n  margin: 20px 0;\n  \n  div {\n    margin: auto;\n  }\n`;\n","import React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useTranslation } from 'react-i18next';\n\n// Sentry\nimport * as Sentry from '@sentry/react';\n\n// Style\nimport { RecaptchaContainer } from './style';\n\nconst recaptchaKey = process.env.REACT_APP_RECAPTCHA_KEY || '';\n\ninterface RecaptchaProps {\n  onChange(token: string | null): void;\n  setRecaptchaAvailable(state: boolean): void;\n}\n\nconst Recaptcha = ({ onChange, setRecaptchaAvailable }: RecaptchaProps) => {\n  const { i18n } = useTranslation();\n\n  if (!recaptchaKey) return null;\n\n  return (\n    <RecaptchaContainer>\n      <ReCAPTCHA\n        sitekey={process.env.REACT_APP_RECAPTCHA_KEY || ''}\n        onChange={onChange}\n        onErrored={() => { setRecaptchaAvailable(false); Sentry.captureException('Error on ReCAPTCHA'); }}\n        hl={i18n.language}\n      />\n    </RecaptchaContainer>\n  );\n};\n\nexport default Recaptcha;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { getCountry } from 'helper/stepsDefinitions';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport Recaptcha from 'components/Recaptcha';\n\n// Styles\nimport OptionList from 'components/OptionList';\nimport {\n  QuestionText, MainContainer, QuestionInput, TempBeforeSubmitError,\n} from '../style';\n\nconst schema = Yup.object({\n  symptomsStartedDate: Yup.string().when('$country', {\n    is: 'Japan',\n    then: Yup.string().required(),\n    else: Yup.string().required().test('symptomsStartedDate-invalid', '', value => {\n      let result = true;\n      if (value && !value.match(/^[0-9]+$/)) {\n        result = false;\n      }\n      return result;\n    }),\n  }),\n}).defined();\n\ntype Step4bType = Yup.InferType<typeof schema>;\n\nconst Step4b = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n  const country = getCountry();\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [captchaValue, setCaptchaValue] = React.useState<string | null>(null);\n  const [recaptchaAvailable, setRecaptchaAvailable] = React.useState(true);\n  const isShortQuestionary = metadata?.isShortQuestionary;\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n    context: {\n      country,\n    },\n  });\n  const { errors, isSubmitting, isValid } = formState;\n\n  useEffect(() => {\n    if (!captchaValue) {\n      setSubmitError(null);\n    }\n  }, [captchaValue]);\n\n  const renderCaptcha = React.useMemo(() => {\n    if (isShortQuestionary && (country !== 'Colombia')) {\n      if (submitError) {\n        return (\n          <>\n            <Recaptcha onChange={setCaptchaValue} setRecaptchaAvailable={setRecaptchaAvailable} />\n            <TempBeforeSubmitError>\n              {submitError}\n            </TempBeforeSubmitError>\n          </>\n        );\n      }\n      return <Recaptcha onChange={setCaptchaValue} setRecaptchaAvailable={setRecaptchaAvailable} />;\n    }\n    return null;\n  }, [country, isShortQuestionary, submitError]);\n\n  // Handlers\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  const onSubmit = async (values: Step4bType) => {\n    if (values) {\n      action(values);\n      if (nextStep) {\n        setActiveStep(false);\n        history.push(nextStep);\n      }\n    }\n  };\n  const onSubmitPatientShortQuestionnaire = () => {\n    if (nextStep) {\n      setActiveStep(false);\n      history.push(nextStep);\n    }\n  };\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('questionary:symptomsDateTitle'));\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, t]);\n\n  const getLeftLabel = () => {\n    if (isShortQuestionary) {\n      if (isSubmitting) {\n        return t('questionary:submitting');\n      }\n      return t('beforeSubmit:submitButton');\n    }\n    return t('questionary:nextButton');\n  };\n\n  return (\n    <MainContainer>\n      <QuestionText extraSpace first>\n        {t('questionary:symptomsDate')}\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"symptomsStartedDate\"\n        defaultValue=\"\"\n        render={({ onChange, value, name }) => (\n          country === 'Japan' ? (\n            <OptionList\n              singleSelection\n              value={{ selected: value ? [value] : [] }}\n              onChange={v => onChange(v.selected[0])}\n              items={[\n                {\n                  value: 'none',\n                  label: t('questionary:options.none'),\n                },\n                {\n                  value: 'today',\n                  label: t('questionary:options.today'),\n                },\n                {\n                  value: 'days',\n                  label: t('questionary:options.days'),\n                },\n                {\n                  value: 'week',\n                  label: t('questionary:options.week'),\n                },\n                {\n                  value: 'overWeek',\n                  label: t('questionary:options.overWeek'),\n                },\n              ]}\n            />\n          ) : (\n            <QuestionInput\n              name={name}\n              value={value}\n              onChange={onChange}\n              type=\"text\"\n              placeholder={t('questionary:enterDays')}\n              autoComplete=\"Off\"\n            />\n          )\n        )}\n      />\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          {renderCaptcha}\n          <WizardButtons\n            leftLabel={getLeftLabel()}\n            leftHandler={isShortQuestionary ? handleSubmit(onSubmitPatientShortQuestionnaire) : handleSubmit(onSubmit)}\n            leftDisabled={(isShortQuestionary && (country !== 'Colombia')) ? (isSubmitting || (recaptchaAvailable && !captchaValue)) : !isValid}\n            invert\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step4b);\n","export { default } from './Step4b';\n"],"sourceRoot":""}