{"version":3,"sources":["components/Layout/Layout.ts","components/Wizard/style.ts","components/Wizard/Wizard.tsx","containers/SubmitSteps/SubmitSteps.tsx"],"names":["Layout","styled","div","props","theme","breakpoints","tablet","WizardContainer","StepContainer","WizardNavControlPortal","AsyncLoad","loadable","container","fallback","React","memo","steps","children","match","useRouteMatch","location","useLocation","useState","loadSteps","setLoadSteps","pathList","useMemo","base","url","replace","map","step","path","useEffect","timing","duration","key","componentPath","exact","Array","isArray","s","render","id","setStorageType","window","localStorage","StoreKey","createStore","recordYourCough","recordingFile","uploadedFile","recordYourBreath","recordYourSpeech","name","localstoragePrefix","SubmitSteps","state","useStateMachine","history","useHistory","problemRoute","inputState","out","welcome","patientId","toTest","push","file","route","itemWithProblem","find","toTestItem","undefined","size","checkFileConsistencyProblem","country","getCountry","getPatientId","stepsDefinition"],"mappings":"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","file":"static/js/63.9eb57126.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Layout = styled.div`\n  padding-bottom: 24px; \n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    margin: auto;\n\n    max-width: 768px;\n    width: 100%;\n  }\n`;\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const WizardContainer = styled.div`\n  display: flex;\n  flex-direction:column;\n\n  height:100%;\n`;\n\nexport const StepContainer = styled.div`\n  height: 100%;\n`;\n\nexport const WizardNavControlPortal = styled.div`\n  margin-bottom: 24px;\n`;\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport SlideRoutes from 'react-slide-routes';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport { StateMachineProvider } from 'little-state-machine';\nimport Layout from 'components/Layout/';\nimport { WizardContainer, StepContainer, WizardNavControlPortal } from './style';\n\ninterface WizardProps {\n  steps: Wizard.Step[];\n}\n\ninterface AsyncLoadProps extends Partial<Wizard.StepProps> {\n  container: string;\n}\n\nconst AsyncLoad = loadable(({ container }: AsyncLoadProps) => import(`containers/${container}`), {\n  fallback: <div>Loading ...</div>,\n});\n\nfunction clearPath(path: string) {\n  return path.replace(/\\/$/, '');\n}\n\nconst Wizard = ({ steps, children }: React.PropsWithChildren<WizardProps>) => {\n  const match = useRouteMatch();\n  const location = useLocation();\n  const [loadSteps, setLoadSteps] = React.useState(false);\n\n  const pathList = React.useMemo(() => {\n    const base = clearPath(match.url);\n    return steps.map(step => base + step.path);\n  }, [match.url, steps]);\n\n  React.useEffect(() => {\n    setLoadSteps(true);\n  }, []);\n\n  return (\n    <StateMachineProvider>\n      <WizardContainer>\n        <StepContainer>\n          {loadSteps && (\n            <SlideRoutes location={location} timing=\"ease-in-out\" duration={500} pathList={pathList}>\n              {steps.map(step => (\n                <Route\n                  key={step.componentPath}\n                  exact\n                  path={Array.isArray(step.path)\n                    ? step.path.map(s => (match.path + s))\n                    : match.path + step.path}\n                  render={() => (\n                    <Layout>\n                      <AsyncLoad\n                        container={step.componentPath}\n                        {...step.props}\n                      />\n                    </Layout>\n\n                  )}\n                />\n              ))}\n            </SlideRoutes>\n          )}\n        </StepContainer>\n        <WizardNavControlPortal id=\"wizard-buttons\">\n          {children}\n        </WizardNavControlPortal>\n      </WizardContainer>\n    </StateMachineProvider>\n  );\n};\n\nexport default React.memo(Wizard);\n","import React from 'react';\nimport { createStore, setStorageType, useStateMachine } from 'little-state-machine';\nimport { useHistory } from 'react-router-dom';\nimport { localstoragePrefix } from 'helper/basePathHelper';\n\n// Wizard\nimport Wizard from 'components/Wizard';\n\n// Local\nimport stepsDefinition, { getCountry, getPatientId } from 'helper/stepsDefinitions';\n\nsetStorageType(window.localStorage);\n\nconst StoreKey = 'submit-steps';\n\ncreateStore({\n  [StoreKey]: {\n    recordYourCough: {\n      recordingFile: null,\n      uploadedFile: null,\n    },\n    recordYourBreath: {\n      recordingFile: null,\n      uploadedFile: null,\n    },\n    recordYourSpeech: {\n      recordingFile: null,\n      uploadedFile: null,\n    },\n  },\n}, {\n  name: `${localstoragePrefix}_VirufyWizard`,\n});\n\nconst SubmitSteps = () => {\n  // Hooks\n  const { state } = useStateMachine();\n  const history = useHistory();\n\n  // Effects\n  React.useEffect(() => {\n    const checkFileProblem = (file: File) => {\n      if (file && file.size === undefined) {\n        return true;\n      }\n      return false;\n    };\n\n    const checkFileConsistencyProblem = (inputState: Record<string, any>) => {\n      let out = null;\n      if (!inputState.welcome?.patientId && inputState[StoreKey]) {\n        const { recordYourCough, recordYourSpeech, recordYourBreath } = inputState[StoreKey];\n        const toTest = [];\n\n        if (recordYourCough) {\n          const { recordingFile, uploadedFile } = recordYourCough;\n          if (recordingFile) {\n            toTest.push({ file: recordingFile, route: '/step-record/cough' });\n          }\n          if (uploadedFile) {\n            toTest.push({ file: uploadedFile, route: '/step-manual-upload/cough' });\n          }\n        }\n        if (recordYourBreath) {\n          const { recordingFile, uploadedFile } = recordYourBreath;\n          if (recordingFile) {\n            toTest.push({ file: recordingFile, route: '/step-record/breath' });\n          }\n          if (uploadedFile) {\n            toTest.push({ file: uploadedFile, route: '/step-manual-upload/breath' });\n          }\n        }\n\n        if (recordYourSpeech) {\n          const { recordingFile, uploadedFile } = recordYourCough;\n          if (recordingFile) {\n            toTest.push({ file: recordingFile, route: '/step-record/speech' });\n          }\n          if (uploadedFile) {\n            toTest.push({ file: uploadedFile, route: '/step-manual-upload/speech' });\n          }\n        }\n\n        const itemWithProblem = toTest.find(toTestItem => checkFileProblem(toTestItem.file));\n        if (itemWithProblem) {\n          out = itemWithProblem.route;\n        }\n      }\n      return out;\n    };\n\n    const problemRoute = checkFileConsistencyProblem(state);\n    if (problemRoute) {\n      history.push(`/${StoreKey}${problemRoute}`);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return null;\n};\n\nconst WrapperSubmitSteps = () => {\n  const country = getCountry();\n  const patientId = getPatientId();\n  const steps = React.useMemo(() => stepsDefinition(StoreKey, country, patientId), [country, patientId]);\n  return (\n    <Wizard\n      steps={steps}\n    >\n      <SubmitSteps />\n    </Wizard>\n  );\n};\n\nexport default React.memo(WrapperSubmitSteps);\n"],"sourceRoot":""}