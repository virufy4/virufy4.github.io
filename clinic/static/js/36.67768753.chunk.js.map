{"version":3,"sources":["hooks/useAxios.ts","helper/deviceHelper.ts","components/Recaptcha/style.ts","components/Recaptcha/Recaptcha.tsx","helper/patientHelper.ts","containers/SubmitSteps/Questionary/Step4b/Step4b.tsx","containers/SubmitSteps/Questionary/Step4b/index.ts"],"names":["client","axios","create","baseURL","process","useAxios","deviceDetect","isBrowser","rdd","isMobile","isSmartTv","isSmartTV","isConsole","isTablet","isWearable","RecaptchaContainer","styled","div","Recaptcha","onChange","setRecaptchaAvailable","i18n","useTranslation","sitekey","onErrored","Sentry","hl","language","doSubmitPatientQuestionnaire","a","setSubmitError","state","captchaValue","nextStep","setActiveStep","history","welcome","country","region","patientId","hospitalId","vaccine","ageGroup","gender","ethnicity","biologicalSex","smokeLastSixMonths","currentSymptoms","symptomsStartedDate","currentRespiratoryCondition","currentMedicalCondition","body","FormData","append","JSON","stringify","window","sourceCampaign","genderSelected","other","selected","length","join","axiosClient","post","headers","response","data","submissionId","push","console","log","doSubmitPatientShortQuestionnaire","doSubmitPatientAudioCollection","otherSteps","isShortAudioCollection","recordYourCough","recordYourBreath","recordYourSpeech","coughFile","recordingFile","uploadedFile","name","breathFile","allowSpeechIn","includes","voiceFile","isShortAudioStep","doSubmitPatientTestResults","patientAntigenTestResult","patientPcrTestResult","schema","Yup","when","is","then","required","else","test","value","result","match","defined","React","memo","previousStep","storeKey","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","useHistory","t","useStateMachine","updateAction","action","getCountry","useState","activeStep","submitError","setCaptchaValue","recaptchaAvailable","isShortQuestionary","useForm","mode","defaultValues","resolver","yupResolver","context","control","handleSubmit","formState","errors","isSubmitting","isValid","useEffect","renderCaptcha","useMemo","handleDoBack","useCallback","goBack","onSubmit","values","onSubmitPatientShortQuestionnaire","s","scrollToTop","extraSpace","first","defaultValue","render","singleSelection","v","items","label","type","placeholder","autoComplete","leftLabel","leftHandler","leftDisabled","invert"],"mappings":"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","file":"static/js/36.67768753.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const client = axios.create({\n  baseURL: process.env.REACT_APP_API,\n});\n\nexport default function useAxios() {\n  return client;\n}\n","import {\n  deviceDetect as rdd, isBrowser, isConsole, isMobile, isSmartTV, isTablet, isWearable,\n} from 'react-device-detect';\n\nconst deviceDetect = () => ({\n  isBrowser: isBrowser ? rdd() : null,\n  isMobile: isMobile ? rdd() : null,\n  isSmartTv: isSmartTV ? rdd() : null,\n  isConsole: isConsole ? rdd() : null,\n  isTablet: isTablet ? rdd() : null,\n  isWearable: isWearable ? rdd() : null,\n});\n\nexport default deviceDetect;\n","import styled from 'styled-components';\n\nexport const RecaptchaContainer = styled.div`\n  margin: 20px 0;\n  \n  div {\n    margin: auto;\n  }\n`;\n","import React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useTranslation } from 'react-i18next';\n\n// Sentry\nimport * as Sentry from '@sentry/react';\n\n// Style\nimport { RecaptchaContainer } from './style';\n\nconst recaptchaKey = process.env.REACT_APP_RECAPTCHA_KEY || '';\n\ninterface RecaptchaProps {\n  onChange(token: string | null): void;\n  setRecaptchaAvailable(state: boolean): void;\n}\n\nconst Recaptcha = ({ onChange, setRecaptchaAvailable }: RecaptchaProps) => {\n  const { i18n } = useTranslation();\n\n  if (!recaptchaKey) return null;\n\n  return (\n    <RecaptchaContainer>\n      <ReCAPTCHA\n        sitekey={process.env.REACT_APP_RECAPTCHA_KEY || ''}\n        onChange={onChange}\n        onErrored={() => { setRecaptchaAvailable(false); Sentry.captureException('Error on ReCAPTCHA'); }}\n        hl={i18n.language}\n      />\n    </RecaptchaContainer>\n  );\n};\n\nexport default Recaptcha;\n","import * as H from 'history';\n\n// Hooks\nimport { client as axiosClient } from 'hooks/useAxios';\n\n// Helpers\nimport { allowSpeechIn } from 'helper/stepsDefinitions';\nimport deviceDetect from 'helper/deviceHelper';\n\ninterface DoSubmitProps {\n  setSubmitError(err: string | null): void;\n  state: CommonJSON;\n  captchaValue: string | null;\n  action(payload: Object): void;\n  nextStep?: string;\n  otherSteps?: { isShortAudioStep?: string };\n  setActiveStep(status: boolean): void;\n  history: H.History;\n  isShortAudioCollection?: string;\n}\n\nexport async function doSubmitPatientQuestionnaire({\n  setSubmitError,\n  state,\n  captchaValue,\n  nextStep,\n  setActiveStep,\n  history,\n}: DoSubmitProps) {\n  try {\n    setSubmitError(null);\n    const {\n      language,\n      country,\n      region,\n      patientId,\n      hospitalId,\n    } = state.welcome;\n\n    const {\n      vaccine,\n      ageGroup,\n      gender,\n      ethnicity,\n      biologicalSex,\n\n      smokeLastSixMonths,\n      currentSymptoms,\n      symptomsStartedDate,\n      currentRespiratoryCondition,\n      currentMedicalCondition,\n    } = state['submit-steps'];\n\n    const body = new FormData();\n\n    body.append('device', JSON.stringify(deviceDetect()));\n    body.append('language', language);\n    body.append('country', country);\n    if (region) {\n      body.append('region', region);\n    }\n\n    if (hospitalId) {\n      body.append('hospitalId', hospitalId);\n    }\n\n    if (window.sourceCampaign) {\n      body.append('source', window.sourceCampaign);\n    }\n\n    if (vaccine) {\n      body.append('vaccine', vaccine);\n    }\n\n    if (ageGroup) {\n      body.append('ageGroup', ageGroup);\n    }\n\n    const genderSelected = gender.other || gender.selected[0];\n\n    if (genderSelected) {\n      body.append('gender', genderSelected);\n    }\n\n    if (ethnicity) {\n      body.append('ethnicity', ethnicity);\n    }\n\n    if (biologicalSex) {\n      body.append('biologicalSex', biologicalSex);\n    }\n\n    if (smokeLastSixMonths) {\n      body.append('smokeLastSixMonths', smokeLastSixMonths);\n    }\n\n    if (currentSymptoms?.selected?.length > 0) {\n      body.append('currentSymptoms', currentSymptoms.selected.join(','));\n    }\n\n    if (symptomsStartedDate) {\n      body.append('symptomsStartedDate', symptomsStartedDate);\n    }\n\n    if (currentRespiratoryCondition?.selected?.length > 0) {\n      body.append('currentRespiratoryCondition', currentRespiratoryCondition.selected.join(','));\n    }\n\n    if (currentMedicalCondition?.selected?.length > 0) {\n      body.append('currentMedicalCondition', currentMedicalCondition.selected.join(','));\n    }\n\n    if (currentSymptoms?.other) {\n      body.append('otherSymptoms', currentSymptoms?.other);\n    }\n\n    if (currentRespiratoryCondition?.other) {\n      body.append('otherRespiratoryConditions', currentRespiratoryCondition?.other);\n    }\n\n    if (currentMedicalCondition?.other) {\n      body.append('otherMedicalConditions', currentMedicalCondition?.other);\n    }\n\n    if (captchaValue) {\n      body.append('captchaValue', captchaValue);\n    }\n\n    const response = await axiosClient.post(`/patient/${patientId}/questionary`, body, {\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=Questionary',\n      },\n    });\n\n    if (nextStep && response.data?.submissionId) {\n      setActiveStep(false);\n      history.push(nextStep, { submissionId: response.data?.submissionId, patientId });\n    }\n  } catch (error) {\n    console.log(error);\n    setSubmitError('beforeSubmit:submitError');\n  }\n}\n\nexport async function doSubmitPatientShortQuestionnaire({\n  setSubmitError,\n  state,\n  captchaValue,\n  nextStep,\n  setActiveStep,\n  history,\n}: DoSubmitProps) {\n  try {\n    setSubmitError(null);\n    const {\n      language,\n      country,\n      region,\n      patientId,\n      hospitalId,\n    } = state.welcome;\n\n    const {\n      ageGroup,\n      gender,\n      currentSymptoms,\n      symptomsStartedDate,\n    } = state['submit-steps'];\n\n    const body = new FormData();\n\n    body.append('device', JSON.stringify(deviceDetect()));\n    body.append('language', language);\n    body.append('country', country);\n    if (region) {\n      body.append('region', region);\n    }\n\n    if (hospitalId) {\n      body.append('hospitalId', hospitalId);\n    }\n\n    if (window.sourceCampaign) {\n      body.append('source', window.sourceCampaign);\n    }\n\n    if (ageGroup) {\n      body.append('ageGroup', ageGroup);\n    }\n\n    const genderSelected = gender.other || gender.selected[0];\n\n    if (genderSelected) {\n      body.append('gender', genderSelected);\n    }\n\n    if (currentSymptoms?.selected?.length > 0) {\n      body.append('currentSymptoms', currentSymptoms.selected.join(','));\n    }\n\n    if (symptomsStartedDate) {\n      body.append('symptomsStartedDate', symptomsStartedDate);\n    }\n\n    if (captchaValue) {\n      body.append('captchaValue', captchaValue);\n    }\n\n    const response = await axiosClient.post(`/patient/${patientId}/shortQuestionary`, body, {\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=ShortQuestionary',\n      },\n    });\n\n    if (nextStep && response.data?.submissionId) {\n      setActiveStep(false);\n      history.push(nextStep, { submissionId: response.data?.submissionId, patientId });\n    }\n  } catch (error) {\n    console.log(error);\n    setSubmitError('beforeSubmit:submitError');\n  }\n}\n\nexport async function doSubmitPatientAudioCollection({\n  setSubmitError,\n  state,\n  captchaValue,\n  nextStep,\n  otherSteps,\n  setActiveStep,\n  history,\n  isShortAudioCollection,\n}: DoSubmitProps) {\n  try {\n    setSubmitError(null);\n    const {\n      language,\n      country,\n      region,\n      patientId,\n      hospitalId,\n    } = state.welcome;\n\n    const {\n      recordYourCough,\n      recordYourBreath,\n      recordYourSpeech,\n    } = state['submit-steps'];\n\n    const body = new FormData();\n\n    body.append('device', JSON.stringify(deviceDetect()));\n    body.append('language', language);\n    body.append('country', country);\n    if (region) {\n      body.append('region', region);\n    }\n\n    if (hospitalId) {\n      body.append('hospitalId', hospitalId);\n    }\n\n    if (window.sourceCampaign) {\n      body.append('source', window.sourceCampaign);\n    }\n\n    if (recordYourCough) {\n      const coughFile = recordYourCough.recordingFile || recordYourCough.uploadedFile;\n      body.append('cough', coughFile, coughFile.name || 'filename.wav');\n    }\n\n    if (recordYourBreath) {\n      const breathFile = recordYourBreath.recordingFile || recordYourBreath.uploadedFile;\n      body.append('breath', breathFile, breathFile.name || 'filename_breath.wav');\n    }\n    if (allowSpeechIn.includes(country) && recordYourSpeech) {\n      const voiceFile = recordYourSpeech.recordingFile || recordYourSpeech.uploadedFile;\n      body.append('voice', voiceFile, voiceFile.name || 'filename_voice.wav');\n    }\n\n    if (captchaValue) {\n      body.append('captchaValue', captchaValue);\n    }\n\n    body.append('shortAudioCollection', isShortAudioCollection || 'false');\n\n    const response = await axiosClient.post(`/patient/${patientId}/audioCollection`, body, {\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=AudioCollection',\n      },\n    });\n\n    if (isShortAudioCollection && otherSteps?.isShortAudioStep) {\n      setActiveStep(false);\n      history.push(otherSteps?.isShortAudioStep, { submissionId: response.data?.submissionId, patientId });\n    } else if (nextStep && response.data?.submissionId) {\n      setActiveStep(false);\n      history.push(nextStep, { submissionId: response.data?.submissionId, patientId });\n    }\n  } catch (error) {\n    console.log(error);\n    setSubmitError('beforeSubmit:submitError');\n  }\n}\n\nexport async function doSubmitPatientTestResults({\n  setSubmitError,\n  state,\n  captchaValue,\n  nextStep,\n  setActiveStep,\n  history,\n}: DoSubmitProps) {\n  try {\n    setSubmitError(null);\n    const {\n      language,\n      country,\n      region,\n      patientId,\n      hospitalId,\n\n    } = state.welcome;\n\n    const {\n      patientAntigenTestResult,\n      patientPcrTestResult,\n    } = state['submit-steps'];\n\n    const body = new FormData();\n\n    body.append('device', JSON.stringify(deviceDetect()));\n    body.append('language', language);\n    body.append('country', country);\n    if (region) {\n      body.append('region', region);\n    }\n\n    if (hospitalId) {\n      body.append('hospitalId', hospitalId);\n    }\n\n    if (window.sourceCampaign) {\n      body.append('source', window.sourceCampaign);\n    }\n\n    if (patientAntigenTestResult) {\n      body.append('patientAntigenTestResult', patientAntigenTestResult);\n    }\n\n    if (patientPcrTestResult) {\n      body.append('patientPcrTestResult', patientPcrTestResult);\n    }\n\n    if (captchaValue) {\n      body.append('captchaValue', captchaValue);\n    }\n\n    const response = await axiosClient.post(`/patient/${patientId}/testResult`, body, {\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=testResult',\n      },\n    });\n\n    if (nextStep && response.data?.submissionId) {\n      setActiveStep(false);\n      history.push(nextStep, { submissionId: response.data?.submissionId, patientId });\n    }\n  } catch (error) {\n    console.log(error);\n    setSubmitError('beforeSubmit:submitError');\n  }\n}\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { doSubmitPatientShortQuestionnaire } from 'helper/patientHelper';\nimport { getCountry } from 'helper/stepsDefinitions';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport Recaptcha from 'components/Recaptcha';\n\n// Styles\nimport OptionList from 'components/OptionList';\nimport {\n  QuestionText, MainContainer, QuestionInput, TempBeforeSubmitError,\n} from '../style';\n\nconst schema = Yup.object({\n  symptomsStartedDate: Yup.string().when('$country', {\n    is: 'Japan',\n    then: Yup.string().required(),\n    else: Yup.string().required().test('symptomsStartedDate-invalid', '', value => {\n      let result = true;\n      if (value && !value.match(/^[0-9]+$/)) {\n        result = false;\n      }\n      return result;\n    }),\n  }),\n}).defined();\n\ntype Step4bType = Yup.InferType<typeof schema>;\n\nconst Step4b = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n  const country = getCountry();\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [captchaValue, setCaptchaValue] = React.useState<string | null>(null);\n  const [recaptchaAvailable, setRecaptchaAvailable] = React.useState(true);\n  const isShortQuestionary = metadata?.isShortQuestionary;\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n    context: {\n      country,\n    },\n  });\n  const { errors, isSubmitting, isValid } = formState;\n\n  useEffect(() => {\n    if (!captchaValue) {\n      setSubmitError(null);\n    }\n  }, [captchaValue]);\n\n  const renderCaptcha = React.useMemo(() => {\n    if (isShortQuestionary && (country !== 'Colombia')) {\n      if (submitError) {\n        return (\n          <>\n            <Recaptcha onChange={setCaptchaValue} setRecaptchaAvailable={setRecaptchaAvailable} />\n            <TempBeforeSubmitError>\n              {submitError}\n            </TempBeforeSubmitError>\n          </>\n        );\n      }\n      return <Recaptcha onChange={setCaptchaValue} setRecaptchaAvailable={setRecaptchaAvailable} />;\n    }\n    return null;\n  }, [country, isShortQuestionary, submitError]);\n\n  // Handlers\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  const onSubmit = async (values: Step4bType) => {\n    if (values) {\n      action(values);\n      if (nextStep) {\n        setActiveStep(false);\n        history.push(nextStep);\n      }\n    }\n  };\n  const onSubmitPatientShortQuestionnaire = async (values: Step4bType) => {\n    if (values) {\n      action(values);\n      await doSubmitPatientShortQuestionnaire({\n        setSubmitError: s => setSubmitError(!s ? null : t(s)),\n        state: {\n          ...state,\n          'submit-steps': {\n            ...state['submit-steps'],\n            ...values,\n          },\n        },\n        captchaValue,\n        action,\n        nextStep,\n        setActiveStep,\n        history,\n      });\n    }\n  };\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('questionary:symptomsDateTitle'));\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, t]);\n\n  const getLeftLabel = () => {\n    if (isShortQuestionary) {\n      if (isSubmitting) {\n        return t('questionary:submitting');\n      }\n      return t('beforeSubmit:submitButton');\n    }\n    return t('questionary:nextButton');\n  };\n\n  return (\n    <MainContainer>\n      <QuestionText extraSpace first>\n        {t('questionary:symptomsDate')}\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"symptomsStartedDate\"\n        defaultValue=\"\"\n        render={({ onChange, value, name }) => (\n          country === 'Japan' ? (\n            <OptionList\n              singleSelection\n              value={{ selected: value ? [value] : [] }}\n              onChange={v => onChange(v.selected[0])}\n              items={[\n                {\n                  value: 'none',\n                  label: t('questionary:options.none'),\n                },\n                {\n                  value: 'today',\n                  label: t('questionary:options.today'),\n                },\n                {\n                  value: 'days',\n                  label: t('questionary:options.days'),\n                },\n                {\n                  value: 'week',\n                  label: t('questionary:options.week'),\n                },\n                {\n                  value: 'overWeek',\n                  label: t('questionary:options.overWeek'),\n                },\n              ]}\n            />\n          ) : (\n            <QuestionInput\n              name={name}\n              value={value}\n              onChange={onChange}\n              type=\"text\"\n              placeholder={t('questionary:enterDays')}\n              autoComplete=\"Off\"\n            />\n          )\n        )}\n      />\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          {renderCaptcha}\n          <WizardButtons\n            leftLabel={getLeftLabel()}\n            leftHandler={isShortQuestionary ? handleSubmit(onSubmitPatientShortQuestionnaire) : handleSubmit(onSubmit)}\n            leftDisabled={(isShortQuestionary && (country !== 'Colombia')) ? (isSubmitting || (recaptchaAvailable && !captchaValue)) : !isValid}\n            invert\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step4b);\n","export { default } from './Step4b';\n"],"sourceRoot":""}