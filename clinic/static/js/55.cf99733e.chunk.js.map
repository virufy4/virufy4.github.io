{"version":3,"sources":["hooks/useHeaderContext.ts","helper/scrollHelper.ts","components/WizardButtons/style.ts","components/WizardButtons/WizardButtons.tsx","utils/wizard.ts","components/Button/style.ts","components/Button/Button.tsx","containers/SubmitSteps/Submission/style.ts","containers/SubmitSteps/Submission/PredictionResult1/PredictionResult1.tsx"],"names":["useHeaderContext","React","useContext","HeaderContext","title","setTitle","subtitle","setSubtitle","type","setType","logoSize","setLogoSize","setDoGoBack","doGoBack","scrollToTop","window","scrollTo","top","behavior","WizardButtonsContainer","styled","div","props","theme","layout","generalPaddingAmount","breakpoints","tablet","WizardButtons","memo","invert","leftLabel","leftDisabled","leftHandler","rightLabel","rightDisabled","rightHandler","Button","dark","disabled","onClick","updateAction","storeKey","state","payload","resetStore","output","welcome","language","isClinic","country","region","hospitalId","StyledButton","button","color","colors","purple_50","purple","white","children","MainContainer","QuestionInput","input","midGray","mineShaft","CustomPurpleText","h2","left","isLight","mt","mb","BoldBlackText","Title","h1","darkBlack","ResultTitle","ImportantNote","span","isBold","ResultNote","p","BeforeSubmitText","red","schema","Yup","accessCode","required","defined","previousStep","nextStep","Portal","usePortal","bindTo","document","getElementById","history","useHistory","t","useTranslation","useStateMachine","patientId","getPatientId","useState","activeStep","setActiveStep","submitError","setSubmitError","processing","setProcessing","location","useLocation","coughAudioPath","audioInfo","cough","useForm","mode","defaultValues","resolver","yupResolver","control","handleSubmit","formState","errors","isValid","onSubmit","value","a","url","process","encodeURIComponent","axios","post","predictionResult","data","push","prediction","errorCode","error_code","console","log","handleDoBack","useCallback","goBack","useEffect","name","defaultValue","render","onChange","placeholder","autoComplete","i18nKey"],"mappings":"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","file":"static/js/55.cf99733e.chunk.js","sourcesContent":["import React from 'react';\nimport { HeaderContext } from 'components/Header';\n\nconst useHeaderContext = () => {\n  const {\n    title, setTitle, subtitle, setSubtitle, type, setType, logoSize, setLogoSize, setDoGoBack, doGoBack,\n  } = React.useContext(HeaderContext);\n\n  return {\n    title,\n    setTitle,\n    subtitle,\n    setSubtitle,\n    type,\n    setType,\n    logoSize,\n    setLogoSize,\n    doGoBack,\n    setDoGoBack,\n  };\n};\n\nexport default useHeaderContext;\n","export const scrollToTop = function scrollToTop() {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n};\n\nexport const scrollToBottom = function scrollToBottom() {\n  window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n};\n","import styled from 'styled-components';\n\nexport const WizardButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  max-width: ${props => `calc(100% - ${props.theme.layout.generalPaddingAmount * 2}px)`};\n  margin: 0 auto;\n\n  button {\n    flex: 1;\n    min-height: 50px;\n    margin-bottom: 8px;\n\n    &:first-of-type {\n      margin-left: 0px !important;\n    }\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\n\n// Components\nimport Button from 'components/Button';\n\n// Styles\nimport {\n  WizardButtonsContainer,\n} from './style';\n\ninterface WizardButtonsProps {\n  invert?: boolean;\n  leftLabel: string;\n  leftDisabled?: boolean;\n  leftHandler: () => void;\n  rightLabel?: string;\n  rightDisabled?: boolean;\n  rightHandler?: () => void;\n}\n\nconst WizardButtons = React.memo(({\n  invert = false,\n  leftLabel,\n  leftDisabled,\n  leftHandler,\n  rightLabel,\n  rightDisabled,\n  rightHandler,\n}: WizardButtonsProps) => (\n  <WizardButtonsContainer>\n    <Button\n      dark={invert}\n      disabled={leftDisabled}\n      onClick={leftHandler}\n    >\n      {leftLabel}\n    </Button>\n    {\n        rightLabel && rightHandler && (\n          <Button\n            dark={!invert}\n            disabled={rightDisabled}\n            onClick={rightHandler}\n          >\n            {rightLabel}\n          </Button>\n        )\n      }\n  </WizardButtonsContainer>\n));\nexport default React.memo(WizardButtons);\n","import { isClinic } from 'helper/basePathHelper';\n\n// TODO: Improve types\nexport function updateAction(storeKey: string): any {\n  return (state: any, payload: any) => ({\n    ...state,\n    [storeKey]: {\n      ...state[storeKey],\n      ...payload,\n    },\n  });\n}\n\nexport function resetStore(): any {\n  return (state: any) => {\n    const output: CommonJSON = { welcome: { language: state.welcome.language } };\n    if (isClinic) {\n      output.welcome.country = state.welcome.country;\n      output.welcome.region = state.welcome.region;\n      output.welcome.hospitalId = state.welcome.hospitalId;\n    }\n    return output;\n  };\n}\n","import styled from 'styled-components';\nimport { colors } from '../../theme';\n\nexport interface StyledButtonProps {\n  disabled?: boolean;\n  dark?: boolean;\n  id?: string;\n}\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  height: 50px;\n  border-radius: 15px; \n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  font-weight: bold;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  ${({ dark, disabled }) => {\n    const color = disabled ? colors.purple_50 : colors.purple;\n    return dark ? `\n    background-color: ${color};\n    color: ${colors.white};\n    border: none;\n  ` : `\n    background-color: ${colors.white};\n    color: ${color};\n    border: 1px solid ${color};\n  `;\n  }}\n`;\n","import React, { PropsWithChildren } from 'react';\n\n// Styles\nimport {\n  StyledButton,\n  StyledButtonProps,\n} from './style';\n\nexport interface ButtonProps extends PropsWithChildren<StyledButtonProps> {\n  onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void);\n}\n\nconst Button = React.memo(({ children, ...props }: ButtonProps) => ((\n  <StyledButton\n    type=\"button\"\n    {...props}\n  >\n    {children}\n  </StyledButton>\n)));\n\nexport default Button;\n","import styled from 'styled-components';\n\ninterface WelcomeNoteProps {\n  isBold?: boolean;\n}\n\nexport const MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const QuestionInput = styled.input`\n  background-color: ${props => props.theme.colors.midGray};\n  border-radius: 4px;\n  border: 0;\n  border-radius: 15px;\n  color: ${props => props.theme.colors.mineShaft};\n  font-family: 'Source Sans Pro';\n  margin: auto;\n  padding: 12px 15px;\n\n  height: 48px;\n  width: 100%;\n  max-width: 320px;\n  \n\n  ::placeholder {\n    color: #A3A3A3;\n    font-size: 14px;\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 348px;\n    }\n`;\n\nexport const CustomPurpleText = styled.h2<{ mb?: number; mt?: number; isLight?: boolean; left?: boolean}>`\n  font-family: 'Biko';\n  font-size: 24px;\n  line-height: 28px;\n  color: ${({ theme }) => theme.colors.purple}; \n  text-align: ${({ left }) => (left ? 'left' : 'center')};\n  font-weight: ${({ isLight }) => (isLight ? '200' : '700')};\n  margin: ${({ mt = 32 }) => mt}px auto ${({ mb = 32 }) => mb}px auto;\n  white-space: pre-wrap;\n\n  max-width: 320px;\n  width: 100%;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 348px;\n    text-align: center;\n  }\n`;\n\nexport const BoldBlackText = styled.h2`\n  font-family: 'Biko';\n  font-size: 14px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.colors.mineShaft}; \n  text-align: left;\n  font-weight: 700;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 40px;\n  margin-bottom: 16px;\n  white-space: pre-wrap;\n\n  max-width: 320px;\n  width: 100%;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 348px;\n  }\n`;\n\nexport const Title = styled.h1`\n  font-family: \"Open Sans\";\n  font-weight: bold;\n  font-size: 30px;\n  line-height: 142.69%;\n  text-align: center;\n  color: ${props => props.theme.colors.darkBlack};\n  margin-bottom: 8px;\n  margin-top: 25px;\n`;\n\nexport const ResultTitle = styled.h2<{ color?: string}>`\n  font-family: \"Open Sans\";\n  font-weight: bold;\n  font-size: 22px;\n  line-height: 142.69%;\n  text-align: center;\n  color: ${({ color }) => color};\n  margin-bottom: 8px;\n  margin-top: 25px;\n`;\n\nexport const ImportantNote = styled.span<{ isBold?: boolean }>`\n  font-family: \"Source Sans Pro\";\n  font-size: 0.75rem;\n  line-height: 1.42;\n  font-weight: ${({ isBold }) => (isBold ? 700 : 400)};\n  max-width: 320px;\n  margin: 52px auto 30px;\n`;\n\nexport const ResultNote = styled.p<{ isBold?: boolean }>`\n  font-family: \"Source Sans Pro\";\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: ${({ isBold }) => (isBold ? 700 : 400)};\n  max-width: 335px;\n  margin: 52px auto;\n`;\n\nexport const BeforeSubmitText = styled.p`\n  font-family: 'Source Sans Pro';\n  font-size: 14px;\n  line-height: 20px;\n  color: ${props => props.theme.colors.red};\n  text-align: center;\n  margin-bottom: 16px;\n`;\n","import React, { useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { Trans, useTranslation } from 'react-i18next';\nimport axios from 'axios';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Helpers\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { getPatientId } from 'helper/stepsDefinitions';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\n\n// Style\nimport {\n  QuestionInput, CustomPurpleText, BoldBlackText, Title, ImportantNote, MainContainer, BeforeSubmitText,\n} from '../style';\n\nconst schema = Yup.object({\n  accessCode: Yup.string().required(),\n}).defined();\n\ntype PredictionResult1Type = Yup.InferType<typeof schema>;\n\nconst predictionEndpointUrl = process.env.REACT_APP_PREDICTION_ENDPOINT || '';\ndeclare interface AudioInfoProp {\n  breath: string;\n  cough: string;\n  voice: string;\n}\n\nconst PredictionResult1 = ({\n  previousStep,\n  nextStep,\n  storeKey,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const {\n    setDoGoBack, setTitle, setType, setLogoSize,\n  } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state/* , actions */ } = useStateMachine(updateAction(storeKey));\n  const patientId = getPatientId();\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [processing, setProcessing] = React.useState<boolean>(false);\n\n  // Location\n  const location = useLocation<{ audioInfo: AudioInfoProp }>();\n\n  const coughAudioPath: string = location?.state?.audioInfo?.cough;\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n  });\n  const { errors } = formState;\n\n  const {\n    isValid,\n  } = formState;\n\n  const onSubmit = async (value: any) => {\n    try {\n      setSubmitError(null);\n      setProcessing(true);\n      const url = `${predictionEndpointUrl}?file_path=${encodeURIComponent(coughAudioPath)}&access_code=${encodeURIComponent(value.accessCode)}`;\n      const predictionResult = await axios.post(url);\n      if (predictionResult.data) {\n        setProcessing(false);\n        if (nextStep) {\n          setActiveStep(false);\n          history.push(nextStep, {\n            prediction: predictionResult.data.prediction,\n            errorCode: predictionResult.data.error_code,\n          });\n        }\n      } else {\n        setProcessing(false);\n      }\n    } catch (error) {\n      console.log('Error', error);\n      setSubmitError(t('beforeSubmit:submitError'));\n    }\n  };\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  // Effects\n  useEffect(() => {\n    scrollToTop();\n    setDoGoBack(() => handleDoBack);\n    setTitle('');\n    setType('tertiary');\n    setLogoSize('regular');\n  }, [handleDoBack, setDoGoBack, setType, setTitle, setLogoSize, t]);\n\n  return (\n    <MainContainer>\n      <Title>{t('main:screeningResults', 'Screening Results')}</Title>\n      <CustomPurpleText isLight left mb={5}>\n        {t('main:hello', 'Hello,')}\n      </CustomPurpleText>\n      <CustomPurpleText left mt={0}>\n        {`${t('main:patient', 'Patient')} ${patientId}`}\n      </CustomPurpleText>\n      <BoldBlackText>\n        {t('main:accessCode', 'Access Code')}\n      </BoldBlackText>\n      <Controller\n        control={control}\n        name=\"accessCode\"\n        defaultValue=\"\"\n        render={({ onChange, value, name }) => (\n          <QuestionInput\n            name={name}\n            value={value}\n            onChange={onChange}\n            type=\"text\"\n            placeholder={t('main:enterAccessCode', 'Enter Access Code')}\n            autoComplete=\"Off\"\n          />\n        )}\n      />\n      <ImportantNote>\n        <Trans i18nKey=\"main:note\">\n          <strong>Please note:</strong> This form is for data collection only. It will not predict your COVID-19\n          status or diagnose any disease, disorder, or other health condition. Virufy is conducting research and\n          will use the information you provide for that research only. Virufy will not take place of a doctor and\n          would like to remind you it is your responsibility to seek medical advice from your doctor.\n        </Trans>\n      </ImportantNote>\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          {submitError && (\n            <BeforeSubmitText>\n              {submitError}\n            </BeforeSubmitText>\n          )}\n          <WizardButtons\n            leftLabel={t('beforeSubmit:submitButton')}\n            leftHandler={handleSubmit(onSubmit)}\n            leftDisabled={!isValid || processing}\n            invert\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(PredictionResult1);\n"],"sourceRoot":""}