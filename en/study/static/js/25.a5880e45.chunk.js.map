{"version":3,"sources":["data/lang.ts","data/country.ts","data/states/Argentina.ts","data/states/Brazil.ts","data/states/Colombia.ts","data/states/Peru.ts","data/states/UnitedStates.ts","containers/Welcome/Step1/Step1.tsx","components/Dropdown/style.ts","components/Dropdown/Dropdown.tsx","containers/Welcome/Step1/index.ts"],"names":["languageData","code","label","countryData","name","val","telephonePrefix","states","countriesWithStates","filter","c","length","map","schema","Yup","shape","country","required","language","region","when","is","includes","then","else","defined","React","memo","p","width","useWindowSize","Portal","usePortal","bindTo","document","getElementById","useState","activeStep","setActiveStep","useHeaderContext","doGoBack","setDoGoBack","setLogoSize","useStateMachine","updateAction","storeKey","state","action","store","useForm","defaultValues","resolver","yupResolver","mode","control","formState","handleSubmit","watch","setValue","history","useHistory","isValid","onSubmit","values","a","nextStep","push","useEffect","scrollToTop","useTranslation","t","i18n","lang","changeLanguage","countrySelectOptions","useMemo","consentFormUrl","regionSelectOptions","output","elem","find","forEach","s","mt","fontSize","fontWeight","mb","textAlign","defaultValue","split","render","onChange","value","Dropdown","e","currentTarget","key","id","shouldValidate","Trans","i18nKey","WizardButtons","leftLabel","leftHandler","leftDisabled","invert","CreatedBy","inline","StyledSelect","styled","select","props","theme","colors","lightGray","darkBlack","isMobileFullWidth","breakpoints","tablet","Select","children"],"mappings":"sSAAaA,EAAe,CAC1B,CAAEC,KAAM,KAAMC,MAAO,WACrB,CAAED,KAAM,KAAMC,MAAO,cACrB,CAAED,KAAM,KAAMC,MAAO,iBCUVC,EAAkC,CAC7C,CACEC,KAAM,YAAaC,IAAK,YAAaC,gBAAiB,MAAOC,OCfzC,CACtB,qCACA,eACA,YACA,QACA,SACA,aACA,aACA,gBACA,UACA,QACA,WACA,WACA,UACA,WACA,aACA,eACA,QACA,WACA,WACA,aACA,WACA,sBACA,mBACA,eDPA,CACEH,KAAM,UAAWC,IAAK,UAAWC,gBAAiB,OAAQC,OAAQ,IAEpE,CACEH,KAAM,SAAUC,IAAK,SAAUC,gBAAiB,MAAOC,OErBtC,CACnB,OACA,UACA,WACA,WACA,QACA,WACA,mBACA,oBACA,WACA,cACA,cACA,qBACA,eACA,UACA,aACA,YACA,aACA,WACA,iBACA,sBACA,oBACA,cACA,UACA,iBACA,eACA,UACA,cFJA,CACEH,KAAM,WAAYC,IAAK,WAAYC,gBAAiB,MAAOC,OGxBxC,CACrB,WACA,YACA,SACA,eACA,YACA,aACA,YACA,SACA,mBACA,aACA,WACA,QACA,QACA,WACA,aACA,eACA,aACA,WACA,QACA,aACA,YACA,OACA,YACA,qBACA,WACA,aACA,YACA,8BACA,YACA,QACA,SACA,kBACA,YACA,YHRA,CACEH,KAAM,SAAUC,IAAK,SAAUC,gBAAiB,MAAOC,OAAQ,IAEjE,CACEH,KAAM,WAAYC,IAAK,WAAYC,gBAAiB,MAAOC,OAAQ,IAErE,CACEH,KAAM,OAAQC,IAAK,OAAQC,gBAAiB,MAAOC,OIjCpC,CACjB,WACA,SACA,cACA,WACA,WACA,YACA,SACA,QACA,eACA,aACA,MACA,WACA,cACA,aACA,OACA,SACA,gBACA,WACA,QACA,QACA,OACA,aACA,QACA,SACA,YJUA,CACEH,KAAM,gBAAiBC,IAAK,gBAAiBC,gBAAiB,MAAOC,OKpCxD,CACf,UACA,SACA,UACA,WACA,aACA,WACA,cACA,WACA,UACA,UACA,SACA,QACA,WACA,UACA,OACA,SACA,WACA,YACA,Q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","file":"static/js/25.a5880e45.chunk.js","sourcesContent":["export const languageData = [\n  { code: 'en', label: 'English' },\n  { code: 'es', label: 'Español' },\n  { code: 'pt', label: 'Português' },\n];\n","import ArgentinaStates from './states/Argentina';\nimport BrazilStates from './states/Brazil';\nimport ColombiaStates from './states/Colombia';\nimport PeruStates from './states/Peru';\nimport UsStates from './states/UnitedStates';\n\nexport interface CountryDataProps {\n  name: string;\n  val: string;\n  telephonePrefix: string;\n  states: string[],\n}\n\nexport const countryData: CountryDataProps[] = [\n  {\n    name: 'Argentina', val: 'Argentina', telephonePrefix: '+54', states: ArgentinaStates,\n  },\n  {\n    name: 'Bolivia', val: 'Bolivia', telephonePrefix: '+591', states: [],\n  },\n  {\n    name: 'Brazil', val: 'Brazil', telephonePrefix: '+55', states: BrazilStates,\n  },\n  {\n    name: 'Colombia', val: 'Colombia', telephonePrefix: '+57', states: ColombiaStates,\n  },\n  {\n    name: 'Mexico', val: 'Mexico', telephonePrefix: '+52', states: [],\n  },\n  {\n    name: 'Pakistan', val: 'Pakistan', telephonePrefix: '+92', states: [],\n  },\n  {\n    name: 'Peru', val: 'Peru', telephonePrefix: '+51', states: PeruStates,\n  },\n  {\n    name: 'United States', val: 'United States', telephonePrefix: '+51', states: UsStates,\n  },\n];\n\nexport const countriesWithStates: string[] = countryData.filter(c => c.states.length > 0).map(c => c.val);\n","const argentinaStates = [\n  'Ciudad Autónoma de Buenos Aires',\n  'Buenos Aires',\n  'Catamarca',\n  'Chaco',\n  'Chubut',\n  'Córdoba',\n  'Corrientes',\n  'Entre Ríos',\n  'Formosa',\n  'Jujuy',\n  'La Pampa',\n  'La Rioja',\n  'Mendoza',\n  'Misiones',\n  'Neuquén',\n  'Río Negro',\n  'Salta',\n  'San Juan',\n  'San Luis',\n  'Santa Cruz',\n  'Santa Fe',\n  'Santiago del Estero',\n  'Tierra del Fuego',\n  'Tucumán',\n];\n\nexport default argentinaStates;\n","const brazilStates = [\n  'Acre',\n  'Alagoas',\n  'Amapá',\n  'Amazonas',\n  'Bahia',\n  'Ceará',\n  'Distrito Federal',\n  'Espírito Santo',\n  'Goiás',\n  'Maranhão',\n  'Mato Grosso',\n  'Mato Grosso do Sul',\n  'Minas Gerais',\n  'Pará',\n  'Paraíba',\n  'Paraná',\n  'Pernambuco',\n  'Piauí',\n  'Rio de Janeiro',\n  'Rio Grande do Norte',\n  'Rio Grande do Sul',\n  'Rondônia',\n  'Roraima',\n  'Santa Catarina',\n  'São Paulo',\n  'Sergipe',\n  'Tocantins',\n];\n\nexport default brazilStates;\n","const colombiaStates = [\n  'Amazonas',\n  'Antioquia',\n  'Arauca',\n  'Atlántico',\n  'Bogotá',\n  'Bolívar',\n  'Boyacá',\n  'Caldas',\n  'Capital District',\n  'Caquetá',\n  'Casanare',\n  'Cauca',\n  'Cesar',\n  'Chocó',\n  'Córdoba',\n  'Cundinamarca',\n  'Guainía',\n  'Guaviare',\n  'Huila',\n  'La Guajira',\n  'Magdalena',\n  'Meta',\n  'Nariño',\n  'Norte de Santander',\n  'Putumayo',\n  'Quindío',\n  'Risaralda',\n  'San Andrés y Providencia',\n  'Santander',\n  'Sucre',\n  'Tolima',\n  'Valle del Cauca',\n  'Vaupés',\n  'Vichada',\n];\n\nexport default colombiaStates;\n","const peruStates = [\n  'Amazonas',\n  'Ancash',\n  'Apurímac',\n  'Arequipa',\n  'Ayacucho',\n  'Cajamarca',\n  'Callao',\n  'Cuzco',\n  'Huancavelica',\n  'Huánuco',\n  'Ica',\n  'Junín',\n  'La Libertad',\n  'Lambayeque',\n  'Lima',\n  'Loreto',\n  'Madre de Dios',\n  'Moquegua',\n  'Pasco',\n  'Piura',\n  'Puno',\n  'San Martin',\n  'Tacna',\n  'Tumbes',\n  'Ucayali',\n];\n\nexport default peruStates;\n","const usStates = [\n  'Alabama',\n  'Alaska',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'Florida',\n  'Georgia',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Pennsylvania',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n];\n\nexport default usStates;\n","import React, { useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport * as Yup from 'yup';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport Dropdown from 'components/Dropdown';\nimport CreatedBy from 'components/CreatedBy';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Data\nimport { languageData } from 'data/lang';\nimport { countryData, countriesWithStates } from 'data/country';\n\n// Hooks\nimport useWindowSize from 'hooks/useWindowSize';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Styles\nimport {\n  WelcomeLogo, WelcomeLogoText, WelcomeNote, WelcomeTitle, WelcomeContent, WelcomeSubtitle, WelcomeStyledForm,\n  WelcomeRequiredFieldText, RegionContainer,\n} from '../style';\n\nconst schema = Yup.object().shape({\n  country: Yup.string().required(),\n  language: Yup.string().required(),\n  region: Yup.string().when('country', {\n    is: (val: string) => countriesWithStates.includes(val),\n    then: Yup.string().required(),\n    else: Yup.string(),\n  }),\n}).defined();\n\ntype Step1Type = Yup.InferType<typeof schema>;\n\nconst Step1 = (p: Wizard.StepProps) => {\n  const { width } = useWindowSize();\n\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const [activeStep, setActiveStep] = React.useState(true);\n  const { doGoBack, setDoGoBack, setLogoSize } = useHeaderContext();\n\n  const { state, action } = useStateMachine(updateAction(p.storeKey));\n\n  const store = state?.[p.storeKey];\n  const {\n    control,\n    formState,\n    handleSubmit,\n    watch,\n    setValue,\n  } = useForm({\n    defaultValues: store,\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n  });\n\n  const history = useHistory();\n  const { isValid } = formState;\n\n  const onSubmit = async (values: Step1Type) => {\n    if (values) {\n      action(values);\n      if (p.nextStep) {\n        setActiveStep(false);\n        history.push(p.nextStep);\n      }\n    }\n  };\n\n  const resetRegion = () => {\n    setValue('region', '', {\n      shouldValidate: true,\n    });\n  };\n\n  useEffect(() => {\n    scrollToTop();\n\n    // Hide back arrow in header if neccesary\n    if (doGoBack) setDoGoBack(null);\n\n    setLogoSize('big');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const { t, i18n } = useTranslation();\n\n  const lang = watch('language');\n  const country = watch('country');\n\n  useEffect(() => {\n    i18n.changeLanguage(lang);\n  }, [i18n, lang]);\n\n  const countrySelectOptions = useMemo(() => [{ name: t('main:selectCountry'), consentFormUrl: '', val: '' },\n    ...countryData], [t]);\n\n  const regionSelectOptions = useMemo(() => {\n    const output = [\n      { name: t('main:selectRegion'), val: '' },\n    ];\n    if (country) {\n      const elem = countryData.find(a => a.val === country);\n      if (elem) {\n        elem.states.forEach(s => {\n          output.push({ name: s, val: s });\n        });\n      }\n    }\n    return output;\n  }, [t, country]);\n\n  return (\n    <>\n      <WelcomeStyledForm mt=\"-4px\">\n        <WelcomeLogo />\n        <WelcomeLogoText>\n          {t('main:logoIntro', 'An Independent Nonprofit Research Organization')}\n        </WelcomeLogoText>\n\n        <WelcomeTitle\n          fontSize={width && width > 560 ? 32 : 24}\n          mt={48}\n        >\n          {t('main:title')}\n        </WelcomeTitle>\n\n        <WelcomeContent>\n          <WelcomeSubtitle\n            fontWeight={700}\n            mb={0}\n            mt={width && width > 560 ? 0 : 18}\n            textAlign={width && width > 560 ? 'center' : 'left'}\n          >\n            {t('main:paragraph1')}\n          </WelcomeSubtitle>\n\n          <WelcomeSubtitle\n            mt={width && width > 560 ? 50 : 32}\n            mb={width && width > 560 ? 50 : 16}\n            fontWeight={400}\n            textAlign={width && width > 560 ? 'center' : 'left'}\n          >\n            Please select your language.\n          </WelcomeSubtitle>\n          <Controller\n            control={control}\n            name=\"language\"\n            defaultValue={i18n.language.split('-')[0] || languageData[0].code}\n            render={({ onChange, value }) => (\n              <Dropdown onChange={e => onChange(e.currentTarget.value)} value={value}>\n                {languageData.map(({ code, label }) => <option key={code} id={code} value={code}>{label}</option>)}\n              </Dropdown>\n            )}\n          />\n\n          <WelcomeSubtitle\n            mt={width && width > 560 ? 50 : 32}\n            mb={width && width > 560 ? 50 : 16}\n            fontWeight={400}\n            textAlign={width && width > 560 ? 'center' : 'left'}\n          >\n            {t('main:paragraph2')}\n            <WelcomeRequiredFieldText> *</WelcomeRequiredFieldText>\n          </WelcomeSubtitle>\n\n          <Controller\n            control={control}\n            name=\"country\"\n            defaultValue={countrySelectOptions[0].val}\n            render={({ onChange, value }) => (\n              <Dropdown onChange={e => { onChange(e.currentTarget.value); resetRegion(); }} value={value}>\n                {countrySelectOptions.map(({ name, val }) => <option key={name} id={name} value={val}>{name}</option>)}\n              </Dropdown>\n            )}\n          />\n\n          <Controller\n            control={control}\n            name=\"region\"\n            defaultValue={regionSelectOptions[0].val}\n            render={({ onChange, value }) => (regionSelectOptions.length > 1 ? (\n              <RegionContainer>\n                <Dropdown onChange={e => onChange(e.currentTarget.value)} value={value}>\n                  {regionSelectOptions.map(({ name, val }) => <option key={name} id={name} value={val}>{name}</option>)}\n                </Dropdown>\n              </RegionContainer>\n            ) : <></>)}\n          />\n\n          <WelcomeNote>\n            <Trans i18nKey=\"main:note\">\n              <strong>Please note:</strong> This form is for data collection only. It will not predict your COVID-19\n              status or diagnose any disease, disorder, or other health condition. Virufy is conducting research and\n              will use the information you provide for that research only. Virufy will not take place of a doctor and\n              would like to remind you it is your responsibility to seek medical advice from your doctor.\n            </Trans>\n          </WelcomeNote>\n\n          {activeStep && (\n            <Portal>\n              <WizardButtons\n                leftLabel={t('main:nextButton')}\n                leftHandler={handleSubmit(onSubmit)}\n                leftDisabled={!isValid}\n                invert\n              />\n              <CreatedBy inline />\n            </Portal>\n          )}\n\n        </WelcomeContent>\n      </WelcomeStyledForm>\n    </>\n  );\n};\n\nexport default React.memo(Step1);\n","import styled from 'styled-components';\n\ninterface StyledSelectProps {\n  isMobileFullWidth?: boolean;\n}\n\nexport const StyledSelect = styled.select<StyledSelectProps>`\n  appearance: none;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='12' height='6' viewBox='0 0 12 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.538574 0.838867L6.1155 5.83887L11.6924 0.838867H0.538574Z' fill='%2321242C'/%3E%3C/svg%3E\");\n  background-color: ${props => props.theme.colors.lightGray};\n  background-position: 95% 50%;\n  background-repeat: no-repeat;\n  border: 0;\n  border-radius: 4px;\n  color: ${props => props.theme.colors.darkBlack};\n  font-family: 'Source Sans Pro';\n  margin: auto;\n  padding: 12px 15px;\n  \n  height: 48px;\n  max-width: ${({ isMobileFullWidth }) => (isMobileFullWidth ? 'none' : '320px')};\n  width: 100%;\n\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 348px;\n    }\n`;\n","/* eslint-disable react/require-default-props */\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\nimport { StyledSelect } from './style';\n\ninterface DropdownProps extends HTMLAttributes<HTMLSelectElement>{\n  children: React.ReactNode;\n  isMobileFullWidth?: boolean;\n  value: string;\n}\n\nconst Select:FunctionComponent<DropdownProps> = (props:DropdownProps) => {\n  const { children, value, isMobileFullWidth } = props;\n  return <StyledSelect {...props} value={value} isMobileFullWidth={isMobileFullWidth}>{children}</StyledSelect>;\n};\n\nexport default Select;\n","export { default } from './Step1';\n"],"sourceRoot":""}