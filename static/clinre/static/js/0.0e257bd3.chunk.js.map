{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/filterOutFalsy.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/isSameError.ts","../../src/logic/shouldRenderBasedOnError.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/utils/deepEqual.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/regenerator-runtime/runtime.js"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","error","currentError","message","types","every","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","getValidateError","validateAllFieldCriteria","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","defaultValues","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","watchFieldsRef","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","dirtyFields","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","getValues","getFieldArrayParentName","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","fieldArrayParentName","isFieldWatched","renderWatchedInputs","found","size","setValue","payload","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","prop","FormContext","React.createContext","displayName","React.useContext","as","render","onFocus","rest","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","defineProperty","onBlur","onChange","props","React.isValidElement","React.cloneElement","React.createElement","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","_asyncToGenerator","fn","self","this","args","arguments","apply","_toConsumableArray","arr","arrayLikeToArray","iter","from","runtime","Op","prototype","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","Context","_invoke","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","makeInvokeMethod","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","constructor","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/0.0e257bd3.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(object: FieldValues, path: string, value: unknown) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<FieldValues>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((shallowFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types';\n\nexport default (error: FieldError, currentError?: FieldError): boolean =>\n  isObject(error) &&\n  isObject(currentError) &&\n  error.type === currentError.type &&\n  error.message === currentError.message &&\n  Object.keys(error.types || {}).length ===\n    Object.keys(currentError.types || {}).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => (currentError.types || {})[key] === value,\n  );\n","import isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !isSameError(previousError, error)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  NonUndefined,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {},\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, () => void>\n  >({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : defaultValues,\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        !fieldsRef.current[name] ||\n        (!readFormStateRef.current.isDirty &&\n          !readFormStateRef.current.dirtyFields)\n      ) {\n        return {};\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n\n      isFieldDirty\n        ? set(formStateRef.current.dirtyFields, name, true)\n        : unset(formStateRef.current.dirtyFields, name);\n\n      const state = {\n        isDirty:\n          (isFieldArray &&\n            !deepEqual(\n              get(getValues(), getFieldArrayParentName(name)),\n              get(defaultValuesRef.current, getFieldArrayParentName(name)),\n            )) ||\n          !isEmptyObject(formStateRef.current.dirtyFields),\n        dirtyFields: formStateRef.current.dirtyFields,\n      };\n\n      const isChanged =\n        (readFormStateRef.current.isDirty &&\n          previousIsDirty !== state.isDirty) ||\n        (readFormStateRef.current.dirtyFields &&\n          isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n      if (isChanged && shouldRender) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        updateFormState({\n          ...state,\n        });\n      }\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            updateAndGetDirtyState(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (\n          isNameInFieldArray(fieldArrayNamesRef.current, name) ||\n          fieldArrayNamesRef.current.has(name)\n        ) {\n          const fieldArrayParentName = getFieldArrayParentName(name) || name;\n          fieldArrayDefaultValuesRef.current[fieldArrayParentName] = value;\n          resetFieldArrayFunctionRef.current[fieldArrayParentName]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name)) ||\n          !useWatchFieldsRef.current[key].size\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    if (isFieldWatched(name)) {\n      updateFormState();\n    }\n\n    renderWatchedInputs(name);\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return getFieldsValues(fieldsRef, shallowFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n      const isValid = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValid) {\n        updateFormState({\n          isValid,\n        });\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          delete defaultValuesAtRenderRef.current[field.ref.name];\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          unset(formStateRef.current.dirtyFields, field.ref.name);\n          unset(formStateRef.current.touched, field.ref.name);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: !isEmptyObject(formStateRef.current.dirtyFields),\n            dirtyFields: formStateRef.current.dirtyFields,\n            touched: formStateRef.current.touched,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(\n    name: FieldName<TFieldValues>,\n    error: ErrorOption = {},\n  ): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (fieldNames) {\n          const fieldRefNames = Object.keys(fieldsRef.current);\n\n          if (fieldRefNames.length) {\n            (isArray(fieldNames) ? fieldNames : [fieldNames]).forEach(\n              (name) => {\n                if (\n                  !fieldRefNames.find((fieldName) => fieldName.startsWith(name))\n                ) {\n                  console.warn(\n                    `📋 watched fields: ${fieldNames} are not found.`,\n                  );\n                }\n              },\n            );\n          }\n        }\n      }\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = getFieldsValues(fieldsRef, shallowFieldsStateRef, true);\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isValid: isValid ? formStateRef.current.isValid : true,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    shouldUnregister,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error(\n      '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n    );\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n      );\n    }\n\n    if ((!as && !render) || (as && render)) {\n      console.warn(\n        `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n      );\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}