{"version":3,"sources":["components/ProgressIndicator/style.ts","components/ProgressIndicator/ProgressIndicator.tsx","containers/SubmitSteps/Questionary/Step2d/Step2d.tsx","containers/SubmitSteps/Questionary/Step2d/index.ts"],"names":["ProgressIndicatorContainer","styled","div","props","theme","breakpoints","tablet","BarIndicatorContainer","colors","purple","BarIndicator","midGrayBlue","currentStep","totalSteps","React","memo","className","radius","stroke","color","green","colorTrack","gray3","progressBar","t","useTranslation","progress","normalizedRadius","circumference","Math","PI","strokeDashoffset","width","height","viewBox","fill","strokeWidth","r","cx","cy","strokeDasharray","style","fontSize","x","y","dominantBaseline","textAnchor","schema","Yup","ethnicity","defined","previousStep","nextStep","storeKey","otherSteps","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","history","useHistory","useStateMachine","updateAction","state","action","useState","activeStep","setActiveStep","useForm","mode","defaultValues","resolver","yupResolver","control","handleSubmit","formState","errors","isValid","handleDoBack","useCallback","push","goBack","useEffect","scrollToTop","onSubmit","values","a","hasSymptom","index","selected","length","covidSymptomsStep","current","total","extraSpace","first","i18nKey","name","defaultValue","render","onChange","value","singleSelection","v","items","label","excludableValues","leftLabel","leftHandler","leftDisabled","invert"],"mappings":"qmDAEO,IAAMA,EAA6BC,UAAOC,IAAV,KAmBhB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,YAAYC,UAoB3CC,GAVwBN,UAAOC,IAAV,KAUGD,UAAOC,IAAV,KAOvB,qBAAGE,MAAkBI,OAAOC,WAM1BC,EAAeT,UAAOC,IAAV,KAGT,qBAAGE,MAAkBI,OAAOG,eAO/B,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,WAAhB,2BAA+CA,EAA/C,eAAgED,EAAhE,QAKK,qBAAGR,MAAkBI,OAAOC,UC6B/BK,MAAMC,MA3EK,SAAC,GASI,IAAD,IAR5BC,iBAQ4B,MARhB,GAQgB,MAP5BC,cAO4B,MAPnB,GAOmB,MAN5BC,cAM4B,MANnB,EAMmB,MAL5BN,mBAK4B,MALd,EAKc,MAJ5BC,kBAI4B,MAJf,EAIe,MAH5BM,aAG4B,MAHpBX,IAAOY,MAGa,MAF5BC,kBAE4B,MAFfb,IAAOc,MAEQ,MAD5BC,mBAC4B,SAEpBC,EAAMC,cAAND,EAEFE,EAAYd,EAAcC,EAAc,IACxCc,EAAmBV,EAASC,EAAS,EACrCU,EAAmC,EAAnBD,EAAuBE,KAAKC,GAC5CC,EAAmBH,EAAkBF,EAAW,IAAOE,EAE7D,OACE,oCAEIL,EAEI,kBAAChB,EAAD,KACGiB,EAAE,0BAA2B,CAAEZ,cAAaC,eAC7C,kBAACH,EAAD,CACEE,YAAaA,EACbC,WAAYA,KAIhB,kBAACb,EAAD,CAA4BgB,UAAWA,GACrC,yBACEgB,MAAgB,EAATf,EACPgB,OAAiB,EAAThB,EACRiB,QAAO,cAAkB,EAATjB,EAAT,YAAgC,EAATA,IAE9B,4BACED,UAAU,QACVE,OAAQG,EACRc,KAAK,cACLC,YAAalB,EACbmB,EAAGV,EACHW,GAAIrB,EACJsB,GAAItB,IAEN,4BACEC,OAAQC,EACRgB,KAAK,cACLC,YAAalB,EACbsB,gBAAe,UAAKZ,EAAL,YAAsBA,GACrCa,MAAO,CAAEV,oBACTM,EAAGV,EACHW,GAAIrB,EACJsB,GAAItB,IAEN,0BACEyB,SAAS,KACTP,KAAK,UACLQ,EAAE,MACFC,EAAE,MACFC,iBAAiB,SACjBC,WAAW,UANb,UAQMlC,EARN,YAQqBC,W,yPCxD/BkC,EAASC,SAAW,CACxBC,UAAWD,aACVE,UAqJYpC,cAAMC,MAjJN,SAAC,GAMS,IALvBoC,EAKsB,EALtBA,aACAC,EAIsB,EAJtBA,SACAC,EAGsB,EAHtBA,SACAC,EAEsB,EAFtBA,WACAC,EACsB,EADtBA,SAGQC,EAAWC,IAAU,CAC3BC,OAAQC,UAAYA,SAASC,eAAe,oBADtCJ,OAFc,EAKqBK,cAAnCC,EALc,EAKdA,YAAaC,EALC,EAKDA,SAAUC,EALT,EAKSA,QACzBC,EAAUC,cACR1C,EAAMC,cAAND,EAPc,EAQI2C,YAAgBC,YAAaf,IAA/CgB,EARc,EAQdA,MAAOC,EARO,EAQPA,OARO,EAWcxD,IAAMyD,UAAS,GAX7B,mBAWfC,EAXe,KAWHC,EAXG,OAgBlBC,YAAQ,CACVC,KAAM,WACNC,cAAa,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAQhB,GACvBwB,SAAUC,YAAY/B,KAJtBgC,EAfoB,EAepBA,QAASC,EAfW,EAeXA,aAAcC,EAfH,EAeGA,UAMjBC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QAEVC,EAAetE,IAAMuE,aAAY,WACrCZ,GAAc,GACVtB,EACFc,EAAQqB,KAAKnC,GAEbc,EAAQsB,WAET,CAACtB,EAASd,IAEbqC,qBAAU,WACRC,cACA1B,EAAS,GAAD,OAAIvC,EAAE,iCACdwC,EAAQ,WACRF,GAAY,kBAAMsB,OACjB,CAACA,EAActB,EAAaC,EAAUC,EAAST,EAAU/B,IAG5D,IAAMkE,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,0DACXD,EADW,iBAGX1C,EACG0C,EADH1C,UAGFqB,EAAOqB,GAEHE,GAAa,EAGRC,EAAQ,EAXJ,YAWOA,GAAK,UAAG7C,EAAU8C,gBAAb,aAAG,EAAoBC,SAXnC,oBAYuB,SAA9B/C,EAAU8C,SAASD,GAZZ,uBAaTD,GAAa,EAbJ,4BAW2CC,IAX3C,2BAkBTD,IAAcvC,EAlBL,wBAmBXmB,GAAc,GACdR,EAAQqB,KAAKhC,EAAW2C,mBApBb,2BAwBT7C,IACFqB,GAAc,GACdR,EAAQqB,KAAKlC,IA1BF,4CAAH,sDA+Bd,OACE,kBAAC,gBAAD,KACE,kBAAC,IAAD,CACExC,YAAW,OAAE2C,QAAF,IAAEA,OAAF,EAAEA,EAAU2C,QACvBrF,WAAU,OAAE0C,QAAF,IAAEA,OAAF,EAAEA,EAAU4C,MACtB5E,aAAW,IAEb,kBAAC,eAAD,CAAc6E,YAAU,EAACC,OAAK,GAC5B,kBAAC,IAAD,CAAOC,QAAQ,kCACb,uFAEF,kBAAC,eAAD,KAAe9E,EAAE,gCAEnB,kBAAC,IAAD,CACEuD,QAASA,EACTwB,KAAK,YACLC,aAAa,GACbC,OAAQ,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACN,kBAAC,IAAD,CACEC,iBAAe,EACfD,MAAO,CAAEZ,SAAUY,EAAQ,CAACA,GAAS,IACrCD,SAAU,SAAAG,GAAC,OAAIH,EAASG,EAAEd,SAAS,KACnCe,MAAO,CACL,CACEH,MAAO,QACPI,MAAOvF,EAAE,wCAEX,CACEmF,MAAO,uBACPI,MAAOvF,EAAE,uDAEX,CACEmF,MAAO,iBACPI,MAAOvF,EAAE,iDAEX,CACEmF,MAAO,kBACPI,MAAOvF,EAAE,kDAEX,CACEmF,MAAO,0BACPI,MAAOvF,EAAE,0DAEX,CACEmF,MAAO,QACPI,MAAOvF,EAAE,yCAGbwF,iBAAkB,CAAC,aAKzB,2BAAG,kBAAC,IAAD,CAAc9B,OAAQA,EAAQqB,KAAK,UACrC/B,GACC,kBAAChB,EAAD,KACE,kBAAC,IAAD,CACEyD,UAAWzF,EAAE,0BACb0F,YAAalC,EAAaU,GAC1ByB,cAAehC,EACfiC,QAAM,U,iCC9KlB","file":"static/js/37.2a35a8cc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ProgressIndicatorContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  margin: -4px 0px 20px;\n\n  svg {\n    circle {\n      transition: stroke-dashoffset 0.35s;\n      transform: rotate(-90deg);\n      transform-origin: 50% 50%;\n\n      &.track {\n        transform: rotate(90deg);\n      }\n    }\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    margin: 20px 0px 40px;\n\n    svg {\n      width: 80px;\n      height: 80px;\n    }\n  }\n`;\n\nexport const ProgressIndicatorText = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-family: 'SF Pro Display';\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nexport const BarIndicatorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  margin-bottom: 40px;\n  color: ${({ theme }) => theme.colors.purple};\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 700;\n  `;\n\nexport const BarIndicator = styled.div<{ currentStep?: number, totalSteps?: number }>`\n  width: 120px;\n  height: 10px;\n  background: ${({ theme }) => theme.colors.midGrayBlue};\n  position: relative;\n  border-radius: 24px;\n  margin-top: 12px;\n  \n  &:after {\n    content:'';\n    width: ${({ currentStep, totalSteps }) => `calc((100%/${totalSteps}) * ${currentStep})`};\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    background: ${({ theme }) => theme.colors.purple};\n    border-radius: 24px;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { colors } from 'theme';\n\n// Styles\nimport {\n  BarIndicator,\n  BarIndicatorContainer,\n  ProgressIndicatorContainer,\n} from './style';\n\ninterface ProgressIndicatorProps {\n  className?: string;\n  radius?: number;\n  stroke?: number;\n  color?: string;\n  colorTrack?: string;\n  currentStep?: number;\n  totalSteps?: number;\n  progressBar?: boolean;\n}\n\nconst ProgressIndicator = ({\n  className = '',\n  radius = 30,\n  stroke = 6,\n  currentStep = 2,\n  totalSteps = 4,\n  color = colors.green,\n  colorTrack = colors.gray3,\n  progressBar = false,\n}: ProgressIndicatorProps) => {\n  // Hooks\n  const { t } = useTranslation();\n\n  const progress = (currentStep / totalSteps) * 100;\n  const normalizedRadius = radius - stroke / 2;\n  const circumference = normalizedRadius * 2 * Math.PI;\n  const strokeDashoffset = circumference - ((progress / 100) * circumference);\n\n  return (\n    <>\n      {\n        progressBar\n          ? (\n            <BarIndicatorContainer>\n              {t('questionary:progressBar', { currentStep, totalSteps })}\n              <BarIndicator\n                currentStep={currentStep}\n                totalSteps={totalSteps}\n              />\n            </BarIndicatorContainer>\n          ) : (\n            <ProgressIndicatorContainer className={className}>\n              <svg\n                width={radius * 2}\n                height={radius * 2}\n                viewBox={`0 0 ${radius * 2} ${radius * 2}`}\n              >\n                <circle\n                  className=\"track\"\n                  stroke={colorTrack}\n                  fill=\"transparent\"\n                  strokeWidth={stroke}\n                  r={normalizedRadius}\n                  cx={radius}\n                  cy={radius}\n                />\n                <circle\n                  stroke={color}\n                  fill=\"transparent\"\n                  strokeWidth={stroke}\n                  strokeDasharray={`${circumference} ${circumference}`}\n                  style={{ strokeDashoffset }}\n                  r={normalizedRadius}\n                  cx={radius}\n                  cy={radius}\n                />\n                <text\n                  fontSize=\"16\"\n                  fill=\"#000000\"\n                  x=\"50%\"\n                  y=\"50%\"\n                  dominantBaseline=\"middle\"\n                  textAnchor=\"middle\"\n                >\n                  {`${currentStep}/${totalSteps}`}\n                </text>\n              </svg>\n\n            </ProgressIndicatorContainer>\n          )\n      }\n    </>\n  );\n};\n\nexport default React.memo(ProgressIndicator);\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Components\nimport OptionList from 'components/OptionList';\nimport WizardButtons from 'components/WizardButtons';\nimport ProgressIndicator from 'components/ProgressIndicator';\n\n// Styles\nimport {\n  QuestionText, MainContainer, QuestionNote,\n} from '../style';\n\nconst schema = Yup.object({\n  ethnicity: Yup.string(),\n}).defined();\n\ntype Step4aType = Yup.InferType<typeof schema>;\n\nconst Step2d = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  otherSteps,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n  });\n  const { errors, isValid } = formState;\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(`${t('questionary:ethnicity.title')}`);\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, metadata, t]);\n\n  // Handlers\n  const onSubmit = async (values: Step4aType) => {\n    if (values) {\n      const {\n        ethnicity,\n      } = (values as any);\n\n      action(values);\n\n      let hasSymptom = false;\n\n      // eslint-disable-next-line no-plusplus\n      for (let index = 0; index < ethnicity.selected?.length; index++) {\n        if (ethnicity.selected[index] !== 'none') {\n          hasSymptom = true;\n          break;\n        }\n      }\n\n      if (hasSymptom && otherSteps) {\n        setActiveStep(false);\n        history.push(otherSteps.covidSymptomsStep);\n        return;\n      }\n\n      if (nextStep) {\n        setActiveStep(false);\n        history.push(nextStep);\n      }\n    }\n  };\n\n  return (\n    <MainContainer>\n      <ProgressIndicator\n        currentStep={metadata?.current}\n        totalSteps={metadata?.total}\n        progressBar\n      />\n      <QuestionText extraSpace first>\n        <Trans i18nKey=\"questionary:ethnicity.question\">\n          <strong>Which of the below symptoms do you currently have?</strong>\n        </Trans>\n        <QuestionNote>{t('questionary:ethnicity.note')}</QuestionNote>\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"ethnicity\"\n        defaultValue=\"\"\n        render={({ onChange, value }) => (\n          <OptionList\n            singleSelection\n            value={{ selected: value ? [value] : [] }}\n            onChange={v => onChange(v.selected[0])}\n            items={[\n              {\n                value: 'asian',\n                label: t('questionary:ethnicity.options.asian'),\n              },\n              {\n                value: 'nativeAmericanOrArab',\n                label: t('questionary:ethnicity.options.nativeAmericanOrArab'),\n              },\n              {\n                value: 'blackOrAfrican',\n                label: t('questionary:ethnicity.options.blackOrAfrican'),\n              },\n              {\n                value: 'hispanicOrLatin',\n                label: t('questionary:ethnicity.options.hispanicOrLatin'),\n              },\n              {\n                value: 'nativeHawaiianOrPacific',\n                label: t('questionary:ethnicity.options.nativeHawaiianOrPacific'),\n              },\n              {\n                value: 'white',\n                label: t('questionary:ethnicity.options.white'),\n              },\n            ]}\n            excludableValues={['none']}\n          />\n        )}\n      />\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          <WizardButtons\n            leftLabel={t('questionary:nextButton')}\n            leftHandler={handleSubmit(onSubmit)}\n            leftDisabled={!isValid}\n            invert\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step2d);\n","export { default } from './Step2d';\n"],"sourceRoot":""}