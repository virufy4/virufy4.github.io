{"version":3,"sources":["../node_modules/little-state-machine/dist/little-state-machine.es.js","hooks/useCustomProgressBarSteps.ts","containers/SubmitSteps/Questionary/Step1e/Step1e.tsx"],"names":["getBrowserStoreData","storageType","storeName","sessionStorageData","getItem","JSON","parse","undefined","_a","storeFactory","name","store","set","value","get","getName","isUndefined","val","setUpDevTools","isDevMode","getStore","window","STATE_MACHINE_DEBUG","setItem","STATE_MACHINE_RESET","clear","STATE_MACHINE_GET_STORE","STATE_MACHINE_SAVE_TO","localStorage","stringify","STATE_MACHINE_LOAD","data","StateMachineContext","createContext","updateStore","payload","transformStore","transform","externalStoreName","externalStoreData","currentStoreData","getSyncStoreData","defaultStoreData","options","syncStoreOption","syncStores","Array","isArray","forEach","option","Object","entries","key","values","browserStore","assign","setStore","isClient","sessionStorage","length","toString","removeItem","middleWaresArray","setStorageType","type","createStore","middleWares","methods","process","StateMachineProvider","props","useState","globalState","useMemo","createElement","Provider","actionTemplate","callback","result","shouldReRenderApp","pipeData","reduce","currentValue","currentFunction","useStateMachine","updateStoreFunction","useContext","keys","actions","previous","useCallback","action","p","state","useCustomProgressBarSteps","storeKey","metadata","updateAction","customSteps","steps","total","current","antigenTaken","typeCovidFlu","selected","includes","PCRTaken","fluTaken","customCurrentStepPCR","schemaWithoutPatient","Yup","covidTimes","required","lastTimeCovidMonths","notRequired","defined","React","memo","previousStep","nextStep","otherSteps","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setSubtitle","setType","history","useHistory","t","useTranslation","patientId","getPatientId","country","getCountry","activeStep","setActiveStep","useForm","mode","defaultValues","context","resolver","yupResolver","control","handleSubmit","formState","errors","isValid","handleDoBack","push","goBack","useEffect","scrollToTop","onSubmit","a","fluTakenStep","currentStep","totalSteps","progressBar","extraSpace","first","defaultValue","render","onChange","placeholder","autoComplete","message","leftLabel","leftHandler","leftDisabled","invert"],"mappings":"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","file":"static/js/77.f3ab976d.chunk.js","sourcesContent":["import { createContext, useState, useMemo, createElement, useContext, useCallback } from 'react';\n\nconst STORE_DEFAULT_NAME = '__STATE_MACHINE__';\r\nconst STORE_ACTION_NAME = '__STATE_MACHINE_ACTION_NAME__';\r\nconst STATE_MACHINE_DEBUG_NAME = '___STATE_MACHINE_DEBUG__';\n\nvar getBrowserStoreData = (storageType, storeName) => {\r\n    const sessionStorageData = storageType.getItem(storeName);\r\n    try {\r\n        return sessionStorageData ? JSON.parse(sessionStorageData) : undefined;\r\n    }\r\n    catch (_a) {\r\n        return undefined;\r\n    }\r\n};\n\nfunction storeFactory(storageType, name) {\r\n    const storeName = name || STORE_DEFAULT_NAME;\r\n    let store = getBrowserStoreData(storageType, storeName);\r\n    const getName = () => storeName;\r\n    const set = (value) => {\r\n        store = value;\r\n    };\r\n    const get = () => store;\r\n    return {\r\n        set,\r\n        get,\r\n        getName,\r\n    };\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nfunction setUpDevTools(isDevMode, storageType, getName, getStore) {\r\n    if (typeof window === 'undefined' || !isDevMode)\r\n        return;\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_DEBUG = (value) => storageType.setItem(STATE_MACHINE_DEBUG_NAME, value);\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_RESET = () => storageType.clear();\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_GET_STORE = () => storageType.getItem(getName());\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_SAVE_TO = name => window.localStorage.setItem(name, JSON.stringify(getStore()));\r\n    // @ts-ignore\r\n    window.STATE_MACHINE_LOAD = ({ storeName, data, }) => storageType.setItem(getName() || STATE_MACHINE_DEBUG_NAME, data || window.localStorage.getItem(storeName) || '');\r\n}\n\nvar StateMachineContext = createContext({\r\n    store: {},\r\n    updateStore: (payload) => payload,\r\n});\n\nvar transformStore = ({ transform, externalStoreName, storageType, store, }) => transform({\r\n    externalStoreData: getBrowserStoreData(storageType, externalStoreName),\r\n    currentStoreData: store,\r\n});\n\nfunction getSyncStoreData(defaultStoreData, options, storageType) {\r\n    let store = defaultStoreData;\r\n    const syncStoreOption = options.syncStores;\r\n    if (!syncStoreOption)\r\n        return store;\r\n    try {\r\n        if (Array.isArray(syncStoreOption)) {\r\n            syncStoreOption.forEach(option => {\r\n                store = transformStore({\r\n                    transform: option.transform,\r\n                    externalStoreName: option.externalStoreName,\r\n                    storageType,\r\n                    store,\r\n                });\r\n            });\r\n        }\r\n        else if (syncStoreOption.externalStoreName &&\r\n            typeof syncStoreOption.transform === 'function' &&\r\n            typeof syncStoreOption.externalStoreName === 'string') {\r\n            return transformStore({\r\n                transform: syncStoreOption.transform,\r\n                externalStoreName: syncStoreOption.externalStoreName,\r\n                storageType,\r\n                store,\r\n            });\r\n        }\r\n        else {\r\n            Object.entries(syncStoreOption).forEach(([key, values]) => {\r\n                const browserStore = getBrowserStoreData(storageType, key);\r\n                values.forEach((value) => {\r\n                    store = Object.assign(Object.assign({}, store), {\r\n                        [value]: Object.assign(Object.assign({}, store[value]), browserStore[value]),\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    catch (_a) {\r\n        return store;\r\n    }\r\n    return store;\r\n}\n\nconst isClient = typeof window !== 'undefined';\r\nconst isDevMode = process.env.NODE_ENV !== 'production';\r\nlet storageType = isClient\r\n    ? window.sessionStorage\r\n    : {\r\n        getItem: payload => payload,\r\n        setItem: (payload) => payload,\r\n        clear: () => { },\r\n        length: 0,\r\n        key: (payload) => payload.toString(),\r\n        removeItem: () => { },\r\n    };\r\nlet getStore;\r\nlet setStore;\r\nlet getName;\r\nlet middleWaresArray = [];\r\nconst middleWare = (data = '') => {\r\n    if (data && isClient) {\r\n        // @ts-ignore\r\n        window[STORE_ACTION_NAME] = data;\r\n    }\r\n    return data;\r\n};\r\nfunction setStorageType(type) {\r\n    storageType = type;\r\n}\r\nfunction createStore(defaultStoreData, options = {\r\n    name: STORE_DEFAULT_NAME,\r\n    middleWares: [],\r\n    syncStores: undefined,\r\n}) {\r\n    const storeName = options ? options.name : STORE_DEFAULT_NAME;\r\n    const methods = storeFactory(storageType, storeName);\r\n    if (isDevMode && isClient) {\r\n        // @ts-ignore\r\n        window['STATE_MACHINE_NAME'] = storeName;\r\n    }\r\n    getName = methods.getName;\r\n    getStore = methods.get;\r\n    setStore = methods.set;\r\n    middleWaresArray = options.middleWares;\r\n    setUpDevTools(isDevMode, storageType, getName, getStore);\r\n    setStore(getSyncStoreData(getStore() || defaultStoreData, options, storageType));\r\n}\r\nfunction StateMachineProvider(props) {\r\n    const [globalState, updateStore] = useState(getStore());\r\n    const value = useMemo(() => ({\r\n        store: globalState,\r\n        updateStore,\r\n    }), [globalState]);\r\n    // @ts-ignore\r\n    return createElement(StateMachineContext.Provider, Object.assign({ value: value }, props));\r\n}\r\nconst actionTemplate = ({ options, callback, updateStore, }) => (payload) => {\r\n    let result;\r\n    const debugName = callback ? callback.name : '';\r\n    if (isDevMode) {\r\n        middleWare(debugName);\r\n    }\r\n    if (callback) {\r\n        result = callback(getStore(), payload);\r\n    }\r\n    setStore(isUndefined(result) ? getStore() : result);\r\n    storageType.setItem(getName(), JSON.stringify(getStore()));\r\n    if (isUndefined(options) ||\r\n        (options && options.shouldReRenderApp !== false)) {\r\n        let pipeData = getStore();\r\n        if (Array.isArray(middleWaresArray) && middleWaresArray.length) {\r\n            pipeData = middleWaresArray.reduce((currentValue, currentFunction) => currentFunction(currentValue) || currentValue, pipeData);\r\n        }\r\n        updateStore(pipeData);\r\n    }\r\n};\r\nfunction useStateMachine(updateStoreFunction, options) {\r\n    const { store: globalState, updateStore } = useContext(StateMachineContext);\r\n    if (updateStoreFunction && Object.keys(updateStoreFunction).length) {\r\n        return {\r\n            actions: Object.entries(updateStoreFunction).reduce((previous, [key, callback]) => (Object.assign(Object.assign({}, previous), { [key]: useCallback(actionTemplate({\r\n                    options,\r\n                    callback,\r\n                    updateStore,\r\n                }), []) })), {}),\r\n            action: p => p,\r\n            state: globalState,\r\n        };\r\n    }\r\n    return {\r\n        actions: {},\r\n        action: useCallback(updateStoreFunction\r\n            ? actionTemplate({\r\n                options,\r\n                callback: updateStoreFunction,\r\n                updateStore,\r\n            })\r\n            : () => { }, []),\r\n        state: globalState,\r\n    };\r\n}\n\nexport { StateMachineContext, StateMachineProvider, createStore, setStorageType, useStateMachine };\n","import { useMemo } from 'react';\nimport { useStateMachine } from 'little-state-machine';\n\n// Utils\nimport { updateAction } from 'utils/wizard';\n\nconst useCustomProgressBarSteps = (storeKey: any, metadata: CommonJSON<any> | undefined) => {\n  // Hooks\n  const { state } = useStateMachine(updateAction(storeKey));\n\n  // Memos\n  const customSteps = useMemo(() => {\n    const steps = {\n      total: metadata?.total,\n      current: metadata?.current,\n    };\n    if (state[storeKey]) {\n      const antigenTaken = state['submit-steps']?.typeCovidFlu?.selected.includes('antigenTaken');\n      const PCRTaken = state['submit-steps']?.typeCovidFlu?.selected.includes('PCRTaken');\n      const fluTaken = state['submit-steps']?.typeCovidFlu?.selected.includes('fluTaken');\n      const antigenTakenScreens = 1;\n      const PCRTakenScreens = 2;\n      const fluTakenScreens = 2;\n\n      switch (true) {\n        case antigenTaken && !PCRTaken && !fluTaken:\n          steps.total = metadata?.total - PCRTakenScreens - fluTakenScreens;\n          steps.current = metadata?.current - PCRTakenScreens - fluTakenScreens;\n          break;\n\n        case (antigenTaken && PCRTaken && !fluTaken) || (antigenTaken && !PCRTaken && fluTaken):\n          steps.total = metadata?.total - (PCRTakenScreens || fluTakenScreens);\n          steps.current = metadata?.current - (PCRTakenScreens || fluTakenScreens);\n          break;\n\n        case !antigenTaken && !PCRTaken && !fluTaken:\n          steps.total = metadata?.total - antigenTakenScreens - PCRTakenScreens - fluTakenScreens;\n          steps.current = metadata?.current - antigenTakenScreens - PCRTakenScreens - fluTakenScreens;\n          break;\n\n        case !antigenTaken && PCRTaken && fluTaken:\n          steps.total = metadata?.total - antigenTakenScreens;\n          steps.current = metadata?.current - antigenTakenScreens;\n          break;\n\n        case (!antigenTaken && !PCRTaken && fluTaken)\n        || (!antigenTaken && PCRTaken && !fluTaken):\n          steps.total = metadata?.total - antigenTakenScreens - (fluTakenScreens || PCRTakenScreens);\n          steps.current = metadata?.current - antigenTakenScreens - (fluTakenScreens || PCRTakenScreens);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return steps;\n  }, [state, metadata, storeKey]);\n\n  // only for PCR test screens\n  const customCurrentStepPCR = useMemo(() => {\n    if (state[storeKey]) {\n      const PCRTaken = state['submit-steps'].typeCovidFlu?.selected.includes('PCRTaken');\n      const antigenTaken = state['submit-steps'].typeCovidFlu?.selected.includes('antigenTaken');\n      const fluTaken = state['submit-steps'].typeCovidFlu?.selected.includes('fluTaken');\n\n      if ((PCRTaken && !antigenTaken && !fluTaken) || (PCRTaken && antigenTaken && !fluTaken)) {\n        return customSteps.current + 2;\n      }\n      return customSteps.current;\n    }\n\n    return 0;\n  }, [state, storeKey, customSteps]);\n\n  return {\n    customSteps,\n    customCurrentStepPCR,\n  };\n};\n\nexport default useCustomProgressBarSteps;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Helper\nimport { getPatientId, getCountry } from 'helper/stepsDefinitions';\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Utils\nimport { updateAction } from 'utils/wizard';\n\n// Hooks\nimport useHeaderContext from 'hooks/useHeaderContext';\nimport useCustomProgressBarSteps from 'hooks/useCustomProgressBarSteps';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport ProgressIndicator from 'components/ProgressIndicator';\n\n// Styles\nimport {\n  QuestionText, MainContainer, QuestionAllApply, QuestionInput,\n} from '../style';\n\nconst schemaWithoutPatient = Yup.object({\n  covidTimes: Yup.string().required(),\n  lastTimeCovidMonths: Yup.string().notRequired(),\n}).defined();\n\ntype Step1eType = Yup.InferType<typeof schemaWithoutPatient>;\n\nconst Step1e = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n  otherSteps,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const {\n    setDoGoBack, setTitle, setSubtitle, setType,\n  } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n  const patientId = getPatientId();\n  const country = getCountry();\n  const { customSteps, customCurrentStepPCR } = useCustomProgressBarSteps(storeKey, metadata);\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    context: {\n      country,\n    },\n    resolver: yupResolver(schemaWithoutPatient),\n  });\n  const { errors, isValid } = formState;\n\n  // Callbacks\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  // Effects\n  useEffect(() => {\n    scrollToTop();\n    if (patientId) {\n      setTitle('');\n      setType('tertiary');\n    } else {\n      setTitle(t('questionary:covidTimesTitle'));\n      setType('primary');\n    }\n    setSubtitle('');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, setSubtitle, patientId, t]);\n\n  // Handlers\n  const onSubmit = async (values: Step1eType) => {\n    if (values) {\n      action(values);\n      const fluTaken = state['submit-steps'].typeCovidFlu?.selected.includes('fluTaken');\n      if (fluTaken && otherSteps) {\n        setActiveStep(false);\n        history.push(otherSteps.fluTakenStep);\n      } else if (nextStep) {\n        setActiveStep(false);\n        history.push(nextStep);\n      }\n    }\n  };\n\n  return (\n    <MainContainer>\n      <ProgressIndicator\n        currentStep={customCurrentStepPCR}\n        totalSteps={customSteps.total}\n        progressBar\n      />\n      <QuestionText extraSpace first>\n        {t('questionary:covidTimes')}\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"covidTimes\"\n        defaultValue=\"\"\n        render={({ onChange, value, name }) => (\n          <QuestionInput\n            name={name}\n            value={value}\n            onChange={onChange}\n            type=\"number\"\n            placeholder={t('questionary:covidTimesPlaceholder')}\n            autoComplete=\"Off\"\n          />\n        )}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"covidTimes\"\n        render={({ message }) => (\n          <p>{message}</p>\n        )}\n      />\n\n      <QuestionText extraSpace>\n        {t('questionary:lastTimeCovidMonths')}\n        <QuestionAllApply>{t('questionary:lastTimeCovidMonthsCaption')}</QuestionAllApply>\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"lastTimeCovidMonths\"\n        defaultValue=\"\"\n        render={({ onChange, value, name }) => (\n          <QuestionInput\n            name={name}\n            value={value}\n            onChange={onChange}\n            type=\"number\"\n            placeholder={t('questionary:lastTimeCovidMonthsPlaceholder')}\n            autoComplete=\"Off\"\n          />\n        )}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"lastTimeCovidMonths\"\n        render={({ message }) => (\n          <p>{message}</p>\n        )}\n      />\n\n      {/* Bottom Buttons */}\n      {activeStep && (\n        <Portal>\n          <WizardButtons\n            leftLabel={t('questionary:nextButton')}\n            leftHandler={handleSubmit(onSubmit)}\n            leftDisabled={!isValid}\n            invert\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step1e);\n"],"sourceRoot":""}