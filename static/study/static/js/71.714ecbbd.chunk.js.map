{"version":3,"sources":["components/OptionList/style.ts","components/OptionList/OptionList.tsx","hooks/useCustomProgressBarSteps.ts","components/Recaptcha/style.ts","components/Recaptcha/Recaptcha.tsx","containers/SubmitSteps/Questionary/Step4a/Step4a.tsx"],"names":["OptionListItem","styled","button","props","theme","colors","darkBlack","isSelected","purple_10","mercury","breakpoints","tablet","OptionListItemLabel","span","OptionListAddOtherButton","OptionListCheck","div","checkbox","purple","OptionListInputContainer","OptionListInput","input","green_25","darkBlack_04","midDarkGray","defaultValue","selected","other","OptionList","value","items","excludableValues","singleSelection","isCheckbox","onChange","allowAddOther","addOtherLabel","enableOther","otherPlaceholder","useState","showOtherInput","setShowOtherInput","useEffect","otherChangeHandler","newOtherVaue","newSelected","some","item","includes","map","index","key","lastItem","length","onClick","selectedItem","newOtherValue","indexOf","slice","undefined","selectItem","label","placeholder","e","target","defaultProps","React","memo","useCustomProgressBarSteps","storeKey","metadata","state","useStateMachine","updateAction","customSteps","useMemo","steps","total","current","antigenTaken","typeCovidFlu","PCRTaken","fluTaken","customCurrentStepPCR","RecaptchaContainer","Recaptcha","setRecaptchaAvailable","i18n","useTranslation","sitekey","process","onErrored","Sentry","hl","language","schema","Yup","currentSymptoms","required","defined","previousStep","nextStep","otherSteps","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","history","useHistory","t","action","country","getCountry","activeStep","setActiveStep","submitError","setSubmitError","captchaValue","setCaptchaValue","recaptchaAvailable","useForm","mode","defaultValues","resolver","yupResolver","control","handleSubmit","formState","watch","errors","isSubmitting","isValid","watchSymptoms","isShortQuestionary","isFinalStep","renderCaptcha","handleDoBack","useCallback","push","goBack","scrollToTop","onSubmit","values","a","hasSymptom","covidSymptomsStep","currentSymptomsOptions","currentStep","totalSteps","progressBar","extraSpace","first","i18nKey","name","render","v","message","leftLabel","leftDisabled","leftHandler","invert"],"mappings":"67EAEO,IAAMA,EAAiBC,UAAOC,OAAV,KAKhB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,aAOjB,SAAAH,GAAK,OAAKA,EAAMI,WAAaJ,EAAMC,MAAMC,OAAOG,UAAYL,EAAMC,MAAMC,OAAOI,WAC9E,SAAAN,GAAK,OAAIA,EAAMC,MAAMM,YAAYC,UAM3CC,EAAsBX,UAAOY,KAAV,KAGT,SAAAV,GAAK,OAAIA,EAAMC,MAAMM,YAAYC,UAO3CG,EAA2Bb,kBAAOD,EAAPC,CAAH,KAIxBc,EAAkBd,UAAOe,IAAV,KAGT,SAAAb,GAAK,OAAKA,EAAMc,SAAW,MAAQ,SAChC,SAAAd,GAAK,OAAKA,EAAMI,WAAaJ,EAAMC,MAAMC,OAAOa,OAAS,aAOxD,SAAAf,GAAK,OAAIA,EAAMC,MAAMM,YAAYC,UAO5C,SAAAR,GAAK,OAAKA,EAAMc,SAAW,KAAO,SACnC,SAAAd,GAAK,OAAKA,EAAMc,SAAW,KAAO,SAC/B,SAAAd,GAAK,OAAKA,EAAMc,SAAW,OAAS,UACrC,SAAAd,GAAK,OAAKA,EAAMc,SAAW,OAAS,UAC5B,SAAAd,GAAK,OAAKA,EAAMc,SAAW,KAAO,SAC/B,SAAAd,GAAK,OAAKA,EAAMc,SAAWd,EAAMC,MAAMC,OAAOG,UAAYL,EAAMC,MAAMC,OAAOa,UACtF,SAAAf,GAAK,OAAKA,EAAMI,WAAa,QAAU,UAOzCY,EAA2BlB,UAAOe,IAAV,KAMd,SAAAb,GAAK,OAAIA,EAAMC,MAAMM,YAAYC,UAK3CS,EAAkBnB,UAAOoB,MAAV,KAGjB,SAAAlB,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,aAIjB,SAAAH,GAAK,OAAKA,EAAMI,WAAaJ,EAAMC,MAAMC,OAAOiB,SAAW,iBAC7D,SAAAnB,GAAK,OAAIA,EAAMC,MAAMC,OAAOkB,gBACzB,SAAApB,GAAK,OAAIA,EAAMC,MAAMC,OAAOkB,gBAEtC,SAAApB,GAAK,OAAIA,EAAMC,MAAMC,OAAOmB,eAElB,SAAArB,GAAK,OAAIA,EAAMC,MAAMM,YAAYC,UC3DlDc,EAAe,CAAEC,SAAU,GAAIC,MAAO,IACtCC,EAAa,SAAC,GAGI,IAAD,IAFrBC,aAEqB,MAFbJ,EAEa,EAFCK,EAED,EAFCA,MAAOC,EAER,EAFQA,iBAAkBC,EAE1B,EAF0BA,gBAAiBC,EAE3C,EAF2CA,WAChEC,EACqB,EADrBA,SAAUC,EACW,EADXA,cAAeC,EACJ,EADIA,cAAeC,EACnB,EADmBA,YAAaC,EAChC,EADgCA,iBAChC,EACuBC,oBAAS,GADhC,mBACdC,EADc,KACEC,EADF,KAGrBC,qBAAU,WACRD,IAAoBJ,MAAgB,OAACR,QAAD,IAACA,OAAD,EAACA,EAAOF,UAC3C,CAACE,EAAOQ,IAEX,IA8BMM,EAAqB,SAACC,GAA0B,IAEhDC,EADInB,EAAaG,EAAbH,SAINmB,EADEb,GAAoBD,GAAoBL,EAASoB,MAAK,SAAAC,GAAI,OAAIhB,EAAiBiB,SAASD,MAC5E,GAEArB,EAGZQ,GACFA,EAAS,CACPR,SAAUmB,EACVlB,MAAOiB,IAINA,GACHH,GAAkB,IAQtB,OACE,oCACGX,EAAMmB,KAAI,SAACF,EAAMG,GAAW,IAAD,EACpB3C,EAAU,OAAGsB,QAAH,IAAGA,GAAH,UAAGA,EAAOH,gBAAV,aAAG,EAAiBsB,SAASD,EAAKlB,OAClD,OACE,kBAAC7B,EAAD,CACEmD,IAAKJ,EAAKlB,MACVuB,SAAUtB,EAAMuB,SAAWH,EAAQ,IAAMf,IAAkBE,EAC3DiB,QAAS,kBAhEA,SAACC,GAAuC,IAErDV,EACAW,EAFI9B,EAAoBG,EAApBH,SAAUC,EAAUE,EAAVF,MAIZuB,EAAQxB,EAAS+B,QAAQF,EAAa1B,OAExCqB,GAAS,GACXL,EAAW,sBAAOnB,EAASgC,MAAM,EAAGR,IAAzB,YAAoCxB,EAASgC,MAAMR,EAAQ,KACtEM,EAAgB7B,GACPK,IAGgB,OAAhBD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBiB,SAASO,EAAa1B,SAC/CE,GAAoBL,EAASoB,MAAK,SAAAC,GAAI,OAAIhB,EAAiBiB,SAASD,OAHtEF,EAAc,CAACU,EAAa1B,OAC5B2B,OAAgBG,IAMhBd,EAAW,sBAAOnB,GAAP,CAAiB6B,EAAa1B,QACzC2B,EAAgB7B,GAGdO,GACFA,EAAS,CACPR,SAAUmB,EACVlB,MAAO6B,IAuCYI,CAAWb,IAC1BxC,WAAYA,GAEZ,kBAACK,EAAD,KACGmC,EAAKc,OAER,kBAAC9C,EAAD,CAAiBR,WAAYA,EAAYU,SAAUgB,QAIxDE,IAAkBK,GACnB,kBAAC1B,EAAD,CAA0BwC,QAvBD,WAC3Bb,GAAkB,IAsByCW,UAAQ,GAC9DhB,GAGFI,GACC,kBAACrB,EAAD,KACE,kBAACC,EAAD,CACE0C,YAAaxB,EACbT,OAAY,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOF,QAAS,GACvBpB,cAAa,OAAEsB,QAAF,IAAEA,OAAF,EAAEA,EAAOF,OACtBO,SAAU,SAAA6B,GAAC,OAAIpB,EAAmBoB,EAAEC,OAAOnC,aAE3C,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOF,QACT,kBAACZ,EAAD,SAQZa,EAAWqC,aAAe,CACxBpC,MAAOJ,EACPM,sBAAkB4B,EAClB3B,iBAAiB,EACjBE,cAAUyB,EACVxB,eAAe,EACfC,cAAe,GACfC,aAAa,EACbC,iBAAkB,IAGL4B,UAAMC,KAAKvC,I,iCCrJ1B,6BAiFewC,IA3EmB,SAACC,EAAeC,GAA0C,IAElFC,EAAUC,YAAgBC,YAAaJ,IAAvCE,MAGFG,EAAcC,mBAAQ,WAC1B,IAAMC,EAAQ,CACZC,MAAK,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAUO,MACjBC,QAAO,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAUQ,SAErB,GAAIP,EAAMF,GAAW,CAAC,IAAD,YACbU,EAAY,UAAGR,EAAM,uBAAT,iBAAG,EAAuBS,oBAA1B,aAAG,EAAqCtD,SAASsB,SAAS,gBACtEiC,EAAQ,UAAGV,EAAM,uBAAT,iBAAG,EAAuBS,oBAA1B,aAAG,EAAqCtD,SAASsB,SAAS,YAClEkC,EAAQ,UAAGX,EAAM,uBAAT,iBAAG,EAAuBS,oBAA1B,aAAG,EAAqCtD,SAASsB,SAAS,YAKxE,QAAQ,GACN,KAAK+B,IAAiBE,IAAaC,EACjCN,EAAMC,OAAgB,OAARP,QAAQ,IAARA,OAAA,EAAAA,EAAUO,OALJ,EACA,EAKpBD,EAAME,SAAkB,OAARR,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,SANN,EACA,EAMpB,MAEF,KAAMC,GAAgBE,IAAaC,GAAcH,IAAiBE,GAAYC,EAC5EN,EAAMC,OAAgB,OAARP,QAAQ,IAARA,OAAA,EAAAA,EAAUO,OAVJ,EAWpBD,EAAME,SAAkB,OAARR,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,SAXN,EAYpB,MAEF,KAAMC,IAAiBE,IAAaC,EAClCN,EAAMC,OAAgB,OAARP,QAAQ,IAARA,OAAA,EAAAA,EAAUO,OAhBA,EACJ,EACA,EAepBD,EAAME,SAAkB,OAARR,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,SAjBF,EACJ,EACA,EAgBpB,MAEF,KAAMC,GAAgBE,GAAYC,EAChCN,EAAMC,OAAgB,OAARP,QAAQ,IAARA,OAAA,EAAAA,EAAUO,OArBA,EAsBxBD,EAAME,SAAkB,OAARR,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,SAtBF,EAuBxB,MAEF,KAAOC,IAAiBE,GAAYC,IAC/BH,GAAgBE,IAAaC,EAChCN,EAAMC,OAAgB,OAARP,QAAQ,IAARA,OAAA,EAAAA,EAAUO,OA3BA,EAEJ,EA0BpBD,EAAME,SAAkB,OAARR,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,SA5BF,EAEJ,GAkC1B,OAAOF,IACN,CAACL,EAAOD,EAAUD,IAGfc,EAAuBR,mBAAQ,WACnC,GAAIJ,EAAMF,GAAW,CAAC,IAAD,MACbY,EAAQ,UAAGV,EAAM,gBAAgBS,oBAAzB,aAAG,EAAoCtD,SAASsB,SAAS,YACjE+B,EAAY,UAAGR,EAAM,gBAAgBS,oBAAzB,aAAG,EAAoCtD,SAASsB,SAAS,gBACrEkC,EAAQ,UAAGX,EAAM,gBAAgBS,oBAAzB,aAAG,EAAoCtD,SAASsB,SAAS,YAEvE,OAAKiC,IAAaF,IAAiBG,GAAcD,GAAYF,IAAiBG,EACrER,EAAYI,QAAU,EAExBJ,EAAYI,QAGrB,OAAO,IACN,CAACP,EAAOF,EAAUK,IAErB,MAAO,CACLA,cACAS,0B,yPC3EG,IAAMC,E,OAAqBnF,QAAOe,IAAV,KCgChBqE,EAjBG,SAAC,GAAyD,IAAvDnD,EAAsD,EAAtDA,SAAUoD,EAA4C,EAA5CA,sBACrBC,EAASC,cAATD,KAIR,OACE,kBAACH,EAAD,KACE,kBAAC,IAAD,CACEK,QAASC,2CACTxD,SAAUA,EACVyD,UAAW,WAAQL,GAAsB,GAAQM,IAAwB,uBACzEC,GAAIN,EAAKO,c,oRCQXC,EAASC,SAAW,CACxBC,gBAAiBD,SAAW,CAC1BtE,SAAUsE,UAAYE,eAEvBC,UAyUYjC,cAAMC,MArUN,SAAC,GAMS,IALvBiC,EAKsB,EALtBA,aACAC,EAIsB,EAJtBA,SACAhC,EAGsB,EAHtBA,SACAiC,EAEsB,EAFtBA,WACAhC,EACsB,EADtBA,SAGQiC,EAAWC,IAAU,CAC3BC,OAAQC,UAAYA,SAASC,eAAe,oBADtCJ,OAFc,EAKqBK,cAAnCC,EALc,EAKdA,YAAaC,EALC,EAKDA,SAAUC,EALT,EAKSA,QACzBC,EAAUC,cACRC,EAAM1B,cAAN0B,EAPc,EAQI1C,YAAgBC,YAAaJ,IAA/CE,EARc,EAQdA,MAAO4C,EARO,EAQPA,OACTC,EAAUC,cACR3C,EAAgBN,YAA0BC,EAAUC,GAApDI,YAVc,EAacR,IAAM3B,UAAS,GAb7B,mBAaf+E,EAbe,KAaHC,EAbG,OAcgBrD,IAAM3B,SAAwB,MAd9C,mBAcfiF,EAde,KAcFC,EAdE,OAekBvD,IAAM3B,SAAwB,MAfhD,mBAefmF,EAfe,KAeDC,EAfC,QAgB8BzD,IAAM3B,UAAS,GAhB7C,qBAgBfqF,GAhBe,MAgBKtC,GAhBL,SAqBlBuC,YAAQ,CACVC,KAAM,WACNC,cAAa,OAAExD,QAAF,IAAEA,OAAF,EAAEA,EAAQF,GACvB2D,SAAUC,YAAYlC,KAJtBmC,GApBoB,GAoBpBA,QAASC,GApBW,GAoBXA,aAAcC,GApBH,GAoBGA,UAAWC,GApBd,GAoBcA,MAM5BC,GAAkCF,GAAlCE,OAAQC,GAA0BH,GAA1BG,aAAcC,GAAYJ,GAAZI,QAE9B9F,qBAAU,WACHgF,GACHD,EAAe,QAEhB,CAACC,IAEJ,IAAMe,GAAgBJ,GAAM,mBACtBK,GAAkB,OAAGpE,QAAH,IAAGA,OAAH,EAAGA,EAAUoE,mBAE/BC,GAAczE,IAAMS,SAAQ,WAAO,IAAD,EACtC,SAAI+D,IAA2D,KAAtB,OAAbD,SAAa,IAAbA,QAAA,EAAAA,GAAe/G,SAAS2B,WAAzB,OAA0CoF,SAA1C,IAA0CA,IAA1C,UAA0CA,GAAe/G,gBAAzD,aAA0C,EAAyBoB,MAAK,SAACC,GAAD,MAA2B,SAATA,SAIpH,CAAC2F,GAAD,OAAqBD,SAArB,IAAqBA,QAArB,EAAqBA,GAAe/G,WAEjCkH,GAAgB1E,IAAMS,SAAQ,WAClC,OAAIgE,IAA4B,aAAZvB,EACdI,EAEA,oCACE,kBAAC,IAAD,CAAWtF,SAAUyF,EAAiBrC,sBAAuBA,KAC7D,kBAAC,wBAAD,KACGkC,IAKF,kBAAC,IAAD,CAAWtF,SAAUyF,EAAiBrC,sBAAuBA,KAE/D,OACN,CAACqD,GAAanB,EAAaJ,IAExByB,GAAe3E,IAAM4E,aAAY,WACrCvB,GAAc,GACVnB,EACFY,EAAQ+B,KAAK3C,GAEbY,EAAQgC,WAET,CAAChC,EAASZ,IAEb1D,qBAAU,WACRuG,cACAnC,EAAS,GAAD,OAAII,EAAE,gCACdH,EAAQ,WACRF,GAAY,kBAAMgC,QACjB,CAACA,GAAchC,EAAaC,EAAUC,EAASzC,EAAU4C,IAG5D,IAAMgC,GAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,0DACXD,EADW,iBAGXlD,EACGkD,EADHlD,gBAGFkB,EAAOgC,GAEHE,GAAa,EAGRnG,EAAQ,EAXJ,YAWOA,GAAK,UAAG+C,EAAgBvE,gBAAnB,aAAG,EAA0B2B,SAXzC,oBAY6B,SAApC4C,EAAgBvE,SAASwB,GAZlB,uBAaTmG,GAAa,EAbJ,4BAWiDnG,IAXjD,2BAkBTmG,IAAc/C,EAlBL,wBAmBXiB,GAAc,GACdP,EAAQ+B,KAAKzC,EAAWgD,mBApBb,2BAwBTjD,IACFkB,GAAc,GACdP,EAAQ+B,KAAK1C,IA1BF,4CAAH,sDAiDRkD,GAAyBrF,IAAMS,SAAQ,WAC3C,MAAgB,UAAZyC,EACK,CACL,CACEvF,MAAO,OACPgC,MAAOqD,EAAE,sCAEX,CACErF,MAAO,YACPgC,MAAOqD,EAAE,2CAEX,CACErF,MAAO,WACPgC,MAAOqD,EAAE,0CAEX,CACErF,MAAO,WACPgC,MAAOqD,EAAE,0CAEX,CACErF,MAAO,sBACPgC,MAAOqD,EAAE,qDAEX,CACErF,MAAO,YACPgC,MAAOqD,EAAE,2CAEX,CACErF,MAAO,sBACPgC,MAAOqD,EAAE,kDAEX,CACErF,MAAO,YACPgC,MAAOqD,EAAE,2CAEX,CACErF,MAAO,kBACPgC,MAAOqD,EAAE,iDAEX,CACErF,MAAO,aACPgC,MAAOqD,EAAE,4CAEX,CACErF,MAAO,iBACPgC,MAAOqD,EAAE,gDAEX,CACErF,MAAO,cACPgC,MAAOqD,EAAE,6CAEX,CACErF,MAAO,sBACPgC,MAAOqD,EAAE,qDAEX,CACErF,MAAO,eACPgC,MAAOqD,EAAE,8CAEX,CACErF,MAAO,WACPgC,MAAOqD,EAAE,0CAEX,CACErF,MAAO,UACPgC,MAAOqD,EAAE,yCAEX,CACErF,MAAO,OACPgC,MAAOqD,EAAE,sCAEX,CACErF,MAAO,QACPgC,MAAOqD,EAAE,wCAIR,CACL,CACErF,MAAO,OACPgC,MAAOqD,EAAE,sCAEX,CACErF,MAAO,YACPgC,MAAOqD,EAAE,2CAEX,CACErF,MAAO,WACPgC,MAAOqD,EAAE,0CAEX,CACErF,MAAO,WACPgC,MAAOqD,EAAE,0CAEX,CACErF,MAAO,sBACPgC,MAAOqD,EAAE,qDAEX,CACErF,MAAO,YACPgC,MAAOqD,EAAE,2CAEX,CACErF,MAAO,sBACPgC,MAAOqD,EAAE,kDAEX,CACErF,MAAO,kBACPgC,MAAOqD,EAAE,4CAEX,CACErF,MAAO,YACPgC,MAAOqD,EAAE,2CAEX,CACErF,MAAO,kBACPgC,MAAOqD,EAAE,iDAEX,CACErF,MAAO,aACPgC,MAAOqD,EAAE,4CAEX,CACErF,MAAO,iBACPgC,MAAOqD,EAAE,gDAEX,CACErF,MAAO,sBACPgC,MAAOqD,EAAE,qDAEX,CACErF,MAAO,WACPgC,MAAOqD,EAAE,0CAEX,CACErF,MAAO,QACPgC,MAAOqD,EAAE,0CAGZ,CAACE,EAASF,IAEb,OACE,kBAAC,gBAAD,KACE,kBAAC,IAAD,CACEsC,YAAa9E,EAAYI,QACzB2E,WAAY/E,EAAYG,MACxB6E,aAAW,IAEb,kBAAC,eAAD,CAAcC,YAAU,EAACC,OAAK,GAC5B,kBAAC,IAAD,CAAOC,QAAQ,iCACb,uFAEF,kBAAC,mBAAD,KAAmB3C,EAAE,8BAEvB,kBAAC,IAAD,CACEgB,QAASA,GACT4B,KAAK,kBACLrI,aAAc,CAAEC,SAAU,GAAIC,MAAO,IACrCoI,OAAQ,gBAAG7H,EAAH,EAAGA,SAAUL,EAAb,EAAaA,MAAb,OACN,kBAAC,IAAD,CACEI,YAAU,EACVJ,MAAOA,EACPK,SAAU,SAAA8H,GAAC,OAAI9H,EAAS8H,IACxBlI,MAAOyH,GACPxH,iBAAkB,CAAC,aAIzB,kBAAC,IAAD,CACEuG,OAAQA,GACRwB,KAAK,kBACLC,OAAQ,gBAAGE,EAAH,EAAGA,QAAH,OACN,2BAAIA,MAKP3C,GACC,kBAACf,EAAD,KACGqC,GACD,kBAAC,IAAD,CACEsB,UA7LGhD,EAFPyB,GACEJ,GACO,yBAEF,4BAEF,0BA0LD4B,aAAexB,IAA4B,aAAZvB,EAA4BmB,IAAiBX,KAAuBF,GAAkBc,GACrH4B,YAA2BjC,GAAdQ,GAzMmB,WACpCtC,IACFkB,GAAc,GACdP,EAAQ+B,KAAK1C,KAsMmF6C,IAC1FmB,QAAM","file":"static/js/71.714ecbbd.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const OptionListItem = styled.button<{lastItem: boolean; isSelected?: boolean}>`\n  width: 100%;\n  height: 50px;\n  position: relative;\n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  color: ${props => props.theme.colors.darkBlack};\n  font-size: 14px;\n  text-align: left;\n  padding: 0 20px;\n  margin: 3px auto;\n  border: none;\n  border-radius: 10px;\n  background-color: ${props => (props.isSelected ? props.theme.colors.purple_10 : props.theme.colors.mercury)};\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n    text-align: left;\n  }\n`;\n\nexport const OptionListItemLabel = styled.span`\n  display: block;\n  width: 250px;\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    width: auto;\n    text-align: left;\n    margin: auto;\n  }\n`;\n\nexport const OptionListAddOtherButton = styled(OptionListItem)`\n  font-weight: bold;\n`;\n\nexport const OptionListCheck = styled.div<{ isSelected?: boolean; checkbox?: boolean }>`\n  width: 22px;\n  height: 22px; \n  border-radius: ${props => (props.checkbox ? '10%' : '50%')};\n  border: 3px solid ${props => (props.isSelected ? props.theme.colors.purple : '#C1C1C1')};\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin-top: 14px;\n  margin-right: 29px;\n  \n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    margin-right: 31px;\n  }\n\n  &:after{\n    content: '';\n    position: absolute; \n    left: ${props => (props.checkbox ? '0%' : '2px')}; \n    top: ${props => (props.checkbox ? '0%' : '2px')};\n    height: ${props => (props.checkbox ? '16px' : '12px')};\n    width: ${props => (props.checkbox ? '16px' : '12px')};\n    border-radius: ${props => (props.checkbox ? '0%' : '50%')};\n    background-color: ${props => (props.checkbox ? props.theme.colors.purple_10 : props.theme.colors.purple)}; \n    display: ${props => (props.isSelected ? 'block' : 'none')};\n    background-image: url(\"data:image/svg+xml,%3Csvg width='12' height='8' viewBox='0 0 16 12' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M14.0005 2L6.00018 10L2 6.00018' stroke='%233578DE' stroke-width='2.18192' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E\");\n    background-repeat: no-repeat;\n    background-size: 16px 16px;\n  }\n`;\n\nexport const OptionListInputContainer = styled.div`\n  position: relative;\n  display: inline-block;\n  width: calc(100% + 40px);\n  margin: 0 -20px;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n  }\n`;\n\nexport const OptionListInput = styled.input<{isSelected: boolean}>`\n  height: 50px; \n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  color: ${props => props.theme.colors.darkBlack};\n  width: 100%;\n  padding: 0 20px;\n  border: none;\n  background-color: ${props => (props.isSelected ? props.theme.colors.green_25 : 'transparent')};\n  border-top: 1px ${props => props.theme.colors.darkBlack_04} solid;\n  border-bottom: 1px ${props => props.theme.colors.darkBlack_04} solid;\n  ::placeholder {\n    color: ${props => props.theme.colors.midDarkGray};\n  }\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    text-align: center;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport {\n  OptionListAddOtherButton,\n  OptionListCheck, OptionListInput,\n  OptionListInputContainer,\n  OptionListItem,\n  OptionListItemLabel,\n} from './style';\n\ninterface OptionListItemProps {\n  value: string;\n  label: string;\n  excludable?: boolean;\n}\ninterface OptionListValue {\n  selected: string[];\n  other?: string;\n}\n\ninterface OptionListProps {\n  value?: OptionListValue;\n  items: OptionListItemProps[];\n  excludableValues?: string[];\n  singleSelection?: boolean;\n  onChange?: (value: OptionListValue) => void;\n  allowAddOther?: boolean;\n  addOtherLabel?: string;\n  enableOther?: boolean;\n  otherPlaceholder?: string;\n  isCheckbox?: boolean;\n}\nconst defaultValue = { selected: [], other: '' };\nconst OptionList = ({\n  value = defaultValue, items, excludableValues, singleSelection, isCheckbox,\n  onChange, allowAddOther, addOtherLabel, enableOther, otherPlaceholder,\n}: OptionListProps) => {\n  const [showOtherInput, setShowOtherInput] = useState(false);\n\n  useEffect(() => {\n    setShowOtherInput(!!enableOther || !!value?.other);\n  }, [value, enableOther]);\n\n  const selectItem = (selectedItem: OptionListItemProps) => {\n    const { selected, other } = value;\n    let newSelected: string[];\n    let newOtherValue: string | undefined;\n\n    const index = selected.indexOf(selectedItem.value);\n\n    if (index >= 0) {\n      newSelected = [...selected.slice(0, index), ...selected.slice(index + 1)];\n      newOtherValue = other;\n    } else if (singleSelection) {\n      newSelected = [selectedItem.value];\n      newOtherValue = undefined;\n    } else if (excludableValues?.includes(selectedItem.value)\n    || (excludableValues && selected.some(item => excludableValues.includes(item)))) {\n      newSelected = [selectedItem.value];\n      newOtherValue = undefined;\n    } else {\n      newSelected = [...selected, selectedItem.value];\n      newOtherValue = other;\n    }\n\n    if (onChange) {\n      onChange({\n        selected: newSelected,\n        other: newOtherValue,\n      });\n    }\n  };\n\n  const otherChangeHandler = (newOtherVaue: string) => {\n    const { selected } = value;\n    let newSelected: string[];\n\n    if (singleSelection || (excludableValues && selected.some(item => excludableValues.includes(item)))) {\n      newSelected = [];\n    } else {\n      newSelected = selected;\n    }\n\n    if (onChange) {\n      onChange({\n        selected: newSelected,\n        other: newOtherVaue,\n      });\n    }\n\n    if (!newOtherVaue) {\n      setShowOtherInput(false);\n    }\n  };\n\n  const addOtherClickHandler = () => {\n    setShowOtherInput(true);\n  };\n\n  return (\n    <>\n      {items.map((item, index) => {\n        const isSelected = value?.selected?.includes(item.value);\n        return (\n          <OptionListItem\n            key={item.value}\n            lastItem={items.length === index + 1 && !allowAddOther && !enableOther}\n            onClick={() => selectItem(item)}\n            isSelected={isSelected}\n          >\n            <OptionListItemLabel>\n              {item.label}\n            </OptionListItemLabel>\n            <OptionListCheck isSelected={isSelected} checkbox={isCheckbox} />\n          </OptionListItem>\n        );\n      })}\n      {allowAddOther && !showOtherInput && (\n      <OptionListAddOtherButton onClick={addOtherClickHandler} lastItem>\n        {addOtherLabel}\n      </OptionListAddOtherButton>\n      )}\n      {showOtherInput && (\n        <OptionListInputContainer>\n          <OptionListInput\n            placeholder={otherPlaceholder}\n            value={value?.other || ''}\n            isSelected={!!(value?.other)}\n            onChange={e => otherChangeHandler(e.target.value)}\n          />\n          {!!(value?.other) && (\n            <OptionListCheck />\n          )}\n        </OptionListInputContainer>\n      )}\n    </>\n  );\n};\n\nOptionList.defaultProps = {\n  value: defaultValue,\n  excludableValues: undefined,\n  singleSelection: false,\n  onChange: undefined,\n  allowAddOther: false,\n  addOtherLabel: '',\n  enableOther: false,\n  otherPlaceholder: '',\n};\n\nexport default React.memo(OptionList);\n","import { useMemo } from 'react';\nimport { useStateMachine } from 'little-state-machine';\n\n// Utils\nimport { updateAction } from 'utils/wizard';\n\nconst useCustomProgressBarSteps = (storeKey: any, metadata: CommonJSON<any> | undefined) => {\n  // Hooks\n  const { state } = useStateMachine(updateAction(storeKey));\n\n  // Memos\n  const customSteps = useMemo(() => {\n    const steps = {\n      total: metadata?.total,\n      current: metadata?.current,\n    };\n    if (state[storeKey]) {\n      const antigenTaken = state['submit-steps']?.typeCovidFlu?.selected.includes('antigenTaken');\n      const PCRTaken = state['submit-steps']?.typeCovidFlu?.selected.includes('PCRTaken');\n      const fluTaken = state['submit-steps']?.typeCovidFlu?.selected.includes('fluTaken');\n      const antigenTakenScreens = 1;\n      const PCRTakenScreens = 2;\n      const fluTakenScreens = 2;\n\n      switch (true) {\n        case antigenTaken && !PCRTaken && !fluTaken:\n          steps.total = metadata?.total - PCRTakenScreens - fluTakenScreens;\n          steps.current = metadata?.current - PCRTakenScreens - fluTakenScreens;\n          break;\n\n        case (antigenTaken && PCRTaken && !fluTaken) || (antigenTaken && !PCRTaken && fluTaken):\n          steps.total = metadata?.total - (PCRTakenScreens || fluTakenScreens);\n          steps.current = metadata?.current - (PCRTakenScreens || fluTakenScreens);\n          break;\n\n        case !antigenTaken && !PCRTaken && !fluTaken:\n          steps.total = metadata?.total - antigenTakenScreens - PCRTakenScreens - fluTakenScreens;\n          steps.current = metadata?.current - antigenTakenScreens - PCRTakenScreens - fluTakenScreens;\n          break;\n\n        case !antigenTaken && PCRTaken && fluTaken:\n          steps.total = metadata?.total - antigenTakenScreens;\n          steps.current = metadata?.current - antigenTakenScreens;\n          break;\n\n        case (!antigenTaken && !PCRTaken && fluTaken)\n        || (!antigenTaken && PCRTaken && !fluTaken):\n          steps.total = metadata?.total - antigenTakenScreens - (fluTakenScreens || PCRTakenScreens);\n          steps.current = metadata?.current - antigenTakenScreens - (fluTakenScreens || PCRTakenScreens);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return steps;\n  }, [state, metadata, storeKey]);\n\n  // only for PCR test screens\n  const customCurrentStepPCR = useMemo(() => {\n    if (state[storeKey]) {\n      const PCRTaken = state['submit-steps'].typeCovidFlu?.selected.includes('PCRTaken');\n      const antigenTaken = state['submit-steps'].typeCovidFlu?.selected.includes('antigenTaken');\n      const fluTaken = state['submit-steps'].typeCovidFlu?.selected.includes('fluTaken');\n\n      if ((PCRTaken && !antigenTaken && !fluTaken) || (PCRTaken && antigenTaken && !fluTaken)) {\n        return customSteps.current + 2;\n      }\n      return customSteps.current;\n    }\n\n    return 0;\n  }, [state, storeKey, customSteps]);\n\n  return {\n    customSteps,\n    customCurrentStepPCR,\n  };\n};\n\nexport default useCustomProgressBarSteps;\n","import styled from 'styled-components';\n\nexport const RecaptchaContainer = styled.div`\n  margin: 20px 0;\n  \n  div {\n    margin: auto;\n  }\n`;\n","import React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useTranslation } from 'react-i18next';\n\n// Sentry\nimport * as Sentry from '@sentry/react';\n\n// Style\nimport { RecaptchaContainer } from './style';\n\nconst recaptchaKey = process.env.REACT_APP_RECAPTCHA_KEY || '';\n\ninterface RecaptchaProps {\n  onChange(token: string | null): void;\n  setRecaptchaAvailable(state: boolean): void;\n}\n\nconst Recaptcha = ({ onChange, setRecaptchaAvailable }: RecaptchaProps) => {\n  const { i18n } = useTranslation();\n\n  if (!recaptchaKey) return null;\n\n  return (\n    <RecaptchaContainer>\n      <ReCAPTCHA\n        sitekey={process.env.REACT_APP_RECAPTCHA_KEY || ''}\n        onChange={onChange}\n        onErrored={() => { setRecaptchaAvailable(false); Sentry.captureException('Error on ReCAPTCHA'); }}\n        hl={i18n.language}\n      />\n    </RecaptchaContainer>\n  );\n};\n\nexport default Recaptcha;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Hooks\nimport useCustomProgressBarSteps from 'hooks/useCustomProgressBarSteps';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { getCountry } from 'helper/stepsDefinitions';\n\n// Components\nimport Recaptcha from 'components/Recaptcha';\nimport OptionList from 'components/OptionList';\nimport WizardButtons from 'components/WizardButtons';\nimport ProgressIndicator from 'components/ProgressIndicator';\n\n// Styles\nimport {\n  QuestionText, MainContainer, QuestionAllApply, TempBeforeSubmitError,\n} from '../style';\n\nconst schema = Yup.object({\n  currentSymptoms: Yup.object({\n    selected: Yup.array().required(),\n  }),\n}).defined();\n\ntype Step4aType = Yup.InferType<typeof schema>;\n\nconst Step4a = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  otherSteps,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n  const country = getCountry();\n  const { customSteps } = useCustomProgressBarSteps(storeKey, metadata);\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [captchaValue, setCaptchaValue] = React.useState<string | null>(null);\n  const [recaptchaAvailable, setRecaptchaAvailable] = React.useState(true);\n\n  // Form\n  const {\n    control, handleSubmit, formState, watch,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n  });\n  const { errors, isSubmitting, isValid } = formState;\n\n  useEffect(() => {\n    if (!captchaValue) {\n      setSubmitError(null);\n    }\n  }, [captchaValue]);\n\n  const watchSymptoms = watch('currentSymptoms');\n  const isShortQuestionary = metadata?.isShortQuestionary;\n\n  const isFinalStep = React.useMemo(() => {\n    if (isShortQuestionary && ((watchSymptoms?.selected.length === 0) || watchSymptoms?.selected?.some((item: string) => item === 'none'))) {\n      return true;\n    }\n    return false;\n  }, [isShortQuestionary, watchSymptoms?.selected]);\n\n  const renderCaptcha = React.useMemo(() => {\n    if (isFinalStep && (country !== 'Colombia')) {\n      if (submitError) {\n        return (\n          <>\n            <Recaptcha onChange={setCaptchaValue} setRecaptchaAvailable={setRecaptchaAvailable} />\n            <TempBeforeSubmitError>\n              {submitError}\n            </TempBeforeSubmitError>\n          </>\n        );\n      }\n      return <Recaptcha onChange={setCaptchaValue} setRecaptchaAvailable={setRecaptchaAvailable} />;\n    }\n    return null;\n  }, [isFinalStep, submitError, country]);\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(`${t('questionary:symptoms.title')}`);\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, metadata, t]);\n\n  // Handlers\n  const onSubmit = async (values: Step4aType) => {\n    if (values) {\n      const {\n        currentSymptoms,\n      } = (values as any);\n\n      action(values);\n\n      let hasSymptom = false;\n\n      // eslint-disable-next-line no-plusplus\n      for (let index = 0; index < currentSymptoms.selected?.length; index++) {\n        if (currentSymptoms.selected[index] !== 'none') {\n          hasSymptom = true;\n          break;\n        }\n      }\n\n      if (hasSymptom && otherSteps) {\n        setActiveStep(false);\n        history.push(otherSteps.covidSymptomsStep);\n        return;\n      }\n\n      if (nextStep) {\n        setActiveStep(false);\n        history.push(nextStep);\n      }\n    }\n  };\n\n  const onSubmitPatientShortQuestionnaire = () => {\n    if (nextStep) {\n      setActiveStep(false);\n      history.push(nextStep);\n    }\n  };\n\n  const getLeftLabel = () => {\n    if (isFinalStep) {\n      if (isSubmitting) {\n        return t('questionary:submitting');\n      }\n      return t('beforeSubmit:submitButton');\n    }\n    return t('questionary:nextButton');\n  };\n\n  // Memos\n  const currentSymptomsOptions = React.useMemo(() => {\n    if (country === 'Japan') {\n      return [\n        {\n          value: 'none',\n          label: t('questionary:symptoms.options.none'),\n        },\n        {\n          value: 'bodyAches',\n          label: t('questionary:symptoms.options.bodyAches'),\n        },\n        {\n          value: 'dryCough',\n          label: t('questionary:symptoms.options.dryCough'),\n        },\n        {\n          value: 'wetCough',\n          label: t('questionary:symptoms.options.wetCough'),\n        },\n        {\n          value: 'feverChillsSweating',\n          label: t('questionary:symptoms.options.feverChillsSweating'),\n        },\n        {\n          value: 'headaches',\n          label: t('questionary:symptoms.options.headaches'),\n        },\n        {\n          value: 'lossTasteAndOrSmell',\n          label: t('questionary:symptoms.options.lossTasteOrSmell'),\n        },\n        {\n          value: 'runnyNose',\n          label: t('questionary:symptoms.options.runnyNose'),\n        },\n        {\n          value: 'breathShortness',\n          label: t('questionary:symptoms.options.breathShortness'),\n        },\n        {\n          value: 'soreThroat',\n          label: t('questionary:symptoms.options.soreThroat'),\n        },\n        {\n          value: 'chestTightness',\n          label: t('questionary:symptoms.options.chestTightness'),\n        },\n        {\n          value: 'palpitation',\n          label: t('questionary:symptoms.options.palpitation'),\n        },\n        {\n          value: 'vomitingAndDiarrhea',\n          label: t('questionary:symptoms.options.vomitingAndDiarrhea'),\n        },\n        {\n          value: 'lossAppetite',\n          label: t('questionary:symptoms.options.lossAppetite'),\n        },\n        {\n          value: 'weakness',\n          label: t('questionary:symptoms.options.weakness'),\n        },\n        {\n          value: 'fatigue',\n          label: t('questionary:symptoms.options.fatigue'),\n        },\n        {\n          value: 'rash',\n          label: t('questionary:symptoms.options.rash'),\n        },\n        {\n          value: 'other',\n          label: t('questionary:symptoms.options.other'),\n        },\n      ];\n    }\n    return [\n      {\n        value: 'none',\n        label: t('questionary:symptoms.options.none'),\n      },\n      {\n        value: 'bodyAches',\n        label: t('questionary:symptoms.options.bodyAches'),\n      },\n      {\n        value: 'dryCough',\n        label: t('questionary:symptoms.options.dryCough'),\n      },\n      {\n        value: 'wetCough',\n        label: t('questionary:symptoms.options.wetCough'),\n      },\n      {\n        value: 'feverChillsSweating',\n        label: t('questionary:symptoms.options.feverChillsSweating'),\n      },\n      {\n        value: 'headaches',\n        label: t('questionary:symptoms.options.headaches'),\n      },\n      {\n        value: 'lossTasteAndOrSmell',\n        label: t('questionary:symptoms.options.lossTasteOrSmell'),\n      },\n      {\n        value: 'newOrWorseCough',\n        label: t('questionary:symptoms.options.worseCough'),\n      },\n      {\n        value: 'runnyNose',\n        label: t('questionary:symptoms.options.runnyNose'),\n      },\n      {\n        value: 'breathShortness',\n        label: t('questionary:symptoms.options.breathShortness'),\n      },\n      {\n        value: 'soreThroat',\n        label: t('questionary:symptoms.options.soreThroat'),\n      },\n      {\n        value: 'chestTightness',\n        label: t('questionary:symptoms.options.chestTightness'),\n      },\n      {\n        value: 'vomitingAndDiarrhea',\n        label: t('questionary:symptoms.options.vomitingAndDiarrhea'),\n      },\n      {\n        value: 'weakness',\n        label: t('questionary:symptoms.options.weakness'),\n      },\n      {\n        value: 'other',\n        label: t('questionary:symptoms.options.other'),\n      },\n    ];\n  }, [country, t]);\n\n  return (\n    <MainContainer>\n      <ProgressIndicator\n        currentStep={customSteps.current}\n        totalSteps={customSteps.total}\n        progressBar\n      />\n      <QuestionText extraSpace first>\n        <Trans i18nKey=\"questionary:symptoms.question\">\n          <strong>Which of the below symptoms do you currently have?</strong>\n        </Trans>\n        <QuestionAllApply>{t('questionary:allThatApply')}</QuestionAllApply>\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"currentSymptoms\"\n        defaultValue={{ selected: [], other: '' }}\n        render={({ onChange, value }) => (\n          <OptionList\n            isCheckbox\n            value={value}\n            onChange={v => onChange(v)}\n            items={currentSymptomsOptions}\n            excludableValues={['none']}\n          />\n        )}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"currentSymptoms\"\n        render={({ message }) => (\n          <p>{message}</p>\n        )}\n      />\n\n      {/* Bottom Buttons */}\n      {activeStep && (\n        <Portal>\n          {renderCaptcha}\n          <WizardButtons\n            leftLabel={getLeftLabel()}\n            leftDisabled={(isFinalStep && (country !== 'Colombia')) ? (isSubmitting || (recaptchaAvailable && !captchaValue)) : !isValid}\n            leftHandler={isFinalStep ? handleSubmit(onSubmitPatientShortQuestionnaire) : handleSubmit(onSubmit)}\n            invert\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step4a);\n"],"sourceRoot":""}