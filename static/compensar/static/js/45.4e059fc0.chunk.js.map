{"version":3,"sources":["components/Recaptcha/style.ts","components/Recaptcha/Recaptcha.tsx","hooks/useAxios.ts","helper/submitHelper.ts","helper/validationHelper.ts","containers/SubmitSteps/Questionary/Step3/Step3.tsx"],"names":["RecaptchaContainer","styled","div","Recaptcha","onChange","setRecaptchaAvailable","i18n","useTranslation","React","useState","loadingRecaptcha","setLoadingRecaptcha","mObserver","useCallback","r","captcha","targetNode","MutationObserver","mutationList","observer","type","childNodes","children","length","disconnect","observe","childList","subtree","className","ref","sitekey","process","onErrored","Sentry","hl","language","size","client","axios","create","baseURL","doSubmit","a","setSubmitError","state","captchaValue","action","nextStep","setActiveStep","history","welcome","patientId","sede","agreedConsentTerms","agreedPolicyTerms","agreedCovidDetection","agreedCovidCollection","agreedTrainingArtificial","agreedBiometric","recordYourCough","currentSymptoms","symptomsStartedDate","body","FormData","append","window","sourceCampaign","coughFile","recordingFile","uploadedFile","name","selected","join","other","axiosClient","post","headers","response","data","submissionId","push","console","log","executeValidation","symptoms","covidSymptoms","output","index","includes","stepSchema","Yup","when","is","val","then","schema","required","otherwise","defined","memo","previousStep","storeKey","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","useHistory","t","useStateMachine","updateAction","activeStep","useForm","mode","defaultValues","resolver","yupResolver","control","handleSubmit","formState","watch","errors","isValid","watchSymptoms","submitError","setCaptchaValue","recaptchaAvailable","isSubmitting","useEffect","onSubmit","values","s","TagManager","dataLayer","event","handleDoBack","goBack","scrollToTop","covidSymptom","useMemo","ProgressIndicator","currentStep","current","totalSteps","total","progressBar","extraSpace","first","defaultValue","render","value","OptionList","singleSelection","v","items","label","WizardButtons","invert","leftLabel","leftDisabled","leftHandler"],"mappings":"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","file":"static/js/45.4e059fc0.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const RecaptchaContainer = styled.div`\n  margin: 20px 0;\n  \n  div {\n    margin: auto;\n  }\n`;\n","import React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useTranslation } from 'react-i18next';\n\n// Sentry\nimport * as Sentry from '@sentry/react';\n\n// Style\nimport { RecaptchaContainer } from './style';\n\nconst recaptchaKey = process.env.REACT_APP_RECAPTCHA_KEY || '';\n\ninterface RecaptchaProps {\n  onChange(token: string | null): void;\n  setRecaptchaAvailable(state: boolean): void;\n}\n\nconst Recaptcha = ({ onChange, setRecaptchaAvailable }: RecaptchaProps) => {\n  const { i18n } = useTranslation();\n  const [loadingRecaptcha, setLoadingRecaptcha] = React.useState(true);\n\n  const mObserver = React.useCallback(r => {\n    if (r && r.captcha) {\n      // Select the node that will be observed for mutations\n      const targetNode = r.captcha;\n\n      // Options for the observer (which mutations to observe)\n      const config = { childList: true, subtree: true };\n\n      // Callback function to execute when mutations are observed\n      const callback = (mutationList: any, observer: MutationObserver) => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const mutation of mutationList) {\n          if (mutation.type === 'childList') {\n            if (targetNode.childNodes[0].children.length > 1) {\n              setLoadingRecaptcha(false);\n              observer.disconnect();\n            }\n          }\n        }\n      };\n\n      // Create an observer instance linked to the callback function\n      const observer = new MutationObserver(callback);\n\n      // Start observing the target node for configured mutations\n      observer.observe(targetNode, config);\n    }\n  }, []);\n\n  if (!recaptchaKey) return null;\n\n  return (\n    <RecaptchaContainer>\n      {\n        loadingRecaptcha && (\n          <div className=\"text-center\">Cargando, por favor espere...</div>\n        )\n      }\n      <ReCAPTCHA\n        ref={mObserver}\n        sitekey={process.env.REACT_APP_RECAPTCHA_KEY || ''}\n        onChange={onChange}\n        onErrored={() => { setRecaptchaAvailable(false); Sentry.captureException('Error on ReCAPTCHA'); }}\n        hl={i18n.language}\n        size=\"compact\"\n      />\n    </RecaptchaContainer>\n  );\n};\n\nexport default Recaptcha;\n","import axios from 'axios';\n\nexport const client = axios.create({\n  baseURL: process.env.REACT_APP_API,\n});\n\nexport default function useAxios() {\n  return client;\n}\n","import * as H from 'history';\n\n// Hooks\nimport { client as axiosClient } from 'hooks/useAxios';\n\ninterface DoSubmitProps {\n  setSubmitError(err: string | null): void;\n  state: CommonJSON;\n  captchaValue: string | null;\n  action(payload: Object): void;\n  nextStep?: string;\n  setActiveStep(status: boolean): void;\n  history: H.History;\n}\n\nexport async function doSubmit({\n  setSubmitError,\n  state,\n  captchaValue,\n  action,\n  nextStep,\n  setActiveStep,\n  history,\n}: DoSubmitProps) {\n  try {\n    setSubmitError(null);\n    const {\n      patientId,\n      sede,\n      agreedConsentTerms,\n      agreedPolicyTerms,\n      agreedCovidDetection,\n      agreedCovidCollection,\n      agreedTrainingArtificial,\n      agreedBiometric,\n    } = state.welcome;\n\n    const {\n      recordYourCough,\n      currentSymptoms,\n      symptomsStartedDate,\n\n    } = state['submit-steps'];\n\n    const body = new FormData();\n\n    if (patientId) {\n      body.append('patientId', patientId);\n    }\n\n    if (sede) {\n      body.append('sede', sede);\n    }\n\n    if (window.sourceCampaign) {\n      body.append('source', window.sourceCampaign);\n    }\n\n    body.append('agreedConsentTerms', agreedConsentTerms);\n    body.append('agreedPolicyTerms', agreedPolicyTerms);\n    body.append('agreedCovidCollection', agreedCovidCollection);\n    body.append('agreedCovidDetection', agreedCovidDetection);\n    body.append('agreedTrainingArtificial', agreedTrainingArtificial);\n    body.append('agreedBiometric', agreedBiometric);\n\n    const coughFile = recordYourCough.recordingFile || recordYourCough.uploadedFile;\n    body.append('cough', coughFile, coughFile.name || 'filename.wav');\n\n    if (currentSymptoms?.selected?.length > 0) {\n      body.append('currentSymptoms', currentSymptoms.selected.join(','));\n    }\n\n    if (symptomsStartedDate) {\n      body.append('symptomsStartedDate', symptomsStartedDate);\n    }\n\n    if (currentSymptoms?.other) {\n      body.append('otherSymptoms', currentSymptoms?.other);\n    }\n\n    if (captchaValue) {\n      body.append('captchaValue', captchaValue);\n    }\n\n    const response = await axiosClient.post('saveCompensarInfo', body, {\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=saveCompensarInfo',\n      },\n    });\n\n    action({});\n\n    if (nextStep && response.data?.submissionId) {\n      setActiveStep(false);\n      history.push(nextStep, { submissionId: response.data?.submissionId });\n    }\n  } catch (error) {\n    console.log(error);\n    setSubmitError('beforeSubmit:submitError');\n  }\n}\n","interface SymptomsProps {\n  selected: string[];\n}\n\nexport function executeValidation(symptoms : SymptomsProps) {\n  if (!symptoms?.selected) return false;\n  const { selected } = symptoms;\n  const covidSymptoms = ['breathShortness', 'feverChillsSweating', 'dryCough', 'wetCough', 'newOrWorseCough'];\n\n  let output = false;\n  // eslint-disable-next-line no-plusplus\n  for (let index = 0; !output && index < selected?.length; index++) {\n    output = covidSymptoms.includes(selected[index]);\n  }\n\n  return output;\n}\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\nimport TagManager from 'react-gtm-module';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport ProgressIndicator from 'components/ProgressIndicator';\nimport OptionList from 'components/OptionList';\nimport Recaptcha from 'components/Recaptcha';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { doSubmit } from 'helper/submitHelper';\nimport { executeValidation } from 'helper/validationHelper';\n\n// Styles\nimport {\n  QuestionText, MainContainer, TempBeforeSubmitError,\n} from '../style';\n\nconst stepSchema = Yup.object({\n  symptomsStartedDate: Yup.string().when('currentSymptoms', {\n    is: val => executeValidation(val), // val should be { selected: ... },\n    then: (schema: any) => schema.required(), // o Yup.string().required(),\n    otherwise: (schema: any) => schema, // o Yup.string()\n  }),\n}).defined();\n\ntype Step3Type = Yup.InferType<typeof stepSchema>;\n\nconst Step3 = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n\n  // Form\n  const {\n    control, handleSubmit, formState, watch,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(stepSchema),\n  });\n  const { errors, isValid } = formState;\n  const watchSymptoms = watch('currentSymptoms');\n\n  /* Delete after Contact info step is re-integrated */\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [captchaValue, setCaptchaValue] = React.useState<string | null>(null);\n  const [recaptchaAvailable, setRecaptchaAvailable] = React.useState(true);\n  const { isSubmitting } = formState;\n\n  useEffect(() => {\n    if (!captchaValue) {\n      setSubmitError(null);\n    }\n  }, [captchaValue]);\n\n  const onSubmit = async (values: Step3Type) => {\n    if (values) {\n      await doSubmit({\n        setSubmitError: s => setSubmitError(!s ? null : t(s)),\n        state: {\n          ...state,\n          'submit-steps': {\n            ...state['submit-steps'],\n            ...values,\n          },\n        },\n        captchaValue,\n        action,\n        nextStep,\n        setActiveStep,\n        history,\n      });\n\n      TagManager.dataLayer({\n        dataLayer: {\n          event: 'successful_session',\n        },\n      });\n    }\n  };\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('questionary:headerQuestions'));\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, t]);\n\n  const covidSymptom = React.useMemo(() => executeValidation(watchSymptoms), [watchSymptoms]);\n\n  return (\n    <MainContainer>\n      <ProgressIndicator\n        currentStep={metadata?.current}\n        totalSteps={metadata?.total}\n        progressBar\n      />\n      {\n        covidSymptom && (\n          <>\n            <QuestionText extraSpace first>\n              {t('questionary:symptomsDate')}\n            </QuestionText>\n            <Controller\n              control={control}\n              name=\"symptomsStartedDate\"\n              defaultValue=\"\"\n              render={({ onChange, value }) => (\n                <OptionList\n                  singleSelection\n                  value={{ selected: value ? [value] : [] }}\n                  onChange={v => onChange(v.selected[0])}\n                  items={[\n                    {\n                      value: 'today',\n                      label: t('questionary:options.today'),\n                    },\n                    {\n                      value: 'days',\n                      label: t('questionary:options.days'),\n                    },\n                    {\n                      value: 'week',\n                      label: t('questionary:options.week'),\n                    },\n                    {\n                      value: 'overWeek',\n                      label: t('questionary:options.overWeek'),\n                    },\n                  ]}\n                />\n              )}\n            />\n          </>\n        )\n      }\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          { /* ReCaptcha  */}\n          <Recaptcha\n            onChange={setCaptchaValue}\n            setRecaptchaAvailable={setRecaptchaAvailable}\n          />\n          {submitError && (\n            <TempBeforeSubmitError>\n              {submitError}\n            </TempBeforeSubmitError>\n          )}\n          <WizardButtons\n            invert\n            leftLabel={isSubmitting ? t('questionary:submitting') : t('beforeSubmit:submitButton')}\n            leftDisabled={(isSubmitting || (recaptchaAvailable && !captchaValue) || !isValid)}\n            leftHandler={handleSubmit(onSubmit)}\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step3);\n"],"sourceRoot":""}