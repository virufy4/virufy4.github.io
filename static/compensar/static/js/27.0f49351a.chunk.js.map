{"version":3,"sources":["hooks/useAxios.ts","helper/submitHelper.ts","helper/validationHelper.ts","containers/SubmitSteps/Questionary/Step3/Step3.tsx","containers/SubmitSteps/Questionary/Step3/index.ts"],"names":["client","axios","create","baseURL","process","doSubmit","a","setSubmitError","state","captchaValue","action","nextStep","setActiveStep","history","welcome","patientId","agreedConsentTerms","agreedPolicyTerms","agreedCovidDetection","agreedCovidCollection","agreedTrainingArtificial","agreedBiometric","recordYourCough","currentSymptoms","symptomsStartedDate","body","FormData","append","window","sourceCampaign","coughFile","recordingFile","uploadedFile","name","selected","length","join","other","axiosClient","post","headers","response","data","submissionId","push","console","log","executeValidation","symptoms","covidSymptoms","output","index","includes","Recaptcha","loadable","fallback","className","stepSchema","Yup","when","is","val","then","schema","required","otherwise","defined","React","memo","previousStep","storeKey","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","setType","useHistory","t","useTranslation","useStateMachine","updateAction","useState","activeStep","useForm","mode","defaultValues","resolver","yupResolver","control","handleSubmit","formState","watch","errors","isValid","watchSymptoms","submitError","setCaptchaValue","recaptchaAvailable","setRecaptchaAvailable","isSubmitting","useEffect","onSubmit","values","s","TagManager","dataLayer","event","handleDoBack","useCallback","goBack","scrollToTop","covidSymptom","useMemo","ProgressIndicator","currentStep","current","totalSteps","total","progressBar","extraSpace","first","defaultValue","render","onChange","value","OptionList","singleSelection","v","items","label","WizardButtons","invert","leftLabel","leftDisabled","leftHandler"],"mappings":"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","file":"static/js/27.0f49351a.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const client = axios.create({\n  baseURL: process.env.REACT_APP_API,\n});\n\nexport default function useAxios() {\n  return client;\n}\n","import * as H from 'history';\n\n// Hooks\nimport { client as axiosClient } from 'hooks/useAxios';\n\ninterface DoSubmitProps {\n  setSubmitError(err: string | null): void;\n  state: CommonJSON;\n  captchaValue: string | null;\n  action(payload: Object): void;\n  nextStep?: string;\n  setActiveStep(status: boolean): void;\n  history: H.History;\n}\n\nexport async function doSubmit({\n  setSubmitError,\n  state,\n  captchaValue,\n  action,\n  nextStep,\n  setActiveStep,\n  history,\n}: DoSubmitProps) {\n  try {\n    setSubmitError(null);\n    const {\n      patientId,\n      agreedConsentTerms,\n      agreedPolicyTerms,\n      agreedCovidDetection,\n      agreedCovidCollection,\n      agreedTrainingArtificial,\n      agreedBiometric,\n    } = state.welcome;\n\n    const {\n      recordYourCough,\n      currentSymptoms,\n      symptomsStartedDate,\n\n    } = state['submit-steps'];\n\n    const body = new FormData();\n\n    if (patientId) {\n      body.append('patientId', patientId);\n    }\n\n    if (window.sourceCampaign) {\n      body.append('source', window.sourceCampaign);\n    }\n\n    body.append('agreedConsentTerms', agreedConsentTerms);\n    body.append('agreedPolicyTerms', agreedPolicyTerms);\n    body.append('agreedCovidCollection', agreedCovidCollection);\n    body.append('agreedCovidDetection', agreedCovidDetection);\n    body.append('agreedTrainingArtificial', agreedTrainingArtificial);\n    body.append('agreedBiometric', agreedBiometric);\n\n    const coughFile = recordYourCough.recordingFile || recordYourCough.uploadedFile;\n    body.append('cough', coughFile, coughFile.name || 'filename.wav');\n\n    if (currentSymptoms?.selected?.length > 0) {\n      body.append('currentSymptoms', currentSymptoms.selected.join(','));\n    }\n\n    if (symptomsStartedDate) {\n      body.append('symptomsStartedDate', symptomsStartedDate);\n    }\n\n    if (currentSymptoms?.other) {\n      body.append('otherSymptoms', currentSymptoms?.other);\n    }\n\n    if (captchaValue) {\n      body.append('captchaValue', captchaValue);\n    }\n\n    const response = await axiosClient.post('saveCompensarInfo', body, {\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=saveCompensarInfo',\n      },\n    });\n\n    action({});\n\n    if (nextStep && response.data?.submissionId) {\n      setActiveStep(false);\n      history.push(nextStep, { submissionId: response.data?.submissionId });\n    }\n  } catch (error) {\n    console.log(error);\n    setSubmitError('beforeSubmit:submitError');\n  }\n}\n","interface SymptomsProps {\n  selected: string[];\n}\n\nexport function executeValidation(symptoms : SymptomsProps) {\n  if (!symptoms?.selected) return false;\n  const { selected } = symptoms;\n  const covidSymptoms = ['breathShortness', 'feverChillsSweating', 'dryCough', 'wetCough', 'newOrWorseCough'];\n\n  let output = false;\n  // eslint-disable-next-line no-plusplus\n  for (let index = 0; !output && index < selected?.length; index++) {\n    output = covidSymptoms.includes(selected[index]);\n  }\n\n  return output;\n}\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\nimport TagManager from 'react-gtm-module';\nimport loadable from '@loadable/component';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport ProgressIndicator from 'components/ProgressIndicator';\nimport OptionList from 'components/OptionList';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { doSubmit } from 'helper/submitHelper';\nimport { executeValidation } from 'helper/validationHelper';\n\n// Styles\nimport {\n  QuestionText, MainContainer, TempBeforeSubmitError,\n} from '../style';\n\nconst Recaptcha = loadable(() => import('components/Recaptcha'), {\n  fallback: <div className=\"text-center\">Loading, please wait..</div>,\n});\n\nconst stepSchema = Yup.object({\n  symptomsStartedDate: Yup.string().when('currentSymptoms', {\n    is: val => executeValidation(val), // val should be { selected: ... },\n    then: (schema: any) => schema.required(), // o Yup.string().required(),\n    otherwise: (schema: any) => schema, // o Yup.string()\n  }),\n}).defined();\n\ntype Step3Type = Yup.InferType<typeof stepSchema>;\n\nconst Step3 = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle, setType } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n\n  // Form\n  const {\n    control, handleSubmit, formState, watch,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(stepSchema),\n  });\n  const { errors, isValid } = formState;\n  const watchSymptoms = watch('currentSymptoms');\n\n  /* Delete after Contact info step is re-integrated */\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [captchaValue, setCaptchaValue] = React.useState<string | null>(null);\n  const [recaptchaAvailable, setRecaptchaAvailable] = React.useState(true);\n  const { isSubmitting } = formState;\n\n  useEffect(() => {\n    if (!captchaValue) {\n      setSubmitError(null);\n    }\n  }, [captchaValue]);\n\n  const onSubmit = async (values: Step3Type) => {\n    if (values) {\n      await doSubmit({\n        setSubmitError: s => setSubmitError(!s ? null : t(s)),\n        state: {\n          ...state,\n          'submit-steps': {\n            ...state['submit-steps'],\n            ...values,\n          },\n        },\n        captchaValue,\n        action,\n        nextStep,\n        setActiveStep,\n        history,\n      });\n\n      TagManager.dataLayer({\n        dataLayer: {\n          event: 'successful_session',\n        },\n      });\n    }\n  };\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('questionary:headerQuestions'));\n    setType('primary');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, setType, t]);\n\n  const covidSymptom = React.useMemo(() => executeValidation(watchSymptoms), [watchSymptoms]);\n\n  return (\n    <MainContainer>\n      <ProgressIndicator\n        currentStep={metadata?.current}\n        totalSteps={metadata?.total}\n        progressBar\n      />\n      {\n        covidSymptom && (\n          <>\n            <QuestionText extraSpace first>\n              {t('questionary:symptomsDate')}\n            </QuestionText>\n            <Controller\n              control={control}\n              name=\"symptomsStartedDate\"\n              defaultValue=\"\"\n              render={({ onChange, value }) => (\n                <OptionList\n                  singleSelection\n                  value={{ selected: value ? [value] : [] }}\n                  onChange={v => onChange(v.selected[0])}\n                  items={[\n                    {\n                      value: 'today',\n                      label: t('questionary:options.today'),\n                    },\n                    {\n                      value: 'days',\n                      label: t('questionary:options.days'),\n                    },\n                    {\n                      value: 'week',\n                      label: t('questionary:options.week'),\n                    },\n                    {\n                      value: 'overWeek',\n                      label: t('questionary:options.overWeek'),\n                    },\n                  ]}\n                />\n              )}\n            />\n          </>\n        )\n      }\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          { /* ReCaptcha  */}\n          <Recaptcha onChange={setCaptchaValue} setRecaptchaAvailable={setRecaptchaAvailable} />\n          {submitError && (\n            <TempBeforeSubmitError>\n              {submitError}\n            </TempBeforeSubmitError>\n          )}\n          <WizardButtons\n            invert\n            leftLabel={isSubmitting ? t('questionary:submitting') : t('beforeSubmit:submitButton')}\n            leftDisabled={(isSubmitting || (recaptchaAvailable && !captchaValue) || !isValid)}\n            leftHandler={handleSubmit(onSubmit)}\n          />\n        </Portal>\n      )}\n    </MainContainer>\n  );\n};\n\nexport default React.memo(Step3);\n","export { default } from './Step3';\n"],"sourceRoot":""}