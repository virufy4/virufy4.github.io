{"version":3,"sources":["components/Button/style.ts","components/Button/Button.tsx","hooks/useHeaderContext.ts","helper/scrollHelper.ts","utils/wizard.ts","components/WizardButtons/style.ts","components/WizardButtons/WizardButtons.tsx","modals/ConfirmationModal/style.ts","modals/ConfirmationModal/ConfirmationModal.tsx","containers/SubmitSteps/Submission/PredictionResult/PredictionResult.tsx","hooks/useModals.ts","containers/SubmitSteps/Submission/PredictionResult/index.ts"],"names":["StyledButton","styled","button","dark","color","disabled","colors","purple_50","purple","white","Button","React","memo","children","props","type","useHeaderContext","useContext","HeaderContext","title","setTitle","subtitle","setSubtitle","setType","logoSize","setLogoSize","setDoGoBack","doGoBack","scrollToTop","window","scrollTo","top","behavior","updateAction","storeKey","state","payload","resetStore","welcome","language","WizardButtonsContainer","div","theme","layout","generalPaddingAmount","breakpoints","tablet","WizardButtons","invert","leftLabel","leftDisabled","leftHandler","rightLabel","rightDisabled","rightHandler","onClick","ModalBody","ModalTitle","ModalContent","Modal","setAppElement","ConfirmationModal","isOpen","modalTitle","toggle","onConfirm","handleOnConfirm","useCallback","onRequestClose","style","content","minHeight","maxWidth","margin","bottom","right","left","backgroundColor","borderRadius","border","overlay","className","PredictionResult","t","useTranslation","useStateMachine","actions","history","useHistory","useState","errorCode","setErrorCode","processing","setProcessing","prediction","setPrediction","submissionId","setSubmissionId","submitError","setSubmitError","setIsOpen","openModal","closeModal","toggleModal","s","useModal","useEffect","target","document","getElementById","display","handleSubmit","a","recordYourCough","body","FormData","coughFile","recordingFile","uploadedFile","append","name","passcode","axios","post","process","headers","predictionResult","data","console","log","handleReturnMain","replace","renderResult","useMemo","red","Trans","i18nKey","green","black"],"mappings":"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","file":"static/js/13.ead4ab62.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { colors } from '../../theme';\n\nexport interface StyledButtonProps {\n  disabled?: boolean;\n  dark?: boolean;\n  id?: string;\n}\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  height: 52px;\n  border-radius: 15px; \n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  font-weight: bold;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  ${({ dark, disabled }) => {\n    const color = disabled ? colors.purple_50 : colors.purple;\n    return dark ? `\n    background-color: ${color};\n    color: ${colors.white};\n    border: none;\n  ` : `\n    background-color: ${colors.white};\n    color: ${color};\n    border: 1px solid ${color};\n  `;\n  }}\n`;\n","import React, { PropsWithChildren } from 'react';\n\n// Styles\nimport {\n  StyledButton,\n  StyledButtonProps,\n} from './style';\n\nexport interface ButtonProps extends PropsWithChildren<StyledButtonProps> {\n  onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void);\n}\n\nconst Button = React.memo(({ children, ...props }: ButtonProps) => ((\n  <StyledButton\n    type=\"button\"\n    {...props}\n  >\n    {children}\n  </StyledButton>\n)));\n\nexport default Button;\n","import React from 'react';\nimport { HeaderContext } from 'components/Header';\n\nconst useHeaderContext = () => {\n  const {\n    title, setTitle, subtitle, setSubtitle, type, setType, logoSize, setLogoSize, setDoGoBack, doGoBack,\n  } = React.useContext(HeaderContext);\n\n  return {\n    title,\n    setTitle,\n    subtitle,\n    setSubtitle,\n    type,\n    setType,\n    logoSize,\n    setLogoSize,\n    doGoBack,\n    setDoGoBack,\n  };\n};\n\nexport default useHeaderContext;\n","export const scrollToTop = function scrollToTop() {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n};\n\nexport const scrollToBottom = function scrollToBottom() {\n  window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n};\n","// TODO: Improve types\nexport function updateAction(storeKey: string): any {\n  return (state: any, payload: any) => ({\n    ...state,\n    [storeKey]: {\n      ...state[storeKey],\n      ...payload,\n    },\n  });\n}\n\nexport function resetStore(): any {\n  return (state: any) => ({ welcome: { language: state.welcome.language } });\n}\n","import styled from 'styled-components';\n\nexport const WizardButtonsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: ${props => `calc(100% - ${props.theme.layout.generalPaddingAmount * 2}px)`};\n  margin: 0 auto;\n\n  button {\n    flex: 1;\n\n    &:first-of-type {\n      margin-left: 0px !important;\n    }\n\n    &:last-of-type {\n      margin-left: 20px;\n    }\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\n\n// Components\nimport Button from 'components/Button';\n\n// Styles\nimport {\n  WizardButtonsContainer,\n} from './style';\n\ninterface WizardButtonsProps {\n  invert?: boolean;\n  leftLabel: string;\n  leftDisabled?: boolean;\n  leftHandler: () => void;\n  rightLabel?: string;\n  rightDisabled?: boolean;\n  rightHandler?: () => void;\n}\n\nconst WizardButtons = React.memo(({\n  invert = false,\n  leftLabel,\n  leftDisabled,\n  leftHandler,\n  rightLabel,\n  rightDisabled,\n  rightHandler,\n}: WizardButtonsProps) => (\n  <WizardButtonsContainer>\n    <Button\n      dark={invert}\n      disabled={leftDisabled}\n      onClick={leftHandler}\n    >\n      {leftLabel}\n    </Button>\n    {\n        rightLabel && rightHandler && (\n          <Button\n            dark={!invert}\n            disabled={rightDisabled}\n            onClick={rightHandler}\n          >\n            {rightLabel}\n          </Button>\n        )\n      }\n  </WizardButtonsContainer>\n));\nexport default React.memo(WizardButtons);\n","import styled from 'styled-components';\n\nexport const ModalBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    height: 100%;\n    max-width: 400px;\n    margin: auto;\n`;\n\nexport const ModalTitle = styled.div`\n  font-size: 18px;\n  font-weight: 600;\n  margin-bottom: 17px;\n`;\n\nexport const ModalContent = styled.div`\n  font-size: 14px;\n  margin-bottom: 17px;\n`;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { PropsWithChildren } from 'react';\nimport Modal from 'react-modal';\n\n// Components\nimport Button from 'components/Button';\n\n// Styles\n\nimport {\n  ModalBody, ModalTitle, ModalContent,\n} from './style';\n\nexport interface ConfirmationModalProps {\n  isOpen: boolean;\n  modalTitle: string;\n  toggle: () => void;\n  onConfirm?: () => void;\n}\n\nModal.setAppElement('#root');\n\nconst ConfirmationModal = React.memo(({\n  isOpen,\n  modalTitle,\n  children,\n  toggle,\n  onConfirm,\n  ...props\n}: PropsWithChildren<ConfirmationModalProps>) => {\n  // Handlers\n\n  const handleOnConfirm = React.useCallback(() => {\n    onConfirm?.();\n    toggle();\n  }, [onConfirm, toggle]);\n\n  const customStyles = {\n    content: {\n      minHeight: '328px',\n      maxWidth: '768px',\n      margin: 'auto',\n      top: '60%',\n      bottom: '0px',\n      right: '0px',\n      left: '0px',\n      backgroundColor: '#EBF1FC',\n      borderRadius: '70px 70px 0px 0px',\n      border: 'none',\n    },\n    overlay: { backgroundColor: 'rgba(0, 0, 0, 0.3)' },\n  };\n\n  return (\n    <Modal\n      {...props}\n      isOpen={isOpen}\n      onRequestClose={toggle}\n      style={customStyles}\n    >\n      <ModalBody className=\"ModalBody\">\n        <ModalTitle>{modalTitle}</ModalTitle>\n        <ModalContent>{children}</ModalContent>\n        <Button onClick={handleOnConfirm} dark>\n          OK\n        </Button>\n      </ModalBody>\n    </Modal>\n  );\n});\n\nexport default ConfirmationModal;\n","import React from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\n\n// Form\nimport { useStateMachine } from 'little-state-machine';\n\n// Hooks\nimport { useModal } from 'hooks/useModals';\n\n// Modals\nimport ConfirmationModal from 'modals/ConfirmationModal';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\n\n// Update Action\nimport { resetStore } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Styles\nimport { colors } from '../../../../theme';\nimport {\n  Title,\n  ImageProcessing,\n  ProcessingContainer,\n  PredictionResultContainer,\n  TitleResult,\n  ImagePredictionResult,\n  VLogo,\n  SubmitError,\n  IntroText,\n  SubmissionIdBox,\n  SubmissionId,\n  ButtonContainer,\n} from './style';\n\nconst predictionEndpointUrl = process.env.REACT_APP_PREDICTION_ENDPOINT || '';\n\nconst PredictionResult = () => {\n  // Hooks\n  const {\n    setDoGoBack, setTitle, setSubtitle, setType,\n  } = useHeaderContext();\n  const { t } = useTranslation();\n  const { state, actions } = useStateMachine({ resetStore: resetStore() });\n  const history = useHistory();\n\n  // States\n  const [errorCode, setErrorCode] = React.useState<string | null>(null);\n  const [processing, setProcessing] = React.useState<boolean>(true);\n  const [prediction, setPrediction] = React.useState<string>('unknown');\n  const [submissionId, setSubmissionId] = React.useState<string>('');\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n\n  const { isOpen, openModal, closeModal } = useModal();\n\n  React.useEffect(() => {\n    // Hide the Footer Report Problems while processing\n    const target = document && document.getElementById('footer-report-problems');\n    if (target) {\n      if (processing) {\n        target.style.display = 'none';\n      } else {\n        target.style.display = 'flex';\n      }\n    }\n  }, [processing]);\n\n  // Handlers\n  const handleSubmit = async () => {\n    try {\n      setSubmitError(null);\n      if (state && state.welcome && state['submit-steps']) {\n        const {\n          recordYourCough,\n        } = state['submit-steps'];\n\n        const body = new FormData();\n\n        // Records\n        const coughFile = recordYourCough?.recordingFile || recordYourCough?.uploadedFile;\n        if (coughFile) {\n          body.append('cough', coughFile, coughFile.name || 'filename.wav');\n        }\n\n        body.append('passcode', state.welcome?.passcode ?? '');\n\n        body.append('patientId', 'predict-app');\n\n        const predictionResult = await axios.post(predictionEndpointUrl, body, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        if (predictionResult.data) {\n          setProcessing(false);\n          setPrediction(predictionResult.data.prediction);\n          setSubmissionId(predictionResult.data.submissionId);\n          setErrorCode(predictionResult.data.errorCode);\n          actions.resetStore({});\n        }\n      } else {\n        actions.resetStore({});\n      }\n    } catch (err) {\n      console.log('Error', err);\n      setSubmitError(t('predictionResult:submitError'));\n    }\n  };\n\n  const handleReturnMain = React.useCallback(() => {\n    history.replace('');\n  }, [history]);\n\n  // Effects\n  React.useEffect(() => {\n    scrollToTop();\n    setTitle('');\n    setDoGoBack(() => {});\n    handleSubmit();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    if (processing) {\n      setSubtitle('');\n      setType('noShape');\n    } else {\n      setSubtitle(`${t('predictionResult:result')}`);\n      setType('shapeUp');\n      openModal();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [processing]);\n\n  const renderResult = React.useMemo(() => {\n    if (prediction === 'positive') {\n      return (\n        <>\n          <TitleResult color={colors.red}>\n            {t('predictionResult:resultDetected')}\n          </TitleResult>\n          <IntroText>\n            <Trans i18nKey=\"predictionResult:resultDetectedTextt\">\n              Your voice has indicators of COVID-19.\n              <strong>Please contact your healthcare professional</strong> and take additional precautions.\n            </Trans>\n          </IntroText>\n          <ImagePredictionResult />\n        </>\n      );\n    }\n    if (prediction === 'negative') {\n      return (\n        <>\n          <TitleResult color={colors.green}>\n            {t('predictionResult:resultNotDetected')}\n          </TitleResult>\n          <IntroText>\n            <Trans i18nKey=\"predictionResult:resultNotDetectedText\">\n              Your voice does not seem to have indicators of COVID-19. Please\n              <strong>continue to take appropriate measures</strong>\n              based on the advice of your healthcare professional or applicable\n              regulatory body and reassess yourself in our app daily.\n            </Trans>\n          </IntroText>\n          <VLogo />\n        </>\n      );\n    }\n    return (\n      <>\n        <TitleResult color={colors.black}>\n          {t('predictionResult:resultNotAnalyze')}\n        </TitleResult>\n        <IntroText>\n          <Trans i18nKey=\"predictionResult:resultNotAnalyzeText\">\n            Our algorithm is not able to determine your COVID-19 status. <strong>Please submit another cough.</strong>\n          </Trans>\n        </IntroText>\n        <ButtonContainer>\n          <WizardButtons\n            invert\n            leftLabel={t('predictionResult:returnMain')}\n            leftHandler={handleReturnMain}\n          />\n        </ButtonContainer>\n        <ImagePredictionResult />\n      </>\n    );\n  }, [handleReturnMain, prediction, t]);\n\n  return (\n    <>\n      {(errorCode || submitError) && (\n      <SubmitError>\n        {errorCode ? `${t('predictionResult:error')} ${errorCode}` : submitError}\n      </SubmitError>\n      )}\n      {\n        processing ? (\n          <ProcessingContainer>\n            {/* Title */}\n            <Title>\n              {t('predictionResult:processingTitle')}\n            </Title>\n\n            {/* Image */}\n            <ImageProcessing />\n          </ProcessingContainer>\n        ) : (\n          <>\n            <ConfirmationModal\n              isOpen={isOpen}\n              modalTitle={t('predictionResult:note')}\n              toggle={closeModal}\n              onConfirm={closeModal}\n            >\n              <Trans i18nKey=\"predictionResult:resultModal\">\n                This app will not predict your COVID-19 status or diagnose any disease, disorder,\n                or other health condition. Virufy is conducting research and will use the information\n                you provide for that research only. Virufy will not take place of a doctor and would like to\n                remind you it is your responsiblity to seek medical advice from your doctor.\n              </Trans>\n            </ConfirmationModal>\n            {submissionId && (\n              <SubmissionIdBox>\n                <SubmissionId>\n                  <Trans i18nKey=\"predictionResult:result_submission\">\n                    Your unique submission ID:\n                    <br />\n                    <strong>{{ submissionId }}</strong>\n                  </Trans>\n                </SubmissionId>\n              </SubmissionIdBox>\n            )}\n            <PredictionResultContainer>\n              {renderResult}\n            </PredictionResultContainer>\n          </>\n        )\n      }\n    </>\n  );\n};\n\nexport default React.memo(PredictionResult);\n","import React from 'react';\n\nexport function useModal() {\n  // State\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n\n  // Handlers\n  const openModal = React.useCallback(() => {\n    setIsOpen(true);\n  }, []);\n\n  const closeModal = React.useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  const toggleModal = React.useCallback(() => {\n    setIsOpen(s => !s);\n  }, []);\n\n  const out = {\n    isOpen,\n    openModal,\n    closeModal,\n    toggleModal,\n  };\n\n  return out;\n}\n","export { default } from './PredictionResult';\n"],"sourceRoot":""}