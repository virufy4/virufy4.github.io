{"version":3,"sources":["components/Texts/Texts.ts","components/Button/style.ts","components/Button/Button.tsx","components/WizardButtons/style.ts","components/WizardButtons/WizardButtons.tsx","helper/audio/encoder-wav-worker.js","helper/audio/encoder-mp3-worker.js","helper/audio/encoder-flac-worker.js","helper/audio/RecorderService.js","modals/RecordErrorModal/style.ts","modals/RecordErrorModal/RecordErrorModal.tsx","assets/icons/start.svg","components/MicRecorder/style.ts","components/MicRecorder/MicRecorder.tsx","assets/icons/upload.svg","containers/SubmitSteps/RecordingsSteps/Introduction/Record/Record.tsx","helper/fileHelper.ts","assets/icons/stop.svg","containers/SubmitSteps/RecordingsSteps/Introduction/Record/style.ts"],"names":["BaseText","css","BlackText","styled","div","dark","colors","darkBlack","black","props","fontSize","BaseTitle","StyledButton","button","color","disabled","purple_50","purple","white","Button","React","memo","children","type","WizardButtonsContainer","theme","layout","generalPaddingAmount","breakpoints","tablet","WizardButtons","invert","leftLabel","leftDisabled","leftHandler","rightLabel","rightDisabled","rightHandler","onClick","recorded","this","onmessage","e","data","buffer","length","Uint8Array","i","index","sample","push","encode","sampleRate","bufferLength","wav","view","DataView","setUint32","setUint16","CHANNELS","set","msg","postMessage","dump","close","mp3encoder","maxSamples","mp3Data","convertBuffer","arrayBuffer","Float32Array","out","Int16Array","input","output","s","Math","max","min","floatTo16BitPCM","opts","samplesMono","remaining","left","subarray","encodeBuffer","mp3buf","flush","importScripts","baseUrl","lamejs","Mp3Encoder","flacEncoder","process","SAMPLERATE","COMPRESSION","BPS","flacOk","flacLength","flacBuffers","wavBuffers","writeCallbackFn","bytes","byteLength","initFlac","Flac","init_libflac_encoder","statusEncoder","init_encoder_stream","console","log","error","doEncodeFlac","audioData","bufLength","bufferI32","Uint32Array","setInt32","flacReturn","FLAC__stream_encoder_process_interleaved","exportFlacFile","recBuffers","recLength","samples","channelBuffer","recordingLength","result","offset","lng","mergeBuffersUint8","Blob","config","finalConfig","bps","channels","samplerate","compression","isReady","onready","setTimeout","init","len","buffered","splice","info","encodeFlac","FLAC__stream_encoder_finish","FLAC__stream_encoder_delete","RecorderService","cleanup","onRecording","em","removeEventListener","recordingFn","onAudioProcesss","onAudioProcessFn","createWorker","fn","js","toString","replace","blob","Worker","URL","createObjectURL","startRecording","timeslice","state","navigator","mediaDevices","getUserMedia","audioCtx","AudioContext","micGainNode","createGain","outputGainNode","createDynamicsCompressorNode","dynamicsCompressorNode","createDynamicsCompressor","createAnalyserNode","analyserNode","createAnalyser","forceScriptProcessor","broadcastAudioProcessEvents","usingMediaRecorder","processorNode","createScriptProcessor","processorBufferSize","createMediaStreamDestination","destinationNode","destination","manualEncoderId","encoderWorker","EncoderMp3","encoderMimeType","EncoderFlac","EncoderWav","addEventListener","event","Event","_onDataAvailable","userMediaConstraints","audio","echoCancellation","enableEchoCancellation","deviceId","then","stream","_startRecordingWithStream","catch","setMicGain","newGain","micGain","gain","setValueAtTime","currentTime","micAudioStream","inputStreamNode","createMediaStreamSource","context","onGraphSetupWithInputStream","connect","nextNode","onaudioprocess","_onAudioProcess","mediaRecorder","MediaRecorder","mimeType","evt","_onError","start","slicing","setInterval","dispatchEvent","CustomEvent","detail","inputBuffer","outputBuffer","getChannelData","stopRecording","stop","clearInterval","chunks","chunkType","blobUrl","recording","ts","Date","getTime","size","disconnect","stopTracksAndCloseCtxWhenFinished","getTracks","forEach","track","window","webkitAudioContext","document","createDocumentFragment","undefined","onAudioPress","ModalBody","ModalTitle","ModalContent","Modal","setAppElement","RecordErrorModal","modalTitle","onConfirm","t","useTranslation","style","content","height","maxWidth","margin","borderRadius","border","overlay","backgroundColor","className","MicRecorderContainer","MicButtonsContainer","MicButtonWithText","MicNote","p","lightDarkGray","MicRecorderButton","opacity","MicRecorderImage","img","MicRecorderStartImage","MicRecorderStopImage","MicRecorderTimerContainer","MicRecorderTimerReleaseTextContainer","red","MicRecorderTextP","show","baseConfig","MicRecorder","maxTimeInSeconds","onNewRecord","delay","recordingFile","recordingService","useRef","audioSamples","timerRef","timeout","target","useState","micAllowed","setMicAllowed","recordingInProgress","setRecordingInProgress","showReleaseText","setShowReleaseText","showShortRecordingText","setShowShortRecordingText","longPressTriggered","setLongPressTriggered","onAudioProcess","useCallback","current","channel","numberOfChannels","inputData","outputData","onNewRecording","a","fetch","r","fileName","file","FileHelper","blobToFile","humanReadableSize","sizeAsHuman","useEffect","Audio","load","listenerFn","setTime","duration","handleStartRecording","reset","handleStopRecording","handleFormatValue","value","preventDefault","handleStartLongPress","passive","handleEndLongPress","clearTimeout","isOpen","ref","startImmediately","checkpoints","time","callback","Minutes","Seconds","formatValue","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onMouseLeave","src","StartSVG","alt","StopSVG","schema","Yup","required","test","Promise","resolver","Infinity","remove","volume","play","defined","Record","onNext","onManualUpload","defaultValues","currentLogic","action","Portal","usePortal","bindTo","getElementById","useForm","mode","yupResolver","handleSubmit","control","getValues","formState","isValid","micKey","name","render","onChange","uploadedFile","UploadSVG","si","thresh","abs","units","u","toFixed","theBlob","b","lastModifiedDate","MainContainer","Text","MicContainer","UploadContainer","UploadImage","UploadText","StopImg","attrs"],"mappings":"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","file":"static/js/3.f8bda047.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport { colors } from 'theme';\n\nexport const BaseText = css`\n  font-family: 'Source Sans Pro';\n  font-size: 0.875rem;\n  line-height: 20px;\n`;\n\nexport const BlackText = styled.div<{ dark?: boolean; fontSize?: string; }>`\n  ${BaseText}\n  color: ${({ dark }) => (dark ? colors.darkBlack : colors.black)};\n  ${props => (props.fontSize ? `font-size: ${props.fontSize};` : '')}\n`;\n\nexport const BaseTitle = styled.div`\n  font-family: 'Open Sans';\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 1;\n  color: ${colors.darkBlack};\n`;\n","import styled from 'styled-components';\nimport { colors } from '../../theme';\n\nexport interface StyledButtonProps {\n  disabled?: boolean;\n  dark?: boolean;\n  id?: string;\n}\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  height: 52px;\n  border-radius: 15px; \n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  font-weight: bold;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  ${({ dark, disabled }) => {\n    const color = disabled ? colors.purple_50 : colors.purple;\n    return dark ? `\n    background-color: ${color};\n    color: ${colors.white};\n    border: none;\n  ` : `\n    background-color: ${colors.white};\n    color: ${color};\n    border: 1px solid ${color};\n  `;\n  }}\n`;\n","import React, { PropsWithChildren } from 'react';\n\n// Styles\nimport {\n  StyledButton,\n  StyledButtonProps,\n} from './style';\n\nexport interface ButtonProps extends PropsWithChildren<StyledButtonProps> {\n  onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void);\n}\n\nconst Button = React.memo(({ children, ...props }: ButtonProps) => ((\n  <StyledButton\n    type=\"button\"\n    {...props}\n  >\n    {children}\n  </StyledButton>\n)));\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const WizardButtonsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: ${props => `calc(100% - ${props.theme.layout.generalPaddingAmount * 2}px)`};\n  margin: 0 auto;\n\n  button {\n    flex: 1;\n\n    &:first-of-type {\n      margin-left: 0px !important;\n    }\n\n    &:last-of-type {\n      margin-left: 20px;\n    }\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\n\n// Components\nimport Button from 'components/Button';\n\n// Styles\nimport {\n  WizardButtonsContainer,\n} from './style';\n\ninterface WizardButtonsProps {\n  invert?: boolean;\n  leftLabel: string;\n  leftDisabled?: boolean;\n  leftHandler: () => void;\n  rightLabel?: string;\n  rightDisabled?: boolean;\n  rightHandler?: () => void;\n}\n\nconst WizardButtons = React.memo(({\n  invert = false,\n  leftLabel,\n  leftDisabled,\n  leftHandler,\n  rightLabel,\n  rightDisabled,\n  rightHandler,\n}: WizardButtonsProps) => (\n  <WizardButtonsContainer>\n    <Button\n      dark={invert}\n      disabled={leftDisabled}\n      onClick={leftHandler}\n    >\n      {leftLabel}\n    </Button>\n    {\n        rightLabel && rightHandler && (\n          <Button\n            dark={!invert}\n            disabled={rightDisabled}\n            onClick={rightHandler}\n          >\n            {rightLabel}\n          </Button>\n        )\n      }\n  </WizardButtonsContainer>\n));\nexport default React.memo(WizardButtons);\n","/* eslint-disable func-names */\nexport default function () {\n  // Parts copied from https://github.com/chris-rudmin/Recorderjs\n  const BYTES_PER_SAMPLE = 2;\n  const CHANNELS = 1; // 1=mono , 2=Stereo\n  let recorded = [];\n\n  function encode(buffer) {\n    const { length } = buffer;\n    const data = new Uint8Array(length * BYTES_PER_SAMPLE * CHANNELS);\n    for (let i = 0; i < length; i += 1) {\n      const index = i * BYTES_PER_SAMPLE * CHANNELS;\n      let sample = buffer[i];\n      if (sample > 1) {\n        sample = 1;\n      } else if (sample < -1) {\n        sample = -1;\n      }\n      sample *= 32768;\n      data[index] = sample;\n      // eslint-disable-next-line no-bitwise\n      data[index + 1] = sample >> 8;\n    }\n    recorded.push(data);\n  }\n\n  function dump(sampleRate) {\n    const bufferLength = recorded.length ? recorded[0].length : 0;\n    const length = recorded.length * bufferLength;\n    const wav = new Uint8Array(44 + length);\n\n    const view = new DataView(wav.buffer);\n\n    // RIFF identifier 'RIFF'\n    view.setUint32(0, 1380533830, false);\n    // file length minus RIFF identifier length and file description length\n    view.setUint32(4, 36 + length, true);\n    // RIFF type 'WAVE'\n    view.setUint32(8, 1463899717, false);\n    // format chunk identifier 'fmt '\n    view.setUint32(12, 1718449184, false);\n    // format chunk length\n    view.setUint32(16, 16, true);\n    // sample format (raw)\n    view.setUint16(20, 1, true);\n    // channel count\n    view.setUint16(22, CHANNELS, true);\n    // sample rate\n    view.setUint32(24, sampleRate, true); // 44100 Khz\n    // byte rate (channels * sample rate * block align)\n    view.setUint32(28, CHANNELS * sampleRate * BYTES_PER_SAMPLE, true); // kbps = 1411\n    // block align (channel count * bytes per sample)\n    view.setUint16(32, CHANNELS * BYTES_PER_SAMPLE, true);\n    // bits per sample\n    view.setUint16(34, 8 * BYTES_PER_SAMPLE, true); // 16\n    // data chunk identifier 'data'\n    view.setUint32(36, 1684108385, false);\n    // data chunk length\n    view.setUint32(40, length, true);\n\n    for (let i = 0; i < recorded.length; i += 1) {\n      wav.set(recorded[i], i * bufferLength + 44);\n    }\n\n    recorded = [];\n    const msg = [wav.buffer];\n    postMessage(msg, [msg[0]]);\n  }\n\n  this.onmessage = e => {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1]);\n    } else if (e.data[0] === 'close') {\n      this.close();\n    }\n  };\n}\n","/* eslint-disable func-names */\n// import 'babel-polyfill'\n// import lamejs from 'lamejs';\n\nexport default function () {\n  // Note that relative paths don't work when loaded as a blob\n  // https://stackoverflow.com/questions/22172426/using-importsscripts-within-blob-in-a-karma-environment\n  // importScripts('https://localhost:8443/workers/encoders/lame.js') // eslint-disable-line\n\n  const channels = 1; // 1 for mono or 2 for stereo\n  // let sampleRate = 44100 // 44.1khz (normal mp3 samplerate)\n  const kbps = 128; // encode 128kbps mp3\n\n  let mp3encoder = null;\n\n  const maxSamples = 1152;\n\n  let mp3Data = []; // array of Uint8Array\n\n  function init(opts) {\n    /* global lamejs */\n    importScripts(opts.baseUrl + '/workers/encoders/lame.min.js'); // eslint-disable-line\n    mp3encoder = new lamejs.Mp3Encoder(channels, opts.sampleRate, kbps);\n  }\n\n  function floatTo16BitPCM(input, output) {\n    for (let i = 0; i < input.length; i += 1) {\n      const s = Math.max(-1, Math.min(1, input[i]));\n      // eslint-disable-next-line no-param-reassign\n      output[i] = (s < 0 ? s * 0x8000 : s * 0x7FFF);\n    }\n  }\n\n  function convertBuffer(arrayBuffer) {\n    const data = new Float32Array(arrayBuffer);\n    const out = new Int16Array(arrayBuffer.length);\n    floatTo16BitPCM(data, out);\n    return out;\n  }\n\n  function encode(arrayBuffer) {\n    const samplesMono = convertBuffer(arrayBuffer);\n    let remaining = samplesMono.length;\n    for (let i = 0; remaining >= 0; i += maxSamples) {\n      const left = samplesMono.subarray(i, i + maxSamples);\n      const data = mp3encoder.encodeBuffer(left);\n      mp3Data.push(data);\n      remaining -= maxSamples;\n    }\n\n    // var mp3buf = mp3encoder.encodeBuffer(buffer)\n    // if (mp3buf.length > 0) {\n    //   mp3Data.push(mp3buf)\n    // }\n  }\n\n  function dump() {\n    const mp3buf = mp3encoder.flush();\n    if (mp3buf.length > 0) {\n      mp3Data.push(mp3buf);\n    }\n\n    // Probably results in native memory copy\n    postMessage(mp3Data);\n\n    // Would like to do this, but not possible because mp3Data is generic array of Uint8Array, and generic\n    // arrays are not transferrable types.\n    // postMessage(mp3Data, [mp3Data])\n\n    // This might help if/when ever become available again\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\n\n    // For now, though, we have not other option except to build a complete copy in javascript. This means\n    // we temporarily require twice the memory of whatever was recorded.\n\n    mp3Data = [];\n  }\n\n  onmessage = function onmessage(e) {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1]);\n    } else if (e.data[0] === 'init') {\n      init(e.data[1]);\n    } else if (e.data[0] === 'close') {\n      this.close();\n    }\n  };\n}\n","/* eslint-disable */\n/* eslint-disable func-names */\n/* global Flac */\n\nexport default function () {\n  const workersHost = process.env.PUBLIC_URL || process.env.REACT_APP_WORKERS_HOST || 'https://virufy.org/demo';\n  importScripts(`${workersHost}/workers/encoders/libflac.dev.js`); // eslint-disable-line\n\n  let flacEncoder;\n  let CHANNELS = 1;\n  let SAMPLERATE = 44100;\n  let COMPRESSION = 5;\n  let BPS = 16;\n  let flacOk = 1;\n  let flacLength = 0;\n  const flacBuffers = [];\n  let INIT = false;\n  const wavBuffers = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function writeCallbackFn(buffer, bytes) {\n    flacBuffers.push(buffer);\n    flacLength += buffer.byteLength;\n  }\n\n  // HELPER: handle initialization of flac encoder\n  function initFlac() {\n    flacEncoder = Flac.init_libflac_encoder(SAMPLERATE, CHANNELS, BPS, COMPRESSION, 0);\n    /// /\n    if (flacEncoder !== 0) {\n      const statusEncoder = Flac.init_encoder_stream(flacEncoder, writeCallbackFn);\n      flacOk &= (statusEncoder == 0);\n\n      console.log(`flac init     : ${flacOk}`);// DEBUG\n      console.log(`status encoder: ${statusEncoder}`);// DEBUG\n\n      INIT = true;\n    } else {\n      console.error('Error initializing the encoder.');\n    }\n  }\n\n  function init(config) {\n    let finalConfig = config;\n\n    if (!finalConfig) {\n      finalConfig = {\n        bps: BPS, channels: CHANNELS, samplerate: SAMPLERATE, compression: COMPRESSION,\n      };\n    }\n\n    finalConfig.channels = finalConfig.channels ? finalConfig.channels : CHANNELS;\n    finalConfig.samplerate = finalConfig.samplerate ? finalConfig.samplerate : SAMPLERATE;\n    finalConfig.bps = finalConfig.bps ? finalConfig.bps : BPS;\n    finalConfig.compression = finalConfig.compression ? finalConfig.compression : COMPRESSION;\n\n    /// /\n    COMPRESSION = finalConfig.compression;\n    BPS = finalConfig.bps;\n    SAMPLERATE = finalConfig.samplerate;\n    CHANNELS = finalConfig.channels;\n    /// /\n\n    if (!Flac.isReady()) {\n      Flac.onready = function () {\n        setTimeout(() => {\n          initFlac();\n        }, 0);\n      };\n    } else {\n      initFlac();\n    }\n  }\n\n  // HELPER: actually encode PCM data to Flac\n  function doEncodeFlac(audioData) {\n    const bufLength = audioData.length;\n    const bufferI32 = new Uint32Array(bufLength);\n    const view = new DataView(bufferI32.buffer);\n    const volume = 1;\n    let index = 0;\n    for (let i = 0; i < bufLength; i += 1) {\n      view.setInt32(index, (audioData[i] * (0x7FFF * volume)), true);\n      index += 4;\n    }\n\n    const flacReturn = Flac.FLAC__stream_encoder_process_interleaved(\n      flacEncoder, bufferI32, bufferI32.length / CHANNELS,\n    );\n    if (flacReturn != true) {\n      console.log(`Error: encode_buffer_pcm_as_flac returned false. ${flacReturn}`);\n    }\n  }\n\n  // HELPER: handle incoming PCM audio data for Flac encoding:\n  function encodeFlac(audioData) {\n    if (!Flac.isReady()) {\n      // if Flac is not ready yet: buffer the audio\n      wavBuffers.push(audioData);\n      console.info('buffered audio data for Flac encdoing');\n    } else {\n      if (wavBuffers.length > 0) {\n        // if there is buffered audio: encode buffered first (and clear buffer)\n\n        const len = wavBuffers.length;\n        const buffered = wavBuffers.splice(0, len);\n        // eslint-disable-next-line no-plusplus\n        for (let i = 0; i < len; ++i) {\n          doEncodeFlac(buffered[i]);\n        }\n      }\n\n      doEncodeFlac(audioData);\n    }\n  }\n\n  function mergeBuffersUint8(channelBuffer, recordingLength) {\n    const result = new Uint8Array(recordingLength);\n    let offset = 0;\n    const lng = channelBuffer.length;\n    for (let i = 0; i < lng; i += 1) {\n      const buffer = channelBuffer[i];\n      result.set(buffer, offset);\n      offset += buffer.length;\n    }\n    return result;\n  }\n\n  function exportFlacFile(recBuffers, recLength) {\n    // convert buffers into one single buffer\n    const samples = mergeBuffersUint8(recBuffers, recLength);\n\n    // var audioBlob = new Blob([samples], { type: type });\n    const theBlob = new Blob([samples], { type: 'audio/flac' });\n    return theBlob;\n  }\n\n  /*\n   * clear recording buffers\n   */\n  function clear() {\n    flacBuffers.splice(0, flacBuffers.length);\n    flacLength = 0;\n    wavBuffers.splice(0, wavBuffers.length);\n  }\n\n  this.onmessage = function onmessage(e) {\n    if (e.data[0] === 'init') {\n      init(e.data[1]);\n    } else if (e.data[0] === 'encode') {\n      encodeFlac(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      let data;\n      if (!Flac.isReady()) {\n        console.error('Flac was not initialized: could not encode data!');\n      } else {\n        flacOk &= Flac.FLAC__stream_encoder_finish(flacEncoder);\n        console.log(`flac finish: ${flacOk}`);// DEBUG\n        data = exportFlacFile(flacBuffers, flacLength);\n\n        Flac.FLAC__stream_encoder_delete(flacEncoder);\n      }\n\n      clear();\n\n      postMessage(data);\n      INIT = false;\n    }\n  };\n}\n","/* eslint-disable max-len */\n/* eslint-disable consistent-return */\n/* eslint-disable no-underscore-dangle */\n// Vendor Library https://github.com/mogwai/pwa-audio-recorder/tree/master\n\nimport EncoderWav from './encoder-wav-worker';\nimport EncoderMp3 from './encoder-mp3-worker';\nimport EncoderFlac from './encoder-flac-worker';\n// import EncoderOgg from './encoder-ogg-worker';\n\nexport default class RecorderService {\n  constructor(config) {\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n    this.em = document.createDocumentFragment();\n\n    this.state = 'inactive';\n\n    this.chunks = [];\n    this.chunkType = '';\n\n    this.encoderMimeType = 'audio/wav';\n\n    this.config = {\n      broadcastAudioProcessEvents: config.broadcastAudioProcessEvents !== undefined ? config.broadcastAudioProcessEvents : false,\n      createAnalyserNode: config.createAnalyserNode !== undefined ? config.createAnalyserNode : false,\n      createDynamicsCompressorNode: config.createDynamicsCompressorNode !== undefined ? config.createDynamicsCompressorNode : false,\n      forceScriptProcessor: config.forceScriptProcessor !== undefined ? config.forceScriptProcessor : false,\n      manualEncoderId: config.manualEncoderId !== undefined ? config.manualEncoderId : 'wav',\n      micGain: config.micGain !== undefined ? config.micGain : 1.0,\n      processorBufferSize: config.processorBufferSize !== undefined ? config.processorBufferSize : 2048,\n      stopTracksAndCloseCtxWhenFinished: config.stopTracksAndCloseCtxWhenFinished !== undefined ? config.stopTracksAndCloseCtxWhenFinished : true,\n      usingMediaRecorder: config.usingMediaRecorder !== undefined ? config.usingMediaRecorder : typeof window.MediaRecorder !== 'undefined',\n      enableEchoCancellation: config.enableEchoCancellation !== undefined ? config.enableEchoCancellation : true,\n      sampleRate: config.sampleRate !== undefined ? config.sampleRate : 44100,\n      onRecording: config.onRecording,\n      onAudioPress: config.onAudioPress,\n    };\n\n    if (config.onRecording) {\n      this.recordingFn = evt => config.onRecording(evt);\n      this.em.addEventListener('recording', this.recordingFn);\n    }\n    if (config.onAudioProcesss) {\n      this.onAudioProcessFn = evt => config.onAudioProcesss(evt);\n      this.em.addEventListener('onaudioprocess', this.onAudioProcessFn);\n    }\n  }\n\n  cleanup = () => {\n    if (this.config.onRecording) {\n      this.em.removeEventListener('recording', this.recordingFn);\n    }\n    if (this.config.onAudioProcesss) {\n      this.em.removeEventListener('onaudioprocess', this.onAudioProcessFn);\n    }\n  };\n\n  createWorker = fn => {\n    const js = fn\n      .toString()\n      .replace(/^function\\s*\\(\\)\\s*{/, '')\n      .replace(/}$/, '');\n    const blob = new Blob([js]);\n    return new Worker(URL.createObjectURL(blob));\n  };\n\n  startRecording = timeslice => {\n    if (this.state !== 'inactive') {\n      return;\n    }\n\n    // This is the case on ios/chrome, when clicking links from within ios/slack (sometimes), etc.\n    if (\n      !navigator\n      || !navigator.mediaDevices\n      || !navigator.mediaDevices.getUserMedia\n    ) {\n      // alert('Missing support for navigator.mediaDevices.getUserMedia'); // temp: helps when testing for strange issues on ios/safari\n      return;\n    }\n\n    this.audioCtx = new AudioContext({\n      sampleRate: this.config.sampleRate,\n    });\n    this.micGainNode = this.audioCtx.createGain();\n    this.outputGainNode = this.audioCtx.createGain();\n\n    if (this.config.createDynamicsCompressorNode) {\n      this.dynamicsCompressorNode = this.audioCtx.createDynamicsCompressor();\n    }\n\n    if (this.config.createAnalyserNode) {\n      this.analyserNode = this.audioCtx.createAnalyser();\n    }\n\n    // If not using MediaRecorder(i.e. safari and edge), then a script processor is required. It's optional\n    // on browsers using MediaRecorder and is only useful if wanting to do custom analysis or manipulation of\n    // recorded audio data.\n    if (\n      this.config.forceScriptProcessor\n      || this.config.broadcastAudioProcessEvents\n      || !this.config.usingMediaRecorder\n    ) {\n      this.processorNode = this.audioCtx.createScriptProcessor(\n        this.config.processorBufferSize,\n        1,\n        1,\n      ); // TODO: Get the number of channels from mic\n    }\n\n    // Create stream destination on chrome/firefox because, AFAICT, we have no other way of feeding audio graph output\n    // in to MediaRecorderSafari/Edge don't have this method as of 2018-04.\n    if (this.audioCtx.createMediaStreamDestination) {\n      this.destinationNode = this.audioCtx.createMediaStreamDestination();\n    } else {\n      this.destinationNode = this.audioCtx.destination;\n    }\n\n    // Create web worker for doing the encoding\n    if (!this.config.usingMediaRecorder) {\n      if (this.config.manualEncoderId === 'mp3') {\n        this.encoderWorker = this.createWorker(EncoderMp3);\n        const baseUrl = process.env.PUBLIC_URL || 'https://virufy.org/demo';\n        this.encoderWorker.postMessage([\n          'init',\n          { baseUrl, sampleRate: this.audioCtx.sampleRate },\n        ]);\n        this.encoderMimeType = 'audio/mpeg';\n      } else if (this.config.manualEncoderId === 'flac') {\n        this.encoderWorker = this.createWorker(EncoderFlac);\n        this.encoderWorker.postMessage([\n          'init',\n          { sampleRate: this.audioCtx.sampleRate },\n        ]);\n        this.encoderMimeType = 'audio/flac';\n      } else {\n        this.encoderWorker = this.createWorker(EncoderWav);\n        this.encoderMimeType = 'audio/wav';\n      }\n      this.encoderWorker.addEventListener('message', e => {\n        const event = new Event('dataavailable');\n        if (this.config.manualEncoderId === 'ogg' || this.config.manualEncoderId === 'flac') {\n          event.data = e.data;\n        } else {\n          event.data = new Blob(e.data, { type: this.encoderMimeType });\n        }\n        this._onDataAvailable(event);\n      });\n    }\n\n    // Setup media constraints\n    const userMediaConstraints = {\n      audio: {\n        echoCancellation: this.config.enableEchoCancellation,\n      },\n    };\n    if (this.config.deviceId) {\n      userMediaConstraints.audio.deviceId = this.config.deviceId;\n    }\n\n    // This will prompt user for permission if needed\n    return navigator.mediaDevices\n      .getUserMedia(userMediaConstraints)\n      .then(stream => {\n        this._startRecordingWithStream(stream, timeslice);\n      })\n      .catch(error => {\n        // alert(`Error with getUserMedia: ${error.message}`); // temp: helps when testing for strange issues on ios/safari\n        console.log(error);\n      });\n  };\n\n  setMicGain = newGain => {\n    this.config.micGain = newGain;\n    if (this.audioCtx && this.micGainNode) {\n      this.micGainNode.gain.setValueAtTime(newGain, this.audioCtx.currentTime);\n    }\n  };\n\n  _startRecordingWithStream = (stream, timeslice) => {\n    this.micAudioStream = stream;\n\n    this.inputStreamNode = this.audioCtx.createMediaStreamSource(\n      this.micAudioStream,\n    );\n    this.audioCtx = this.inputStreamNode.context;\n\n    // Kind-of a hack to allow hooking in to audioGraph inputStreamNode\n    if (this.onGraphSetupWithInputStream) {\n      this.onGraphSetupWithInputStream(this.inputStreamNode);\n    }\n\n    this.inputStreamNode.connect(this.micGainNode);\n    this.micGainNode.gain.setValueAtTime(\n      this.config.micGain,\n      this.audioCtx.currentTime,\n    );\n\n    let nextNode = this.micGainNode;\n    if (this.dynamicsCompressorNode) {\n      this.micGainNode.connect(this.dynamicsCompressorNode);\n      nextNode = this.dynamicsCompressorNode;\n    }\n\n    this.state = 'recording';\n\n    if (this.processorNode) {\n      nextNode.connect(this.processorNode);\n      this.processorNode.connect(this.outputGainNode);\n      this.processorNode.onaudioprocess = e => this._onAudioProcess(e);\n    } else {\n      nextNode.connect(this.outputGainNode);\n    }\n\n    if (this.analyserNode) {\n      // TODO: If we want the analyser node to receive the processorNode's output, this needs to be changed _and_\n      //       processor node needs to be modified to copy input to output. It currently doesn't because it's not\n      //       needed when doing manual encoding.\n      // this.processorNode.connect(this.analyserNode)\n      nextNode.connect(this.analyserNode);\n    }\n\n    this.outputGainNode.connect(this.destinationNode);\n\n    if (this.config.usingMediaRecorder) {\n      this.mediaRecorder = new MediaRecorder(this.destinationNode.stream, { mimeType: this.encoderMimeType || 'audio/wav' });\n      this.mediaRecorder.addEventListener('dataavailable', evt => this._onDataAvailable(evt));\n      this.mediaRecorder.addEventListener('error', evt => this._onError(evt));\n\n      this.mediaRecorder.start(timeslice);\n    } else {\n      // Output gain to zero to prevent feedback. Seems to matter only on Edge, though seems like should matter\n      // on iOS too.  Matters on chrome when connecting graph to directly to audioCtx.destination, but we are\n      // not able to do that when using MediaRecorder.\n      this.outputGainNode.gain.setValueAtTime(0, this.audioCtx.currentTime);\n      // this.outputGainNode.gain.value = 0\n\n      // Todo: Note that time slicing with manual wav encoderWav won't work. To allow it would require rewriting the encoderWav\n      // to assemble all chunks at end instead of adding header to each chunk.\n      if (timeslice) {\n        console.log(\n          'Time slicing without MediaRecorder is not yet supported. The resulting recording will not be playable.',\n        );\n        this.slicing = setInterval(function anon() {\n          if (this.state === 'recording') {\n            this.encoderWorker.postMessage(['dump', this.context.sampleRate]);\n          }\n        }, timeslice);\n      }\n    }\n  };\n\n  _onAudioProcess = e => {\n    // console.log('onaudioprocess', e)\n    // let inputBuffer = e.inputBuffer\n    // let outputBuffer = e.outputBuffer\n    // console.log(this.micAudioStream)\n    // console.log(this.audioCtx)\n    // console.log(this.micAudioStream.getTracks().forEach((track) => console.log(track)))\n\n    // this.onAudioEm.dispatch(new Event('onaudioprocess', {inputBuffer:inputBuffer,outputBuffer:outputBuffer}))\n\n    if (this.config.broadcastAudioProcessEvents) {\n      this.em.dispatchEvent(\n        new CustomEvent('onaudioprocess', {\n          detail: {\n            inputBuffer: e.inputBuffer,\n            outputBuffer: e.outputBuffer,\n          },\n        }),\n      );\n    }\n\n    // // Example handling:\n    // let inputBuffer = e.inputBuffer\n    // let outputBuffer = e.outputBuffer\n    // // Each channel (usually only one)\n    // for (let channel = 0; channel < outputBuffer.numberOfChannels; channel++) {\n    //   let inputData = inputBuffer.getChannelData(channel)\n    //   let outputData = outputBuffer.getChannelData(channel)\n    //\n    //   // Each sample\n    //   for (let sample = 0; sample < inputBuffer.length; sample++) {\n    //     // Make output equal to the same as the input (thus processor is doing nothing at this time)\n    //     outputData[sample] = inputData[sample]\n    //   }\n    // }\n\n    // When manually encoding (safari/edge), there's no reason to copy data to output buffer.  We set the output\n    // gain to 0 anyways (which is required on Edge if we did copy data to output). However, if using a MediaRecorder\n    // and a processor (all other browsers), then it would be required to copy the data otherwise the graph would\n    // generate no data for the MediaRecorder to consume.\n    // if (this.forceScriptProcessor) {\n\n    // // Copy input to output\n    // let inputBuffer = e.inputBuffer\n    // let outputBuffer = e.outputBuffer\n    // // This doesn't work on iOS/Safari. Guessing it doesn't have copyToChannel support, but haven't verified.\n    // for (let channel = 0; channel < outputBuffer.numberOfChannels; channel++) {\n    //   outputBuffer.copyToChannel(inputBuffer.getChannelData(channel), channel)\n    // }\n\n    // Safari and Edge require manual encoding via web worker. Single channel only for now.\n    // Example stereo encoderWav: https://github.com/MicrosoftEdge/Demos/blob/master/microphone/scripts/recorderworker.js\n    if (!this.config.usingMediaRecorder) {\n      if (this.state === 'recording') {\n        if (this.config.broadcastAudioProcessEvents) {\n          this.encoderWorker.postMessage([\n            'encode',\n            e.outputBuffer.getChannelData(0),\n          ]);\n        } else {\n          this.encoderWorker.postMessage([\n            'encode',\n            e.inputBuffer.getChannelData(0),\n          ]);\n        }\n      }\n    }\n  };\n\n  stopRecording = () => {\n    if (this.state === 'inactive') {\n      return;\n    }\n    if (this.config.usingMediaRecorder) {\n      this.state = 'inactive';\n      this.mediaRecorder.stop();\n    } else {\n      this.state = 'inactive';\n      this.encoderWorker.postMessage(['dump', this.audioCtx.sampleRate]);\n      clearInterval(this.slicing);\n\n      // TODO: There should be a more robust way to handle this\n      // Without something like this, I think  the last recorded sample could be lost due to timing\n      // setTimeout(() => {\n      //   this.state = 'inactive'\n      //   this.encoderWorker.postMessage(['dump', this.audioCtx.sampleRate])\n      // }, 100)\n    }\n  };\n\n  _onDataAvailable = evt => {\n    // console.log('state', this.mediaRecorder.state)\n    // console.log('evt.data', evt.data)\n\n    this.chunks.push(evt.data);\n    this.chunkType = evt.data.type;\n\n    if (this.state !== 'inactive') {\n      return;\n    }\n\n    const blob = new Blob(this.chunks, { type: this.chunkType });\n    const blobUrl = URL.createObjectURL(blob);\n    const recording = {\n      ts: new Date().getTime(),\n      blobUrl,\n      mimeType: blob.type,\n      size: blob.size,\n    };\n\n    this.chunks = [];\n    this.chunkType = null;\n\n    if (this.destinationNode) {\n      this.destinationNode.disconnect();\n      this.destinationNode = null;\n    }\n    if (this.outputGainNode) {\n      this.outputGainNode.disconnect();\n      this.outputGainNode = null;\n    }\n    if (this.analyserNode) {\n      this.analyserNode.disconnect();\n      this.analyserNode = null;\n    }\n    if (this.processorNode) {\n      this.processorNode.disconnect();\n      this.processorNode = null;\n    }\n    if (this.encoderWorker) {\n      this.encoderWorker.postMessage(['close']);\n      this.encoderWorker = null;\n    }\n    if (this.dynamicsCompressorNode) {\n      this.dynamicsCompressorNode.disconnect();\n      this.dynamicsCompressorNode = null;\n    }\n    if (this.micGainNode) {\n      this.micGainNode.disconnect();\n      this.micGainNode = null;\n    }\n    if (this.inputStreamNode) {\n      this.inputStreamNode.disconnect();\n      this.inputStreamNode = null;\n    }\n\n    if (this.config.stopTracksAndCloseCtxWhenFinished) {\n      // This removes the red bar in iOS/Safari\n      this.micAudioStream.getTracks().forEach(track => track.stop());\n      this.micAudioStream = null;\n\n      this.audioCtx.close();\n      this.audioCtx = null;\n    }\n\n    this.em.dispatchEvent(\n      new CustomEvent('recording', { detail: { recording } }),\n    );\n  };\n\n  _onError = evt => {\n    console.log('error', evt);\n    this.em.dispatchEvent(new Event('error'));\n    // alert(`error:${evt}`); // for debugging purposes\n  };\n}\n","import styled from 'styled-components';\n\nexport const ModalBody = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    margin: auto;\n`;\n\nexport const ModalTitle = styled.div`\n  font-family: 'Biko';\n  font-size: 30px;\n  line-height: 30px;\n  margin-bottom: 10px;\n  font-weight: 600;\n`;\n\nexport const ModalContent = styled.div`\n  font-family: 'Source Sans Pro';\n  text-align: center;\n  line-height: 25px;\n  font-size: 18px;\n  margin-top: 10px;\n  margin-bottom: 30px;\n`;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { PropsWithChildren } from 'react';\nimport Modal from 'react-modal';\nimport { useTranslation } from 'react-i18next';\nimport Button from 'components/Button';\n\n// Style\nimport {\n  ModalBody, ModalTitle, ModalContent,\n} from './style';\n\nexport interface ConfirmationModalProps {\n  isOpen: boolean;\n  modalTitle: string;\n  onConfirm?: () => void;\n}\n\nModal.setAppElement('#root');\n\nconst RecordErrorModal = React.memo(({\n  modalTitle,\n  children,\n  onConfirm,\n  ...props\n}: PropsWithChildren<ConfirmationModalProps>) => {\n  // Handlers\n\n  const { t } = useTranslation();\n\n  const customStyles = {\n    content: {\n      height: '281px',\n      maxWidth: '348px',\n      margin: 'auto',\n      borderRadius: '10px',\n      border: 'none',\n    },\n    overlay: { backgroundColor: 'rgba(0, 0, 0, 0.5)' },\n  };\n\n  return (\n    <Modal\n      {...props}\n      style={customStyles}\n    >\n      <ModalBody className=\"ModalBody\">\n        <ModalTitle>{modalTitle}</ModalTitle>\n        <ModalContent>{children}</ModalContent>\n        <Button onClick={onConfirm} dark>\n          {t('recordingsIntroduction:retryButton', 'Retry')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  );\n});\n\nexport default RecordErrorModal;\n","export default __webpack_public_path__ + \"static/media/start.e0d4d3a6.svg\";","import styled from 'styled-components';\nimport { colors } from 'theme';\n\nexport const MicRecorderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nexport const MicButtonsContainer = styled.div`\n  display:flex;\n  justify-content: space-between;\n  width: 144px;\n  margin: auto;\n`;\n\nexport const MicButtonWithText = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const MicNote = styled.p`\n  font-size: 14px;\n  color: ${colors.lightDarkGray};\n  margin-top: 8px;\n  margin-bottom: 0px;\n`;\nexport const MicRecorderButton = styled.button<{ disabled?: boolean; opacity?: boolean}>`\n  background-color: ${colors.purple};\n  width: 56px;\n  height: 56px;\n  position: relative;\n  outline: none !important;\n  border: none;\n  border-radius: 50%;\n  padding: 0;\n  transition: background-color 0.25s;\n  opacity: ${props => (props.disabled || props.opacity ? '0.5' : '1')};\n\n  @supports not (-webkit-touch-callout: none) {\n    /* CSS for other than iOS devices */\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  &:active {\n    background-color: ${colors.purple};\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: transparent;\n    z-index: 1;\n    border-radius: 50%;\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    width: 66px;\n    height: 66px;\n  }\n`;\n\nexport const MicRecorderImage = styled.img`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  transition: opacity 0.25s;\n`;\n\nexport const MicRecorderStartImage = styled(MicRecorderImage)`\n  width: 27px;\n  height: 27px;\n`;\n\nexport const MicRecorderStopImage = styled(MicRecorderImage)`\n  width: 15px;\n  height: 15px;\n`;\n\nexport const MicRecorderTimerContainer = styled.div`\n  width: 70px;\n  height: 41px;\n  font-size: 1.25rem;\n  color: ${colors.purple};\n  font-weight: bold;\n  font-family: 'Source Sans Pro';\n  border: 1px solid ${colors.purple};\n  border-radius: 15px;\n  display: flex; \n  align-items: center; \n  justify-content: center; \n  margin-bottom: 28px;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    font-size: 1.75rem;\n    margin-top: 22px;\n  }\n`;\n\nexport const MicRecorderTimerReleaseTextContainer = styled.div`\n  font-size: 16px;\n  line-height: 20px;\n  color: ${colors.red};\n  font-family: 'Source Sans Pro';\n  display: flex; \n  margin-left: 20px;\n  margin-top:10px;\n`;\n\nexport const MicRecorderTextP = styled.p<{ show?: boolean }>`\n  visibility: ${props => (props.show ? 'flex' : 'hidden')};\n`;\n","/* eslint-disable react/require-default-props */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport Timer from 'react-compound-timer';\nimport { useTranslation } from 'react-i18next';\n// Utils\nimport RecorderService from 'helper/audio/RecorderService';\nimport FileHelper from 'helper/fileHelper';\n\n// Modals\nimport RecordErrorModal from 'modals/RecordErrorModal';\n\n// Images\nimport StartSVG from 'assets/icons/start.svg';\nimport StopSVG from 'assets/icons/stop.svg';\n\n// Styles\nimport {\n  MicRecorderContainer,\n  MicRecorderButton,\n  MicRecorderStartImage,\n  MicRecorderStopImage,\n  MicRecorderTimerContainer,\n  MicRecorderTimerReleaseTextContainer,\n  MicRecorderTextP,\n  MicButtonsContainer,\n  MicNote,\n  MicButtonWithText,\n} from './style';\n\ninterface MicRecorderProps {\n  className?: string;\n  maxTimeInSeconds?: number;\n  onNewRecord: (file: File, humanReadableSize: string) => void;\n  delay?: number;\n  recordingFile: any;\n}\n\nconst baseConfig = {\n  usingMediaRecorder: false,\n  sampleRate: 44100,\n  manualEncoderId: 'wav', // wav / mp3 / flac\n  processorBufferSize: 2048, // 4096 flac / 2048 wav\n};\n\nexport interface RecorderServiceType {\n  config: {\n    broadcastAudioProcessEvents: boolean; // default: false\n    createAnalyserNode: boolean; // default: false\n    createDynamicsCompressorNode: boolean; // default: false\n    forceScriptProcessor: false; // default: false\n    manualEncoderId: string; // default: 'wav'\n    micGain: number; // default: 1.0\n    processorBufferSize: number; // default: 2048\n    stopTracksAndCloseCtxWhenFinished: boolean; // default: true\n    usingMediaRecorder: boolean; // default: typeof window.MediaRecorder !== 'undefined'\n    enableEchoCancellation: boolean; // default: true\n    sampleRate: number; // default: 44100\n  };\n  em: DocumentFragment;\n  startRecording: (timeslice?: number) => Promise<void>;\n  stopRecording: () => void;\n  cleanup: () => void;\n}\n\nconst MicRecorder = ({\n  className = '',\n  maxTimeInSeconds = 30, // 30 segs\n  onNewRecord,\n  delay = 500, // 500ms\n  recordingFile,\n}: MicRecorderProps) => {\n  // Hooks\n  const { t } = useTranslation();\n\n  // Refs\n  const recordingService = React.useRef<RecorderServiceType>();\n  const audioSamples = React.useRef<number>(0);\n  const timerRef = React.useRef<any>();\n  const timeout = React.useRef<NodeJS.Timeout>();\n  const target = React.useRef<HTMLButtonElement>();\n\n  // States\n  const [micAllowed, setMicAllowed] = React.useState<boolean>(true);\n  const [recordingInProgress, setRecordingInProgress] = React.useState<boolean>();\n  const [showReleaseText, setShowReleaseText] = React.useState<boolean>(false);\n  const [showShortRecordingText, setShowShortRecordingText] = React.useState<boolean>(false);\n  const [longPressTriggered, setLongPressTriggered] = React.useState<boolean>(false);\n\n  // Handlers\n  const onAudioProcess = React.useCallback((e: any) => {\n    audioSamples.current += 1;\n    const { inputBuffer, outputBuffer } = e.detail;\n    for (let channel = 0; channel < outputBuffer.numberOfChannels; channel += 1) {\n      const inputData = inputBuffer.getChannelData(channel);\n      const outputData = outputBuffer.getChannelData(channel);\n      // Each sample\n      for (let sample = 0; sample < inputBuffer.length; sample += 1) {\n        outputData[sample] = inputData[sample];\n      }\n    }\n  }, []);\n\n  const onNewRecording = React.useCallback(async (e: any) => {\n    const { detail } = e;\n    const { recording } = detail;\n    const blob = await fetch(recording.blobUrl).then(r => r.blob());\n    const fileName = `Filename.${baseConfig.manualEncoderId}`;\n\n    const file = FileHelper.blobToFile(blob, fileName);\n    const humanReadableSize = FileHelper.sizeAsHuman(file.size, true);\n\n    onNewRecord(file, humanReadableSize);\n  }, [onNewRecord]);\n\n  // Effects\n  React.useEffect(() => {\n    recordingService.current = new RecorderService({\n      ...baseConfig,\n      onRecording: onNewRecording,\n      onAudioProcesss: onAudioProcess,\n    }) as RecorderServiceType;\n\n    const userMediaConstraints = {\n      audio: {\n        echoCancellation: recordingService.current.config.enableEchoCancellation,\n      },\n    };\n    navigator.mediaDevices.getUserMedia(userMediaConstraints)\n      .then(() => {\n        setMicAllowed(true);\n      })\n      .catch(() => {\n        setMicAllowed(false);\n      });\n\n    if (recordingFile) {\n      const file = recordingFile as File;\n      if (file.size) {\n        const audio = new Audio(URL.createObjectURL(file));\n        audio.load();\n        const listenerFn = () => {\n          timerRef.current?.setTime(audio.duration * 1000);\n          audio.removeEventListener('loadedmetadata', listenerFn);\n        };\n        audio.addEventListener('loadedmetadata', listenerFn);\n      }\n    }\n\n    return () => {\n      if (recordingService.current) {\n        recordingService.current.cleanup();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Handlers\n  const handleStartRecording = React.useCallback(() => {\n    if (recordingService.current) {\n      audioSamples.current = 0;\n      recordingService.current\n        .startRecording()\n        .then(() => {\n          setRecordingInProgress(true);\n          setShowShortRecordingText(false);\n          if (timerRef.current) {\n            timerRef.current.reset();\n            timerRef.current?.setTime(0);\n            timerRef.current.start();\n          }\n        })\n        .catch((error: any) => console.error('ERROR', error));\n    }\n  }, []);\n\n  const handleStopRecording = React.useCallback(() => {\n    if (recordingService.current) {\n      recordingService.current.stopRecording();\n      setRecordingInProgress(false);\n      if (timerRef.current) {\n        if (timerRef.current.getTime() / 1000 < 2) {\n          setShowShortRecordingText(true);\n        }\n        timerRef.current.stop();\n      }\n    }\n  }, []);\n\n  const handleFormatValue = React.useCallback((value: number) => (value < 10 ? `0${value}` : value), []);\n\n  const preventDefault = (event: any) => {\n    if (!('touches' in event)) event.preventDefault();\n  };\n\n  const handleStartLongPress = React.useCallback(\n    event => {\n      if (event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n      timeout.current = setTimeout(() => {\n        setShowReleaseText(true);\n        setLongPressTriggered(true);\n        setShowShortRecordingText(false);\n      }, delay);\n    },\n    [delay],\n  );\n\n  const handleEndLongPress = React.useCallback(() => {\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n    }\n    if (longPressTriggered) {\n      setShowReleaseText(false);\n    }\n    setLongPressTriggered(false);\n    if (target.current) {\n      target.current.removeEventListener('touchend', preventDefault);\n    }\n  },\n  [longPressTriggered]);\n\n  return (\n    <MicRecorderContainer className={className}>\n      <MicRecorderTimerReleaseTextContainer>\n        {!showShortRecordingText\n          && (\n            <MicRecorderTextP\n              show={showReleaseText}\n            >\n              {recordingInProgress ? t('recordingsIntroduction:releaseButtonStop') : t('recordingsIntroduction:releaseButtonStart')}\n            </MicRecorderTextP>\n          )}\n        <RecordErrorModal\n          isOpen={showShortRecordingText}\n          modalTitle=\"Oops.\"\n          onConfirm={handleStartRecording}\n        >\n          {t('recordingsIntroduction:shortRecording')}\n        </RecordErrorModal>\n      </MicRecorderTimerReleaseTextContainer>\n      <MicRecorderTimerContainer>\n        <Timer\n          ref={timerRef}\n          startImmediately={false}\n          checkpoints={[\n            {\n              time: maxTimeInSeconds * 1000,\n              callback: handleStopRecording,\n            },\n          ]}\n        >\n          <Timer.Minutes />\n          :\n          <Timer.Seconds formatValue={handleFormatValue} />\n        </Timer>\n      </MicRecorderTimerContainer>\n      <MicButtonsContainer>\n        <MicButtonWithText>\n          <MicRecorderButton\n            disabled={!micAllowed || recordingInProgress}\n            onClick={handleStartRecording}\n            onMouseDown={handleStartLongPress}\n            onMouseUp={handleEndLongPress}\n            onTouchStart={handleStartLongPress}\n            onTouchEnd={handleEndLongPress}\n            onMouseLeave={handleEndLongPress}\n          >\n            <MicRecorderStartImage\n              src={StartSVG}\n              alt=\"Start\"\n            />\n          </MicRecorderButton>\n          <MicNote>{t('recordingsIntroduction:recordCough.record')}</MicNote>\n        </MicButtonWithText>\n        <MicButtonWithText>\n          <MicRecorderButton\n            disabled={!micAllowed || !recordingInProgress}\n            onClick={handleStopRecording}\n            onMouseDown={handleStartLongPress}\n            onMouseUp={handleEndLongPress}\n            onTouchStart={handleStartLongPress}\n            onTouchEnd={handleEndLongPress}\n            onMouseLeave={handleEndLongPress}\n          >\n            <MicRecorderStopImage\n              src={StopSVG}\n              alt=\"Stop\"\n            />\n          </MicRecorderButton>\n          <MicNote>{t('recordingsIntroduction:recordCough.stop')}</MicNote>\n        </MicButtonWithText>\n      </MicButtonsContainer>\n    </MicRecorderContainer>\n  );\n};\n\nexport default React.memo(MicRecorder);\n","export default __webpack_public_path__ + \"static/media/upload.21eec1c7.svg\";","import React from 'react';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\n\n// Form\nimport { Controller, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\n// Components\nimport MicRecorder from 'components/MicRecorder';\nimport WizardButtons from 'components/WizardButtons';\n\n// Images\nimport UploadSVG from 'assets/icons/upload.svg';\n\n// Styles\nimport {\n  MainContainer,\n  UploadContainer,\n  UploadImage,\n  UploadText,\n  MicContainer,\n} from './style';\n\nconst audioMaxSizeInMb = 5;\n\nconst schema = Yup.object({\n  recordingFile: Yup.mixed()\n    .required('ERROR.FILE_REQUIRED')\n    .test('fileSize', 'ERROR.FILE_SIZE', (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const { size } = file;\n        return (size <= 1024 ** 3 * audioMaxSizeInMb);\n      }\n      return !!value;\n    })\n    .test('fileDuration', 'ERROR.FILE_DURATION', async (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const audio = new Audio(URL.createObjectURL(file));\n        audio.load();\n        await new Promise(resolver => audio.addEventListener('loadedmetadata', resolver));\n        const duration: number = await new Promise(resolver => {\n          if (audio.duration !== Infinity) {\n            resolver(audio.duration);\n          }\n          audio.addEventListener('durationchange', () => {\n            audio.remove();\n            resolver(audio.duration);\n          });\n          audio.volume = 0;\n          audio.currentTime = 24 * 60 * 60; // Unprobable time\n          audio.play();\n        });\n        return (duration >= 2);\n      }\n      return !!value;\n    }),\n}).defined();\n\nexport type RecordType = Yup.InferType<typeof schema>;\n\ninterface RecordProps {\n  onNext: (values: RecordType) => void,\n  onManualUpload: () => void,\n  defaultValues: RecordType,\n  currentLogic: string,\n  action:any,\n}\n\nconst Record = ({\n  onNext,\n  onManualUpload,\n  defaultValues,\n  currentLogic,\n  action,\n}: RecordProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo:\n      document && (document.getElementById('wizard-buttons') as HTMLDivElement),\n  });\n  const {\n    handleSubmit, control, getValues, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues,\n    resolver: yupResolver(schema),\n  });\n  const { t } = useTranslation();\n\n  const { isValid } = formState;\n\n  // Refs\n  const micKey = React.useRef<number>(1);\n\n  const onManualUploadWithFile = () => {\n    action({\n      [currentLogic]: {\n        recordingFile: getValues('recordingFile') || null,\n        uploadedFile: null,\n      },\n    });\n    onManualUpload?.();\n  };\n\n  return (\n    <>\n      <MainContainer>\n        <MicContainer>\n          <Controller\n            control={control}\n            name=\"recordingFile\"\n            render={({ onChange }) => (\n              <MicRecorder\n                key={micKey.current} // On delete, easy re-mount a new mic recorder\n                onNewRecord={onChange}\n                recordingFile={defaultValues?.recordingFile}\n              />\n            )}\n          />\n        </MicContainer>\n\n        <Portal>\n          <WizardButtons\n            invert\n            leftLabel={t('recordingsRecord:next')}\n            leftDisabled={!isValid}\n            leftHandler={handleSubmit(onNext)}\n          />\n          {/* Upload Container */}\n          <UploadContainer onClick={onManualUploadWithFile}>\n            <UploadImage src={UploadSVG} />\n            <UploadText>{t('recordingsRecord:upload')}</UploadText>\n          </UploadContainer>\n        </Portal>\n      </MainContainer>\n    </>\n  );\n};\n\nexport default React.memo(Record);\n","/* eslint-disable no-plusplus */\n/* eslint-disable no-param-reassign */\n\nconst sizeAsHuman = (bytes: number, si?: boolean) => {\n  const thresh = si ? 1000 : 1024;\n  if (Math.abs(bytes) < thresh) {\n    return `${bytes} B`;\n  }\n  const units = si\n    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n  let u = -1;\n  do {\n    bytes /= thresh;\n    ++u;\n  } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n  return `${bytes.toFixed(1)} ${units[u]}`;\n};\n\nconst blobToFile = (theBlob: Blob, fileName:string): File => {\n  const b: any = theBlob;\n  // A Blob() is almost a File() - it's just missing the two properties below which we will add\n  b.lastModifiedDate = new Date();\n  b.name = fileName;\n\n  // Cast to a File() type\n  return theBlob as File;\n};\n\nexport default {\n  sizeAsHuman,\n  blobToFile,\n};\n","export default __webpack_public_path__ + \"static/media/stop.e6f44abd.svg\";","import styled from 'styled-components';\nimport { BlackText } from 'components/Texts';\nimport { colors } from 'theme';\n\nimport StopSVG from 'assets/icons/stop.svg';\n\nexport const MainContainer = styled.div`\n  padding: 0px 0px;\n`;\n\nexport const Text = styled(BlackText)`\n  color: ${props => props.theme.colors.darkBlack};\n  margin-bottom: 2px;\n  text-align: left;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n    margin: 0 auto;\n    font-size: 16px;\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    @media (orientation: portrait) {\n      margin-bottom: 248px;\n    }\n\n    @media (orientation: landscape) {\n      margin-bottom: 24px;\n    }\n  }\n`;\n\nexport const MicContainer = styled.div``;\n\nexport const UploadContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px 20px;\n  margin: 20px auto;\n  width: fit-content;\n\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    padding: 0px 22px;\n    margin: 22px auto;\n  }\n`;\n\nexport const UploadImage = styled.img`\n  cursor: pointer;\n  width: 13px;\n  height: 12px;\n  margin-right: 7px;\n`;\n\nexport const UploadText = styled.div`\n  cursor: pointer;\n  font-family: Source Sans Pro;\n  font-weight: bold;\n  font-size: 0.75rem;\n  line-height: 24px;\n  color: ${colors.darkBlack};\n`;\n\nexport const StopImg = styled.img.attrs(() => ({ src: StopSVG }))`\n  display: inline;\n  height: 10px;\n  margin: 0px 2px 4px;\n`;\n"],"sourceRoot":""}