{"version":3,"sources":["components/Layout/Layout.ts","components/Wizard/style.ts","components/Wizard/Wizard.tsx","containers/SubmitSteps/SubmitSteps.tsx","containers/SubmitSteps/index.ts"],"names":["Layout","styled","div","props","theme","breakpoints","tablet","WizardContainer","StepContainer","WizardNavControlPortal","AsyncLoad","loadable","container","fallback","cacheKey","Wizard","steps","children","match","useRouteMatch","location","useLocation","React","useState","loadSteps","setLoadSteps","pathList","useMemo","base","url","replace","map","step","path","useEffect","timing","duration","exact","Array","isArray","s","render","componentPath","id","memo","StoreKey","createStore","recordYourCough","recordingFile","undefined","uploadedFile","name","middleWares","storageType","window","localStorage","baseUrl","baseComponentPath","middleComponentPathRecording","recordYourCoughLogic","storeKey","previousStep","nextStep","otherSteps","manualUploadStep","metadata","currentLogic","SubmitSteps","state","useStateMachine","history","useHistory","problemRoute","inputState","out","toTest","push","file","route","itemWithProblem","find","toTestItem","size","checkFileConsistencyProblem","WrapperSubmitSteps"],"mappings":"2ZAEA,IASeA,EATAC,UAAOC,IAAV,KACW,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,YAAYC,U,4TCDjD,IAAMC,EAAkBN,UAAOC,IAAV,KAOfM,EAAgBP,UAAOC,IAAV,KAIbO,EAAyBR,UAAOC,IAAV,KCW7BQ,EAAYC,aAAS,gBAAGC,EAAH,EAAGA,UAAH,OAAmC,OAAO,YAAcA,MAAc,CAC/FC,SAAU,8CACVC,SAAU,qBAAGF,aAOf,IAAMG,EAAS,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,SACjBC,EAAQC,cACRC,EAAWC,cAF2D,EAG1CC,IAAMC,UAAS,GAH2B,mBAGrEC,EAHqE,KAG1DC,EAH0D,KAKtEC,EAAWJ,IAAMK,SAAQ,WAC7B,IAAMC,EAAiBV,EAAMW,IATnBC,QAAQ,MAAO,IAUzB,OAAOd,EAAMe,KAAI,SAAAC,GAAI,OAAIJ,EAAOI,EAAKC,UACpC,CAACf,EAAMW,IAAKb,IAMf,OAJAM,IAAMY,WAAU,WACdT,GAAa,KACZ,IAGD,cAAC,IAAD,UACE,eAAClB,EAAD,WACE,cAACC,EAAD,UAEIgB,GACE,cAAC,IAAD,CACEJ,SAAUA,EACVe,OAAO,cACPC,SAAU,IACVV,SAAUA,EAJZ,SAOIV,EAAMe,KAAI,SAAAC,GAAI,OACZ,cAAC,IAAD,CAEEK,OAAK,EACLJ,KAAMK,MAAMC,QAAQP,EAAKC,MACrBD,EAAKC,KAAKF,KAAI,SAAAS,GAAC,OAAKtB,EAAMe,KAAOO,KACjCtB,EAAMe,KAAOD,EAAKC,KACtBQ,OAAQ,kBACN,cAAC,EAAD,UACE,cAAC/B,EAAD,aACEE,UAAWoB,EAAKU,eACZV,EAAK7B,YATV6B,EAAKU,sBAqBxB,cAACjC,EAAD,CACEkC,GAAG,iBADL,SAGG1B,UAOIK,MAAMsB,KAAK7B,I,wGCvFpB8B,EAAW,eAEjBC,YAAY,eACTD,EAAW,CACVE,gBAAiB,CACfC,mBAAeC,EACfC,kBAAcD,KAGjB,CACDE,KAAM,eACNC,YAAa,GACbC,YAAaC,OAAOC,eAGtB,IAAMC,EAAU,gBACVC,EAAoB,cACpBC,EAA+B,kBAE/BC,EAAuB,kBAEvB3C,EAAuB,CAE3B,CACEiB,KAAM,qBACNS,cAAc,GAAD,OAAKe,EAAL,YAA0BC,EAA1B,iBACbvD,MAAO,CACLyD,SAAUf,EACVgB,aAAc,kBACdC,SAAS,GAAD,OAAKN,EAAL,sBACRO,WAAY,CACVC,iBAAiB,GAAD,OAAKR,EAAL,8BAElBS,SAAU,CACRC,aAAcP,KAIpB,CACE1B,KAAM,4BACNS,cAAc,GAAD,OAAKe,EAAL,YAA0BC,EAA1B,uBACbvD,MAAO,CACLyD,SAAUf,EACVgB,aAAa,GAAD,OAAKL,EAAL,sBACZM,SAAS,GAAD,OAAKN,EAAL,sBACRS,SAAU,CACRC,aAAcP,KAIpB,CACE1B,KAAM,qBACNS,cAAc,GAAD,OAAKe,EAAL,YAA0BC,EAA1B,gBACbvD,MAAO,CACLyD,SAAUf,EACVgB,aAAa,GAAD,OAAKL,EAAL,sBACZM,SAAS,GAAD,OAAKN,EAAL,sBACRS,SAAU,CACRC,aAAcP,KAKpB,CACE1B,KAAM,qBACNS,cAAc,GAAD,OAAKe,EAAL,YA/CqB,aA+CrB,qBACbtD,MAAO,CACLyD,SAAUf,EACVgB,aAAa,GAAD,OAAKL,EAAL,sBACZM,SAAU,MAKVK,EAAc,WAAM,IAEhBC,EAAUC,cAAVD,MACFE,EAAUC,cA4ChB,OAzCAjD,IAAMY,WAAU,WACd,IAiCMsC,EA1B8B,SAACC,GACnC,IAAIC,EAAM,KAEV,GAAID,EAAW5B,GAAW,CAAC,IACjBE,EAAoB0B,EAAW5B,GAA/BE,gBACF4B,EAAS,GAEf,GAAI5B,EAAiB,CAAC,IACZC,EAAgCD,EAAhCC,cAAeE,EAAiBH,EAAjBG,aACnBF,GACF2B,EAAOC,KAAK,CAAEC,KAAM7B,EAAe8B,MAAO,uBAExC5B,GACFyB,EAAOC,KAAK,CAAEC,KAAM3B,EAAc4B,MAAO,8BAI7C,IAAMC,EAAkBJ,EAAOK,MAAK,SAAAC,GAAU,UAxBxBJ,EAwB6CI,EAAWJ,YAvBtD5B,IAAd4B,EAAKK,MADM,IAACL,KAyBlBE,IACFL,EAAMK,EAAgBD,OAI1B,OAAOJ,EAGYS,CAA4Bf,GAC7CI,GACFF,EAAQM,KAAR,WAAiB/B,GAAjB,OAA4B2B,MAG7B,IAEI,MAGHY,EAAqB,kBACzB,cAAC,IAAD,CACEpE,MAAOA,EADT,SAGE,cAACmD,EAAD,OAIW7C,cAAMsB,KAAKwC,I,iCC1I1B","file":"static/js/16.5570d029.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Layout = styled.div`\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    margin: auto;\n\n    max-width: 768px;\n    width: 100%;\n  }\n`;\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const WizardContainer = styled.div`\n  display: flex;\n  flex-direction:column;\n\n  height:100%;\n`;\n\nexport const StepContainer = styled.div`\n  height: 100%;\n`;\n\nexport const WizardNavControlPortal = styled.div`\n  margin-bottom: 16px;\n`;\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport SlideRoutes from 'react-slide-routes';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport { StateMachineProvider } from 'little-state-machine';\n\n// Components\nimport Layout from 'components/Layout/';\n\n// Style\nimport {\n  WizardContainer,\n  StepContainer,\n  WizardNavControlPortal,\n} from './style';\n\ninterface WizardProps {\n  steps: Wizard.Step[];\n}\n\ninterface AsyncLoadProps extends Partial<Wizard.StepProps> {\n  container: string;\n}\n\nconst AsyncLoad = loadable(({ container }: AsyncLoadProps) => import(`containers/${container}`), {\n  fallback: <div>Loading ...</div>,\n  cacheKey: ({ container }: AsyncLoadProps) => container,\n});\n\nfunction clearPath(path: string) {\n  return path.replace(/\\/$/, '');\n}\n\nconst Wizard = ({ steps, children }: React.PropsWithChildren<WizardProps>) => {\n  const match = useRouteMatch();\n  const location = useLocation();\n  const [loadSteps, setLoadSteps] = React.useState(false);\n\n  const pathList = React.useMemo(() => {\n    const base = clearPath(match.url);\n    return steps.map(step => base + step.path);\n  }, [match.url, steps]);\n\n  React.useEffect(() => {\n    setLoadSteps(true);\n  }, []);\n\n  return (\n    <StateMachineProvider>\n      <WizardContainer>\n        <StepContainer>\n          {\n            loadSteps && (\n              <SlideRoutes\n                location={location}\n                timing=\"ease-in-out\"\n                duration={500}\n                pathList={pathList}\n              >\n                {\n                  steps.map(step => (\n                    <Route\n                      key={step.componentPath}\n                      exact\n                      path={Array.isArray(step.path)\n                        ? step.path.map(s => (match.path + s))\n                        : match.path + step.path}\n                      render={() => (\n                        <Layout>\n                          <AsyncLoad\n                            container={step.componentPath}\n                            {...step.props}\n                          />\n                        </Layout>\n\n                      )}\n                    />\n                  ))\n                }\n              </SlideRoutes>\n            )\n          }\n        </StepContainer>\n        <WizardNavControlPortal\n          id=\"wizard-buttons\"\n        >\n          {children}\n        </WizardNavControlPortal>\n      </WizardContainer>\n    </StateMachineProvider>\n  );\n};\n\nexport default React.memo(Wizard);\n","import React from 'react';\nimport { createStore, useStateMachine } from 'little-state-machine';\nimport { useHistory } from 'react-router-dom';\nimport Wizard from 'components/Wizard';\n\n// Wizard\nconst StoreKey = 'submit-steps';\n\ncreateStore({\n  [StoreKey]: {\n    recordYourCough: {\n      recordingFile: undefined,\n      uploadedFile: undefined,\n    },\n  },\n}, {\n  name: 'VirufyWizard',\n  middleWares: [],\n  storageType: window.localStorage,\n});\n\nconst baseUrl = '/submit-steps';\nconst baseComponentPath = 'SubmitSteps';\nconst middleComponentPathRecording = 'RecordingsSteps';\nconst middleComponentPathSubmission = 'Submission';\nconst recordYourCoughLogic = 'recordYourCough';\n\nconst steps: Wizard.Step[] = [\n  // Record Your Cough Steps\n  {\n    path: '/step-record/cough',\n    componentPath: `${baseComponentPath}/${middleComponentPathRecording}/Introduction`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: '/welcome/step-4',\n      nextStep: `${baseUrl}/step-listen/cough`,\n      otherSteps: {\n        manualUploadStep: `${baseUrl}/step-manual-upload/cough`,\n      },\n      metadata: {\n        currentLogic: recordYourCoughLogic,\n      },\n    },\n  },\n  {\n    path: '/step-manual-upload/cough',\n    componentPath: `${baseComponentPath}/${middleComponentPathRecording}/RecordManualUpload`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}/step-record/cough`,\n      nextStep: `${baseUrl}/step-listen/cough`,\n      metadata: {\n        currentLogic: recordYourCoughLogic,\n      },\n    },\n  },\n  {\n    path: '/step-listen/cough',\n    componentPath: `${baseComponentPath}/${middleComponentPathRecording}/ListenAudio`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}/step-record/cough`,\n      nextStep: `${baseUrl}/prediction-result`,\n      metadata: {\n        currentLogic: recordYourCoughLogic,\n      },\n    },\n  },\n  // Submission\n  {\n    path: '/prediction-result',\n    componentPath: `${baseComponentPath}/${middleComponentPathSubmission}/PredictionResult`,\n    props: {\n      storeKey: StoreKey,\n      previousStep: `${baseUrl}/step-record/cough`,\n      nextStep: '',\n    },\n  },\n];\n\nconst SubmitSteps = () => {\n  // Hooks\n  const { state } = useStateMachine();\n  const history = useHistory();\n\n  // Effects\n  React.useEffect(() => {\n    const checkFileProblem = (file: File) => {\n      if (file && file.size === undefined) {\n        return true;\n      }\n      return false;\n    };\n\n    const checkFileConsistencyProblem = (inputState: Record<string, any>) => {\n      let out = null;\n\n      if (inputState[StoreKey]) {\n        const { recordYourCough } = inputState[StoreKey];\n        const toTest = [];\n\n        if (recordYourCough) {\n          const { recordingFile, uploadedFile } = recordYourCough;\n          if (recordingFile) {\n            toTest.push({ file: recordingFile, route: '/step-record/cough' });\n          }\n          if (uploadedFile) {\n            toTest.push({ file: uploadedFile, route: '/step-manual-upload/cough' });\n          }\n        }\n\n        const itemWithProblem = toTest.find(toTestItem => checkFileProblem(toTestItem.file));\n        if (itemWithProblem) {\n          out = itemWithProblem.route;\n        }\n      }\n\n      return out;\n    };\n\n    const problemRoute = checkFileConsistencyProblem(state);\n    if (problemRoute) {\n      history.push(`/${StoreKey}${problemRoute}`);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return null;\n};\n\nconst WrapperSubmitSteps = () => (\n  <Wizard\n    steps={steps}\n  >\n    <SubmitSteps />\n  </Wizard>\n);\n\nexport default React.memo(WrapperSubmitSteps);\n","export { default } from './SubmitSteps';\n"],"sourceRoot":""}